import{AdditiveBlending,ShaderMaterial,UniformsUtils,Vector2,WebGLRenderTarget}from"three";import{Pass,FullScreenQuad}from"./Pass.js";import{ConvolutionShader}from"../shaders/ConvolutionShader.js";class BloomPass extends Pass{constructor(e=1,t=25,r=4){super(),this.renderTargetX=new WebGLRenderTarget,this.renderTargetX.texture.name="BloomPass.x",this.renderTargetY=new WebGLRenderTarget,this.renderTargetY.texture.name="BloomPass.y",this.combineUniforms=UniformsUtils.clone(CombineShader.uniforms),this.combineUniforms.strength.value=e,this.materialCombine=new ShaderMaterial({uniforms:this.combineUniforms,vertexShader:CombineShader.vertexShader,fragmentShader:CombineShader.fragmentShader,blending:AdditiveBlending,transparent:!0});const n=ConvolutionShader;this.convolutionUniforms=UniformsUtils.clone(n.uniforms),this.convolutionUniforms.uImageIncrement.value=BloomPass.blurX,this.convolutionUniforms.cKernel.value=ConvolutionShader.buildKernel(r),this.materialConvolution=new ShaderMaterial({uniforms:this.convolutionUniforms,vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,defines:{KERNEL_SIZE_FLOAT:t.toFixed(1),KERNEL_SIZE_INT:t.toFixed(0)}}),this.needsSwap=!1,this.fsQuad=new FullScreenQuad(null)}render(e,t,r,n,s){s&&e.state.buffers.stencil.setTest(!1),this.fsQuad.material=this.materialConvolution,this.convolutionUniforms.tDiffuse.value=r.texture,this.convolutionUniforms.uImageIncrement.value=BloomPass.blurX,e.setRenderTarget(this.renderTargetX),e.clear(),this.fsQuad.render(e),this.convolutionUniforms.tDiffuse.value=this.renderTargetX.texture,this.convolutionUniforms.uImageIncrement.value=BloomPass.blurY,e.setRenderTarget(this.renderTargetY),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.materialCombine,this.combineUniforms.tDiffuse.value=this.renderTargetY.texture,s&&e.state.buffers.stencil.setTest(!0),e.setRenderTarget(r),this.clear&&e.clear(),this.fsQuad.render(e)}setSize(e,t){this.renderTargetX.setSize(e,t),this.renderTargetY.setSize(e,t)}dispose(){this.renderTargetX.dispose(),this.renderTargetY.dispose(),this.materialCombine.dispose(),this.materialConvolution.dispose(),this.fsQuad.dispose()}}const CombineShader={uniforms:{tDiffuse:{value:null},strength:{value:1}},vertexShader:"\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tuniform float strength;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = strength * texel;\n\n\t\t}"};BloomPass.blurX=new Vector2(.001953125,0),BloomPass.blurY=new Vector2(0,.001953125);export{BloomPass};