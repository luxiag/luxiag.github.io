import{BackSide,BoxGeometry,Mesh,PerspectiveCamera,Scene,ShaderLib,ShaderMaterial,UniformsUtils}from"three";import{Pass}from"./Pass.js";class CubeTexturePass extends Pass{constructor(e,t,r=1){super(),this.camera=e,this.needsSwap=!1,this.cubeShader=ShaderLib.cube,this.cubeMesh=new Mesh(new BoxGeometry(10,10,10),new ShaderMaterial({uniforms:UniformsUtils.clone(this.cubeShader.uniforms),vertexShader:this.cubeShader.vertexShader,fragmentShader:this.cubeShader.fragmentShader,depthTest:!1,depthWrite:!1,side:BackSide})),Object.defineProperty(this.cubeMesh.material,"envMap",{get:function(){return this.uniforms.tCube.value}}),this.tCube=t,this.opacity=r,this.cubeScene=new Scene,this.cubeCamera=new PerspectiveCamera,this.cubeScene.add(this.cubeMesh)}render(e,t,r){const s=e.autoClear;e.autoClear=!1,this.cubeCamera.projectionMatrix.copy(this.camera.projectionMatrix),this.cubeCamera.quaternion.setFromRotationMatrix(this.camera.matrixWorld),this.cubeMesh.material.uniforms.tCube.value=this.tCube,this.cubeMesh.material.uniforms.tFlip.value=this.tCube.isCubeTexture&&!1===this.tCube.isRenderTargetTexture?-1:1,this.cubeMesh.material.uniforms.opacity.value=this.opacity,this.cubeMesh.material.transparent=this.opacity<1,e.setRenderTarget(this.renderToScreen?null:r),this.clear&&e.clear(),e.render(this.cubeScene,this.cubeCamera),e.autoClear=s}dispose(){this.cubeMesh.geometry.dispose(),this.cubeMesh.material.dispose()}}export{CubeTexturePass};