import{Clock,Vector2,WebGLRenderTarget}from"three";import{CopyShader}from"../shaders/CopyShader.js";import{ShaderPass}from"./ShaderPass.js";import{MaskPass}from"./MaskPass.js";import{ClearMaskPass}from"./MaskPass.js";class EffectComposer{constructor(e,s){if(this.renderer=e,void 0===s){const t=e.getSize(new Vector2);this._pixelRatio=e.getPixelRatio(),this._width=t.width,this._height=t.height,(s=new WebGLRenderTarget(this._width*this._pixelRatio,this._height*this._pixelRatio)).texture.name="EffectComposer.rt1"}else this._pixelRatio=1,this._width=s.width,this._height=s.height;this.renderTarget1=s,this.renderTarget2=s.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],this.copyPass=new ShaderPass(CopyShader),this.clock=new Clock}swapBuffers(){const e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e}addPass(e){this.passes.push(e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(e,s){this.passes.splice(s,0,e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(e){const s=this.passes.indexOf(e);-1!==s&&this.passes.splice(s,1)}isLastEnabledPass(e){for(let s=e+1;s<this.passes.length;s++)if(this.passes[s].enabled)return!1;return!0}render(e){void 0===e&&(e=this.clock.getDelta());const s=this.renderer.getRenderTarget();let t=!1;for(let s=0,i=this.passes.length;s<i;s++){const i=this.passes[s];if(!1!==i.enabled){if(i.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(s),i.render(this.renderer,this.writeBuffer,this.readBuffer,e,t),i.needsSwap){if(t){const s=this.renderer.getContext(),t=this.renderer.state.buffers.stencil;t.setFunc(s.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),t.setFunc(s.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==MaskPass&&(i instanceof MaskPass?t=!0:i instanceof ClearMaskPass&&(t=!1))}}this.renderer.setRenderTarget(s)}reset(e){if(void 0===e){const s=this.renderer.getSize(new Vector2);this._pixelRatio=this.renderer.getPixelRatio(),this._width=s.width,this._height=s.height,(e=this.renderTarget1.clone()).setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=e,this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(e,s){this._width=e,this._height=s;const t=this._width*this._pixelRatio,i=this._height*this._pixelRatio;this.renderTarget1.setSize(t,i),this.renderTarget2.setSize(t,i);for(let e=0;e<this.passes.length;e++)this.passes[e].setSize(t,i)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.copyPass.dispose()}}export{EffectComposer};