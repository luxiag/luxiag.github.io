import{BufferAttribute,BufferGeometry,Group,LineSegments,Matrix3,Mesh}from"three";import{mergeGeometries}from"./BufferGeometryUtils.js";class LDrawUtils{static mergeObject(t){function r(t,r,e,i){const o=new BufferGeometry,n=t.getAttribute("position").array,a=3===e?t.getAttribute("normal").array:null,s=Math.min(r.count,Math.floor(n.length/3)-r.start),u=3*r.start,l=3*(r.start+s),c=n.subarray(u,l),m=null!==a?a.subarray(u,l):null;if(o.setAttribute("position",new BufferAttribute(c,3)),null!==m&&o.setAttribute("normal",new BufferAttribute(m,3)),i){const r=t.getAttribute("control0").array.subarray(u,l),e=t.getAttribute("control1").array.subarray(u,l),i=t.getAttribute("direction").array.subarray(u,l);o.setAttribute("control0",new BufferAttribute(r,3,!1)),o.setAttribute("control1",new BufferAttribute(e,3,!1)),o.setAttribute("direction",new BufferAttribute(i,3,!1))}return o}function e(t,r,e){const i=e[t.uuid];i?i.arr.push(r):e[t.uuid]={mat:t,arr:[r]}}function i(t,r){if(!t)return;const e=t.array,i=Math.floor(e.length/3);let o=0;for(let t=0;t<i;t++){const t=e[o],i=e[o+1],n=e[o+2];e[o]=e[o+3],e[o+1]=e[o+4],e[o+2]=e[o+5],e[o+3]=t,e[o+4]=i,e[o+5]=n,o+=3*r}}const o={},n={},a={};t.updateMatrixWorld(!0);const s=new Matrix3;t.traverse((t=>{if(t.isMesh|t.isLineSegments){const u=t.isMesh?3:2,l=t.geometry.clone();t.matrixWorld.determinant()<0&&(i(l.attributes.position,u),i(l.attributes.normal,u)),l.applyMatrix4(t.matrixWorld),t.isConditionalLine&&(l.attributes.control0.applyMatrix4(t.matrixWorld),l.attributes.control1.applyMatrix4(t.matrixWorld),s.getNormalMatrix(t.matrixWorld),l.attributes.direction.applyNormalMatrix(s));const c=t.isMesh?o:t.isConditionalLine?a:n;if(Array.isArray(t.material))for(const i in l.groups){const o=l.groups[i];e(t.material[o.materialIndex],r(l,o,u,t.isConditionalLine),c)}else e(t.material,l,c)}}));const u=new Group,l=Object.keys(o);for(const t of l){const r=o[t],e=mergeGeometries(r.arr);u.add(new Mesh(e,r.mat))}const c=Object.keys(n);for(const t of c){const r=n[t],e=mergeGeometries(r.arr);u.add(new LineSegments(e,r.mat))}const m=Object.keys(a);for(const t of m){const r=a[t],e=mergeGeometries(r.arr),i=new LineSegments(e,r.mat);i.isConditionalLine=!0,u.add(i)}return u.userData.constructionStep=0,u.userData.numConstructionSteps=1,u}}export{LDrawUtils};