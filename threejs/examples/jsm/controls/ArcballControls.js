import{GridHelper,EllipseCurve,BufferGeometry,Line,LineBasicMaterial,Raycaster,Group,Box3,Sphere,Quaternion,Vector2,Vector3,Matrix4,MathUtils,EventDispatcher}from"three";const STATE={IDLE:Symbol(),ROTATE:Symbol(),PAN:Symbol(),SCALE:Symbol(),FOV:Symbol(),FOCUS:Symbol(),ZROTATE:Symbol(),TOUCH_MULTI:Symbol(),ANIMATION_FOCUS:Symbol(),ANIMATION_ROTATE:Symbol()},INPUT={NONE:Symbol(),ONE_FINGER:Symbol(),ONE_FINGER_SWITCHED:Symbol(),TWO_FINGER:Symbol(),MULT_FINGER:Symbol(),CURSOR:Symbol()},_center={x:0,y:0},_transformation={camera:new Matrix4,gizmos:new Matrix4},_changeEvent={type:"change"},_startEvent={type:"start"},_endEvent={type:"end"},_raycaster=new Raycaster,_offset=new Vector3,_gizmoMatrixStateTemp=new Matrix4,_cameraMatrixStateTemp=new Matrix4,_scalePointTemp=new Vector3;class ArcballControls extends EventDispatcher{constructor(t,i,s=null){super(),this.camera=null,this.domElement=i,this.scene=s,this.target=new Vector3,this._currentTarget=new Vector3,this.radiusFactor=.67,this.mouseActions=[],this._mouseOp=null,this._v2_1=new Vector2,this._v3_1=new Vector3,this._v3_2=new Vector3,this._m4_1=new Matrix4,this._m4_2=new Matrix4,this._quat=new Quaternion,this._translationMatrix=new Matrix4,this._rotationMatrix=new Matrix4,this._scaleMatrix=new Matrix4,this._rotationAxis=new Vector3,this._cameraMatrixState=new Matrix4,this._cameraProjectionState=new Matrix4,this._fovState=1,this._upState=new Vector3,this._zoomState=1,this._nearPos=0,this._farPos=0,this._gizmoMatrixState=new Matrix4,this._up0=new Vector3,this._zoom0=1,this._fov0=0,this._initialNear=0,this._nearPos0=0,this._initialFar=0,this._farPos0=0,this._cameraMatrixState0=new Matrix4,this._gizmoMatrixState0=new Matrix4,this._button=-1,this._touchStart=[],this._touchCurrent=[],this._input=INPUT.NONE,this._switchSensibility=32,this._startFingerDistance=0,this._currentFingerDistance=0,this._startFingerRotation=0,this._currentFingerRotation=0,this._devPxRatio=0,this._downValid=!0,this._nclicks=0,this._downEvents=[],this._downStart=0,this._clickStart=0,this._maxDownTime=250,this._maxInterval=300,this._posThreshold=24,this._movementThreshold=24,this._currentCursorPosition=new Vector3,this._startCursorPosition=new Vector3,this._grid=null,this._gridPosition=new Vector3,this._gizmos=new Group,this._curvePts=128,this._timeStart=-1,this._animationId=-1,this.focusAnimationTime=500,this._timePrev=0,this._timeCurrent=0,this._anglePrev=0,this._angleCurrent=0,this._cursorPosPrev=new Vector3,this._cursorPosCurr=new Vector3,this._wPrev=0,this._wCurr=0,this.adjustNearFar=!1,this.scaleFactor=1.1,this.dampingFactor=25,this.wMax=20,this.enableAnimations=!0,this.enableGrid=!1,this.cursorZoom=!1,this.minFov=5,this.maxFov=90,this.enabled=!0,this.enablePan=!0,this.enableRotate=!0,this.enableZoom=!0,this.enableGizmos=!0,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this._tbRadius=1,this._state=STATE.IDLE,this.setCamera(t),null!=this.scene&&this.scene.add(this._gizmos),this.domElement.style.touchAction="none",this._devPxRatio=window.devicePixelRatio,this.initializeMouseActions(),this._onContextMenu=onContextMenu.bind(this),this._onWheel=onWheel.bind(this),this._onPointerUp=onPointerUp.bind(this),this._onPointerMove=onPointerMove.bind(this),this._onPointerDown=onPointerDown.bind(this),this._onPointerCancel=onPointerCancel.bind(this),this._onWindowResize=onWindowResize.bind(this),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onWheel),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerCancel),window.addEventListener("resize",this._onWindowResize)}onSinglePanStart(t,i){if(this.enabled)switch(this.dispatchEvent(_startEvent),this.setCenter(t.clientX,t.clientY),i){case"PAN":if(!this.enablePan)return;-1!=this._animationId&&(cancelAnimationFrame(this._animationId),this._animationId=-1,this._timeStart=-1,this.activateGizmos(!1),this.dispatchEvent(_changeEvent)),this.updateTbState(STATE.PAN,!0),this._startCursorPosition.copy(this.unprojectOnTbPlane(this.camera,_center.x,_center.y,this.domElement)),this.enableGrid&&(this.drawGrid(),this.dispatchEvent(_changeEvent));break;case"ROTATE":if(!this.enableRotate)return;-1!=this._animationId&&(cancelAnimationFrame(this._animationId),this._animationId=-1,this._timeStart=-1),this.updateTbState(STATE.ROTATE,!0),this._startCursorPosition.copy(this.unprojectOnTbSurface(this.camera,_center.x,_center.y,this.domElement,this._tbRadius)),this.activateGizmos(!0),this.enableAnimations&&(this._timePrev=this._timeCurrent=performance.now(),this._angleCurrent=this._anglePrev=0,this._cursorPosPrev.copy(this._startCursorPosition),this._cursorPosCurr.copy(this._cursorPosPrev),this._wCurr=0,this._wPrev=this._wCurr),this.dispatchEvent(_changeEvent);break;case"FOV":if(!this.camera.isPerspectiveCamera||!this.enableZoom)return;-1!=this._animationId&&(cancelAnimationFrame(this._animationId),this._animationId=-1,this._timeStart=-1,this.activateGizmos(!1),this.dispatchEvent(_changeEvent)),this.updateTbState(STATE.FOV,!0),this._startCursorPosition.setY(.5*this.getCursorNDC(_center.x,_center.y,this.domElement).y),this._currentCursorPosition.copy(this._startCursorPosition);break;case"ZOOM":if(!this.enableZoom)return;-1!=this._animationId&&(cancelAnimationFrame(this._animationId),this._animationId=-1,this._timeStart=-1,this.activateGizmos(!1),this.dispatchEvent(_changeEvent)),this.updateTbState(STATE.SCALE,!0),this._startCursorPosition.setY(.5*this.getCursorNDC(_center.x,_center.y,this.domElement).y),this._currentCursorPosition.copy(this._startCursorPosition)}}onSinglePanMove(t,i){if(this.enabled){const s=i!=this._state;switch(this.setCenter(t.clientX,t.clientY),i){case STATE.PAN:this.enablePan&&(s?(this.dispatchEvent(_endEvent),this.dispatchEvent(_startEvent),this.updateTbState(i,!0),this._startCursorPosition.copy(this.unprojectOnTbPlane(this.camera,_center.x,_center.y,this.domElement)),this.enableGrid&&this.drawGrid(),this.activateGizmos(!1)):(this._currentCursorPosition.copy(this.unprojectOnTbPlane(this.camera,_center.x,_center.y,this.domElement)),this.applyTransformMatrix(this.pan(this._startCursorPosition,this._currentCursorPosition))));break;case STATE.ROTATE:if(this.enableRotate)if(s)this.dispatchEvent(_endEvent),this.dispatchEvent(_startEvent),this.updateTbState(i,!0),this._startCursorPosition.copy(this.unprojectOnTbSurface(this.camera,_center.x,_center.y,this.domElement,this._tbRadius)),this.enableGrid&&this.disposeGrid(),this.activateGizmos(!0);else{this._currentCursorPosition.copy(this.unprojectOnTbSurface(this.camera,_center.x,_center.y,this.domElement,this._tbRadius));const t=this._startCursorPosition.distanceTo(this._currentCursorPosition),i=this._startCursorPosition.angleTo(this._currentCursorPosition),s=Math.max(t/this._tbRadius,i);this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition,this._currentCursorPosition),s)),this.enableAnimations&&(this._timePrev=this._timeCurrent,this._timeCurrent=performance.now(),this._anglePrev=this._angleCurrent,this._angleCurrent=s,this._cursorPosPrev.copy(this._cursorPosCurr),this._cursorPosCurr.copy(this._currentCursorPosition),this._wPrev=this._wCurr,this._wCurr=this.calculateAngularSpeed(this._anglePrev,this._angleCurrent,this._timePrev,this._timeCurrent))}break;case STATE.SCALE:if(this.enableZoom)if(s)this.dispatchEvent(_endEvent),this.dispatchEvent(_startEvent),this.updateTbState(i,!0),this._startCursorPosition.setY(.5*this.getCursorNDC(_center.x,_center.y,this.domElement).y),this._currentCursorPosition.copy(this._startCursorPosition),this.enableGrid&&this.disposeGrid(),this.activateGizmos(!1);else{const t=8;this._currentCursorPosition.setY(.5*this.getCursorNDC(_center.x,_center.y,this.domElement).y);const i=this._currentCursorPosition.y-this._startCursorPosition.y;let s=1;i<0?s=1/Math.pow(this.scaleFactor,-i*t):i>0&&(s=Math.pow(this.scaleFactor,i*t)),this._v3_1.setFromMatrixPosition(this._gizmoMatrixState),this.applyTransformMatrix(this.scale(s,this._v3_1))}break;case STATE.FOV:if(this.enableZoom&&this.camera.isPerspectiveCamera)if(s)this.dispatchEvent(_endEvent),this.dispatchEvent(_startEvent),this.updateTbState(i,!0),this._startCursorPosition.setY(.5*this.getCursorNDC(_center.x,_center.y,this.domElement).y),this._currentCursorPosition.copy(this._startCursorPosition),this.enableGrid&&this.disposeGrid(),this.activateGizmos(!1);else{const t=8;this._currentCursorPosition.setY(.5*this.getCursorNDC(_center.x,_center.y,this.domElement).y);const i=this._currentCursorPosition.y-this._startCursorPosition.y;let s=1;i<0?s=1/Math.pow(this.scaleFactor,-i*t):i>0&&(s=Math.pow(this.scaleFactor,i*t)),this._v3_1.setFromMatrixPosition(this._cameraMatrixState);const e=this._v3_1.distanceTo(this._gizmos.position);let a=e/s;a=MathUtils.clamp(a,this.minDistance,this.maxDistance);const o=e*Math.tan(MathUtils.DEG2RAD*this._fovState*.5);let n=MathUtils.RAD2DEG*(2*Math.atan(o/a));n=MathUtils.clamp(n,this.minFov,this.maxFov);const r=o/Math.tan(MathUtils.DEG2RAD*(n/2));s=e/r,this._v3_2.setFromMatrixPosition(this._gizmoMatrixState),this.setFov(n),this.applyTransformMatrix(this.scale(s,this._v3_2,!1)),_offset.copy(this._gizmos.position).sub(this.camera.position).normalize().multiplyScalar(r/e),this._m4_1.makeTranslation(_offset.x,_offset.y,_offset.z)}}this.dispatchEvent(_changeEvent)}}onSinglePanEnd(){if(this._state==STATE.ROTATE){if(!this.enableRotate)return;if(this.enableAnimations)if(performance.now()-this._timeCurrent<120){const t=Math.abs((this._wPrev+this._wCurr)/2),i=this;this._animationId=window.requestAnimationFrame((function(s){i.updateTbState(STATE.ANIMATION_ROTATE,!0);const e=i.calculateRotationAxis(i._cursorPosPrev,i._cursorPosCurr);i.onRotationAnim(s,e,Math.min(t,i.wMax))}))}else this.updateTbState(STATE.IDLE,!1),this.activateGizmos(!1),this.dispatchEvent(_changeEvent);else this.updateTbState(STATE.IDLE,!1),this.activateGizmos(!1),this.dispatchEvent(_changeEvent)}else this._state!=STATE.PAN&&this._state!=STATE.IDLE||(this.updateTbState(STATE.IDLE,!1),this.enableGrid&&this.disposeGrid(),this.activateGizmos(!1),this.dispatchEvent(_changeEvent));this.dispatchEvent(_endEvent)}onDoubleTap(t){if(this.enabled&&this.enablePan&&null!=this.scene){this.dispatchEvent(_startEvent),this.setCenter(t.clientX,t.clientY);const i=this.unprojectOnObj(this.getCursorNDC(_center.x,_center.y,this.domElement),this.camera);if(null!=i&&this.enableAnimations){const t=this;-1!=this._animationId&&window.cancelAnimationFrame(this._animationId),this._timeStart=-1,this._animationId=window.requestAnimationFrame((function(s){t.updateTbState(STATE.ANIMATION_FOCUS,!0),t.onFocusAnim(s,i,t._cameraMatrixState,t._gizmoMatrixState)}))}else null==i||this.enableAnimations||(this.updateTbState(STATE.FOCUS,!0),this.focus(i,this.scaleFactor),this.updateTbState(STATE.IDLE,!1),this.dispatchEvent(_changeEvent))}this.dispatchEvent(_endEvent)}onDoublePanStart(){this.enabled&&this.enablePan&&(this.dispatchEvent(_startEvent),this.updateTbState(STATE.PAN,!0),this.setCenter((this._touchCurrent[0].clientX+this._touchCurrent[1].clientX)/2,(this._touchCurrent[0].clientY+this._touchCurrent[1].clientY)/2),this._startCursorPosition.copy(this.unprojectOnTbPlane(this.camera,_center.x,_center.y,this.domElement,!0)),this._currentCursorPosition.copy(this._startCursorPosition),this.activateGizmos(!1))}onDoublePanMove(){this.enabled&&this.enablePan&&(this.setCenter((this._touchCurrent[0].clientX+this._touchCurrent[1].clientX)/2,(this._touchCurrent[0].clientY+this._touchCurrent[1].clientY)/2),this._state!=STATE.PAN&&(this.updateTbState(STATE.PAN,!0),this._startCursorPosition.copy(this._currentCursorPosition)),this._currentCursorPosition.copy(this.unprojectOnTbPlane(this.camera,_center.x,_center.y,this.domElement,!0)),this.applyTransformMatrix(this.pan(this._startCursorPosition,this._currentCursorPosition,!0)),this.dispatchEvent(_changeEvent))}onDoublePanEnd(){this.updateTbState(STATE.IDLE,!1),this.dispatchEvent(_endEvent)}onRotateStart(){this.enabled&&this.enableRotate&&(this.dispatchEvent(_startEvent),this.updateTbState(STATE.ZROTATE,!0),this._startFingerRotation=this.getAngle(this._touchCurrent[1],this._touchCurrent[0])+this.getAngle(this._touchStart[1],this._touchStart[0]),this._currentFingerRotation=this._startFingerRotation,this.camera.getWorldDirection(this._rotationAxis),this.enablePan||this.enableZoom||this.activateGizmos(!0))}onRotateMove(){if(this.enabled&&this.enableRotate){let t;this.setCenter((this._touchCurrent[0].clientX+this._touchCurrent[1].clientX)/2,(this._touchCurrent[0].clientY+this._touchCurrent[1].clientY)/2),this._state!=STATE.ZROTATE&&(this.updateTbState(STATE.ZROTATE,!0),this._startFingerRotation=this._currentFingerRotation),this._currentFingerRotation=this.getAngle(this._touchCurrent[1],this._touchCurrent[0])+this.getAngle(this._touchStart[1],this._touchStart[0]),this.enablePan?(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState),t=this.unprojectOnTbPlane(this.camera,_center.x,_center.y,this.domElement).applyQuaternion(this.camera.quaternion).multiplyScalar(1/this.camera.zoom).add(this._v3_2)):t=(new Vector3).setFromMatrixPosition(this._gizmoMatrixState);const i=MathUtils.DEG2RAD*(this._startFingerRotation-this._currentFingerRotation);this.applyTransformMatrix(this.zRotate(t,i)),this.dispatchEvent(_changeEvent)}}onRotateEnd(){this.updateTbState(STATE.IDLE,!1),this.activateGizmos(!1),this.dispatchEvent(_endEvent)}onPinchStart(){this.enabled&&this.enableZoom&&(this.dispatchEvent(_startEvent),this.updateTbState(STATE.SCALE,!0),this._startFingerDistance=this.calculatePointersDistance(this._touchCurrent[0],this._touchCurrent[1]),this._currentFingerDistance=this._startFingerDistance,this.activateGizmos(!1))}onPinchMove(){if(this.enabled&&this.enableZoom){this.setCenter((this._touchCurrent[0].clientX+this._touchCurrent[1].clientX)/2,(this._touchCurrent[0].clientY+this._touchCurrent[1].clientY)/2);const t=12;this._state!=STATE.SCALE&&(this._startFingerDistance=this._currentFingerDistance,this.updateTbState(STATE.SCALE,!0)),this._currentFingerDistance=Math.max(this.calculatePointersDistance(this._touchCurrent[0],this._touchCurrent[1]),t*this._devPxRatio);const i=this._currentFingerDistance/this._startFingerDistance;let s;this.enablePan?this.camera.isOrthographicCamera?s=this.unprojectOnTbPlane(this.camera,_center.x,_center.y,this.domElement).applyQuaternion(this.camera.quaternion).multiplyScalar(1/this.camera.zoom).add(this._gizmos.position):this.camera.isPerspectiveCamera&&(s=this.unprojectOnTbPlane(this.camera,_center.x,_center.y,this.domElement).applyQuaternion(this.camera.quaternion).add(this._gizmos.position)):s=this._gizmos.position,this.applyTransformMatrix(this.scale(i,s)),this.dispatchEvent(_changeEvent)}}onPinchEnd(){this.updateTbState(STATE.IDLE,!1),this.dispatchEvent(_endEvent)}onTriplePanStart(){if(this.enabled&&this.enableZoom){this.dispatchEvent(_startEvent),this.updateTbState(STATE.SCALE,!0);let t=0,i=0;const s=this._touchCurrent.length;for(let e=0;e<s;e++)t+=this._touchCurrent[e].clientX,i+=this._touchCurrent[e].clientY;this.setCenter(t/s,i/s),this._startCursorPosition.setY(.5*this.getCursorNDC(_center.x,_center.y,this.domElement).y),this._currentCursorPosition.copy(this._startCursorPosition)}}onTriplePanMove(){if(this.enabled&&this.enableZoom){let t=0,i=0;const s=this._touchCurrent.length;for(let e=0;e<s;e++)t+=this._touchCurrent[e].clientX,i+=this._touchCurrent[e].clientY;this.setCenter(t/s,i/s);const e=8;this._currentCursorPosition.setY(.5*this.getCursorNDC(_center.x,_center.y,this.domElement).y);const a=this._currentCursorPosition.y-this._startCursorPosition.y;let o=1;a<0?o=1/Math.pow(this.scaleFactor,-a*e):a>0&&(o=Math.pow(this.scaleFactor,a*e)),this._v3_1.setFromMatrixPosition(this._cameraMatrixState);const n=this._v3_1.distanceTo(this._gizmos.position);let r=n/o;r=MathUtils.clamp(r,this.minDistance,this.maxDistance);const h=n*Math.tan(MathUtils.DEG2RAD*this._fovState*.5);let c=MathUtils.RAD2DEG*(2*Math.atan(h/r));c=MathUtils.clamp(c,this.minFov,this.maxFov);const _=h/Math.tan(MathUtils.DEG2RAD*(c/2));o=n/_,this._v3_2.setFromMatrixPosition(this._gizmoMatrixState),this.setFov(c),this.applyTransformMatrix(this.scale(o,this._v3_2,!1)),_offset.copy(this._gizmos.position).sub(this.camera.position).normalize().multiplyScalar(_/n),this._m4_1.makeTranslation(_offset.x,_offset.y,_offset.z),this.dispatchEvent(_changeEvent)}}onTriplePanEnd(){this.updateTbState(STATE.IDLE,!1),this.dispatchEvent(_endEvent)}setCenter(t,i){_center.x=t,_center.y=i}initializeMouseActions(){this.setMouseAction("PAN",0,"CTRL"),this.setMouseAction("PAN",2),this.setMouseAction("ROTATE",0),this.setMouseAction("ZOOM","WHEEL"),this.setMouseAction("ZOOM",1),this.setMouseAction("FOV","WHEEL","SHIFT"),this.setMouseAction("FOV",1,"SHIFT")}compareMouseAction(t,i){return t.operation==i.operation&&t.mouse==i.mouse&&t.key==i.key}setMouseAction(t,i,s=null){let e;if(!["PAN","ROTATE","ZOOM","FOV"].includes(t)||![0,1,2,"WHEEL"].includes(i)||!["CTRL","SHIFT",null].includes(s))return!1;if("WHEEL"==i&&"ZOOM"!=t&&"FOV"!=t)return!1;switch(t){case"PAN":e=STATE.PAN;break;case"ROTATE":e=STATE.ROTATE;break;case"ZOOM":e=STATE.SCALE;break;case"FOV":e=STATE.FOV}const a={operation:t,mouse:i,key:s,state:e};for(let t=0;t<this.mouseActions.length;t++)if(this.mouseActions[t].mouse==a.mouse&&this.mouseActions[t].key==a.key)return this.mouseActions.splice(t,1,a),!0;return this.mouseActions.push(a),!0}unsetMouseAction(t,i=null){for(let s=0;s<this.mouseActions.length;s++)if(this.mouseActions[s].mouse==t&&this.mouseActions[s].key==i)return this.mouseActions.splice(s,1),!0;return!1}getOpFromAction(t,i){let s;for(let e=0;e<this.mouseActions.length;e++)if(s=this.mouseActions[e],s.mouse==t&&s.key==i)return s.operation;if(null!=i)for(let i=0;i<this.mouseActions.length;i++)if(s=this.mouseActions[i],s.mouse==t&&null==s.key)return s.operation;return null}getOpStateFromAction(t,i){let s;for(let e=0;e<this.mouseActions.length;e++)if(s=this.mouseActions[e],s.mouse==t&&s.key==i)return s.state;if(null!=i)for(let i=0;i<this.mouseActions.length;i++)if(s=this.mouseActions[i],s.mouse==t&&null==s.key)return s.state;return null}getAngle(t,i){return 180*Math.atan2(i.clientY-t.clientY,i.clientX-t.clientX)/Math.PI}updateTouchEvent(t){for(let i=0;i<this._touchCurrent.length;i++)if(this._touchCurrent[i].pointerId==t.pointerId){this._touchCurrent.splice(i,1,t);break}}applyTransformMatrix(t){if(null!=t.camera&&(this._m4_1.copy(this._cameraMatrixState).premultiply(t.camera),this._m4_1.decompose(this.camera.position,this.camera.quaternion,this.camera.scale),this.camera.updateMatrix(),this._state!=STATE.ROTATE&&this._state!=STATE.ZROTATE&&this._state!=STATE.ANIMATION_ROTATE||this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion)),null!=t.gizmos&&(this._m4_1.copy(this._gizmoMatrixState).premultiply(t.gizmos),this._m4_1.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this._gizmos.updateMatrix()),this._state==STATE.SCALE||this._state==STATE.FOCUS||this._state==STATE.ANIMATION_FOCUS)if(this._tbRadius=this.calculateTbRadius(this.camera),this.adjustNearFar){const t=this.camera.position.distanceTo(this._gizmos.position),i=new Box3;i.setFromObject(this._gizmos);const s=new Sphere;i.getBoundingSphere(s);const e=Math.max(this._nearPos0,s.radius+s.center.length()),a=t-this._initialNear,o=Math.min(e,a);this.camera.near=t-o;const n=Math.min(this._farPos0,-s.radius+s.center.length()),r=t-this._initialFar,h=Math.min(n,r);this.camera.far=t-h,this.camera.updateProjectionMatrix()}else{let t=!1;this.camera.near!=this._initialNear&&(this.camera.near=this._initialNear,t=!0),this.camera.far!=this._initialFar&&(this.camera.far=this._initialFar,t=!0),t&&this.camera.updateProjectionMatrix()}}calculateAngularSpeed(t,i,s,e){const a=(e-s)/1e3;return 0==a?0:(i-t)/a}calculatePointersDistance(t,i){return Math.sqrt(Math.pow(i.clientX-t.clientX,2)+Math.pow(i.clientY-t.clientY,2))}calculateRotationAxis(t,i){return this._rotationMatrix.extractRotation(this._cameraMatrixState),this._quat.setFromRotationMatrix(this._rotationMatrix),this._rotationAxis.crossVectors(t,i).applyQuaternion(this._quat),this._rotationAxis.normalize().clone()}calculateTbRadius(t){const i=t.position.distanceTo(this._gizmos.position);if("PerspectiveCamera"==t.type){const s=MathUtils.DEG2RAD*t.fov*.5,e=Math.atan(t.aspect*Math.tan(s));return Math.tan(Math.min(s,e))*i*this.radiusFactor}if("OrthographicCamera"==t.type)return Math.min(t.top,t.right)*this.radiusFactor}focus(t,i,s=1){_offset.copy(t).sub(this._gizmos.position).multiplyScalar(s),this._translationMatrix.makeTranslation(_offset.x,_offset.y,_offset.z),_gizmoMatrixStateTemp.copy(this._gizmoMatrixState),this._gizmoMatrixState.premultiply(this._translationMatrix),this._gizmoMatrixState.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),_cameraMatrixStateTemp.copy(this._cameraMatrixState),this._cameraMatrixState.premultiply(this._translationMatrix),this._cameraMatrixState.decompose(this.camera.position,this.camera.quaternion,this.camera.scale),this.enableZoom&&this.applyTransformMatrix(this.scale(i,this._gizmos.position)),this._gizmoMatrixState.copy(_gizmoMatrixStateTemp),this._cameraMatrixState.copy(_cameraMatrixStateTemp)}drawGrid(){if(null!=this.scene){const t=8947848,i=3;let s,e,a,o;if(this.camera.isOrthographicCamera){const t=this.camera.right-this.camera.left,n=this.camera.bottom-this.camera.top;a=Math.max(t,n),o=a/20,s=a/this.camera.zoom*i,e=s/o*this.camera.zoom}else if(this.camera.isPerspectiveCamera){const t=this.camera.position.distanceTo(this._gizmos.position),n=MathUtils.DEG2RAD*this.camera.fov*.5,r=Math.atan(this.camera.aspect*Math.tan(n));a=Math.tan(Math.max(n,r))*t*2,o=a/20,s=a*i,e=s/o}null==this._grid&&(this._grid=new GridHelper(s,e,t,t),this._grid.position.copy(this._gizmos.position),this._gridPosition.copy(this._grid.position),this._grid.quaternion.copy(this.camera.quaternion),this._grid.rotateX(.5*Math.PI),this.scene.add(this._grid))}}dispose(){-1!=this._animationId&&window.cancelAnimationFrame(this._animationId),this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointercancel",this._onPointerCancel),this.domElement.removeEventListener("wheel",this._onWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),window.removeEventListener("pointermove",this._onPointerMove),window.removeEventListener("pointerup",this._onPointerUp),window.removeEventListener("resize",this._onWindowResize),null!==this.scene&&this.scene.remove(this._gizmos),this.disposeGrid()}disposeGrid(){null!=this._grid&&null!=this.scene&&(this.scene.remove(this._grid),this._grid=null)}easeOutCubic(t){return 1-Math.pow(1-t,3)}activateGizmos(t){const i=this._gizmos.children[0],s=this._gizmos.children[1],e=this._gizmos.children[2];t?(i.material.setValues({opacity:1}),s.material.setValues({opacity:1}),e.material.setValues({opacity:1})):(i.material.setValues({opacity:.6}),s.material.setValues({opacity:.6}),e.material.setValues({opacity:.6}))}getCursorNDC(t,i,s){const e=s.getBoundingClientRect();return this._v2_1.setX((t-e.left)/e.width*2-1),this._v2_1.setY((e.bottom-i)/e.height*2-1),this._v2_1.clone()}getCursorPosition(t,i,s){return this._v2_1.copy(this.getCursorNDC(t,i,s)),this._v2_1.x*=.5*(this.camera.right-this.camera.left),this._v2_1.y*=.5*(this.camera.top-this.camera.bottom),this._v2_1.clone()}setCamera(t){t.lookAt(this.target),t.updateMatrix(),"PerspectiveCamera"==t.type&&(this._fov0=t.fov,this._fovState=t.fov),this._cameraMatrixState0.copy(t.matrix),this._cameraMatrixState.copy(this._cameraMatrixState0),this._cameraProjectionState.copy(t.projectionMatrix),this._zoom0=t.zoom,this._zoomState=this._zoom0,this._initialNear=t.near,this._nearPos0=t.position.distanceTo(this.target)-t.near,this._nearPos=this._initialNear,this._initialFar=t.far,this._farPos0=t.position.distanceTo(this.target)-t.far,this._farPos=this._initialFar,this._up0.copy(t.up),this._upState.copy(t.up),this.camera=t,this.camera.updateProjectionMatrix(),this._tbRadius=this.calculateTbRadius(t),this.makeGizmos(this.target,this._tbRadius)}setGizmosVisible(t){this._gizmos.visible=t,this.dispatchEvent(_changeEvent)}setTbRadius(t){this.radiusFactor=t,this._tbRadius=this.calculateTbRadius(this.camera);const i=new EllipseCurve(0,0,this._tbRadius,this._tbRadius).getPoints(this._curvePts),s=(new BufferGeometry).setFromPoints(i);for(const t in this._gizmos.children)this._gizmos.children[t].geometry=s;this.dispatchEvent(_changeEvent)}makeGizmos(t,i){const s=new EllipseCurve(0,0,i,i).getPoints(this._curvePts),e=(new BufferGeometry).setFromPoints(s),a=new LineBasicMaterial({color:16744576,fog:!1,transparent:!0,opacity:.6}),o=new LineBasicMaterial({color:8454016,fog:!1,transparent:!0,opacity:.6}),n=new LineBasicMaterial({color:8421631,fog:!1,transparent:!0,opacity:.6}),r=new Line(e,a),h=new Line(e,o),c=new Line(e,n),_=.5*Math.PI;if(r.rotation.x=_,h.rotation.y=_,this._gizmoMatrixState0.identity().setPosition(t),this._gizmoMatrixState.copy(this._gizmoMatrixState0),1!==this.camera.zoom){const i=1/this.camera.zoom;this._scaleMatrix.makeScale(i,i,i),this._translationMatrix.makeTranslation(-t.x,-t.y,-t.z),this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix),this._translationMatrix.makeTranslation(t.x,t.y,t.z),this._gizmoMatrixState.premultiply(this._translationMatrix)}this._gizmoMatrixState.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this._gizmos.traverse((function(t){t.isLine&&(t.geometry.dispose(),t.material.dispose())})),this._gizmos.clear(),this._gizmos.add(r),this._gizmos.add(h),this._gizmos.add(c)}onFocusAnim(t,i,s,e){if(-1==this._timeStart&&(this._timeStart=t),this._state==STATE.ANIMATION_FOCUS){const a=(t-this._timeStart)/this.focusAnimationTime;if(this._gizmoMatrixState.copy(e),a>=1)this._gizmoMatrixState.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this.focus(i,this.scaleFactor),this._timeStart=-1,this.updateTbState(STATE.IDLE,!1),this.activateGizmos(!1),this.dispatchEvent(_changeEvent);else{const t=this.easeOutCubic(a),o=1-t+this.scaleFactor*t;this._gizmoMatrixState.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this.focus(i,o,t),this.dispatchEvent(_changeEvent);const n=this;this._animationId=window.requestAnimationFrame((function(t){n.onFocusAnim(t,i,s,e.clone())}))}}else this._animationId=-1,this._timeStart=-1}onRotationAnim(t,i,s){if(-1==this._timeStart&&(this._anglePrev=0,this._angleCurrent=0,this._timeStart=t),this._state==STATE.ANIMATION_ROTATE){const e=(t-this._timeStart)/1e3;if(s+-this.dampingFactor*e>0){this._angleCurrent=.5*-this.dampingFactor*Math.pow(e,2)+s*e+0,this.applyTransformMatrix(this.rotate(i,this._angleCurrent)),this.dispatchEvent(_changeEvent);const t=this;this._animationId=window.requestAnimationFrame((function(e){t.onRotationAnim(e,i,s)}))}else this._animationId=-1,this._timeStart=-1,this.updateTbState(STATE.IDLE,!1),this.activateGizmos(!1),this.dispatchEvent(_changeEvent)}else this._animationId=-1,this._timeStart=-1,this._state!=STATE.ROTATE&&(this.activateGizmos(!1),this.dispatchEvent(_changeEvent))}pan(t,i,s=!1){const e=t.clone().sub(i);if(this.camera.isOrthographicCamera)e.multiplyScalar(1/this.camera.zoom);else if(this.camera.isPerspectiveCamera&&s){this._v3_1.setFromMatrixPosition(this._cameraMatrixState0),this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0);const t=this._v3_1.distanceTo(this._v3_2)/this.camera.position.distanceTo(this._gizmos.position);e.multiplyScalar(1/t)}return this._v3_1.set(e.x,e.y,0).applyQuaternion(this.camera.quaternion),this._m4_1.makeTranslation(this._v3_1.x,this._v3_1.y,this._v3_1.z),this.setTransformationMatrices(this._m4_1,this._m4_1),_transformation}reset(){this.camera.zoom=this._zoom0,this.camera.isPerspectiveCamera&&(this.camera.fov=this._fov0),this.camera.near=this._nearPos,this.camera.far=this._farPos,this._cameraMatrixState.copy(this._cameraMatrixState0),this._cameraMatrixState.decompose(this.camera.position,this.camera.quaternion,this.camera.scale),this.camera.up.copy(this._up0),this.camera.updateMatrix(),this.camera.updateProjectionMatrix(),this._gizmoMatrixState.copy(this._gizmoMatrixState0),this._gizmoMatrixState0.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this._gizmos.updateMatrix(),this._tbRadius=this.calculateTbRadius(this.camera),this.makeGizmos(this._gizmos.position,this._tbRadius),this.camera.lookAt(this._gizmos.position),this.updateTbState(STATE.IDLE,!1),this.dispatchEvent(_changeEvent)}rotate(t,i){const s=this._gizmos.position;return this._translationMatrix.makeTranslation(-s.x,-s.y,-s.z),this._rotationMatrix.makeRotationAxis(t,-i),this._m4_1.makeTranslation(s.x,s.y,s.z),this._m4_1.multiply(this._rotationMatrix),this._m4_1.multiply(this._translationMatrix),this.setTransformationMatrices(this._m4_1),_transformation}copyState(){let t;this.camera.isOrthographicCamera?t=JSON.stringify({arcballState:{cameraFar:this.camera.far,cameraMatrix:this.camera.matrix,cameraNear:this.camera.near,cameraUp:this.camera.up,cameraZoom:this.camera.zoom,gizmoMatrix:this._gizmos.matrix}}):this.camera.isPerspectiveCamera&&(t=JSON.stringify({arcballState:{cameraFar:this.camera.far,cameraFov:this.camera.fov,cameraMatrix:this.camera.matrix,cameraNear:this.camera.near,cameraUp:this.camera.up,cameraZoom:this.camera.zoom,gizmoMatrix:this._gizmos.matrix}})),navigator.clipboard.writeText(t)}pasteState(){const t=this;navigator.clipboard.readText().then((function(i){t.setStateFromJSON(i)}))}saveState(){this._cameraMatrixState0.copy(this.camera.matrix),this._gizmoMatrixState0.copy(this._gizmos.matrix),this._nearPos=this.camera.near,this._farPos=this.camera.far,this._zoom0=this.camera.zoom,this._up0.copy(this.camera.up),this.camera.isPerspectiveCamera&&(this._fov0=this.camera.fov)}scale(t,i,s=!0){_scalePointTemp.copy(i);let e=1/t;if(this.camera.isOrthographicCamera){this.camera.zoom=this._zoomState,this.camera.zoom*=t,this.camera.zoom>this.maxZoom?(this.camera.zoom=this.maxZoom,e=this._zoomState/this.maxZoom):this.camera.zoom<this.minZoom&&(this.camera.zoom=this.minZoom,e=this._zoomState/this.minZoom),this.camera.updateProjectionMatrix(),this._v3_1.setFromMatrixPosition(this._gizmoMatrixState),this._scaleMatrix.makeScale(e,e,e),this._translationMatrix.makeTranslation(-this._v3_1.x,-this._v3_1.y,-this._v3_1.z),this._m4_2.makeTranslation(this._v3_1.x,this._v3_1.y,this._v3_1.z).multiply(this._scaleMatrix),this._m4_2.multiply(this._translationMatrix),_scalePointTemp.sub(this._v3_1);const i=_scalePointTemp.clone().multiplyScalar(e);return _scalePointTemp.sub(i),this._m4_1.makeTranslation(_scalePointTemp.x,_scalePointTemp.y,_scalePointTemp.z),this._m4_2.premultiply(this._m4_1),this.setTransformationMatrices(this._m4_1,this._m4_2),_transformation}if(this.camera.isPerspectiveCamera){this._v3_1.setFromMatrixPosition(this._cameraMatrixState),this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);let t=this._v3_1.distanceTo(_scalePointTemp),i=t-t*e;const a=t-i;if(a<this.minDistance?(e=this.minDistance/t,i=t-t*e):a>this.maxDistance&&(e=this.maxDistance/t,i=t-t*e),_offset.copy(_scalePointTemp).sub(this._v3_1).normalize().multiplyScalar(i),this._m4_1.makeTranslation(_offset.x,_offset.y,_offset.z),s){const s=this._v3_2;t=s.distanceTo(_scalePointTemp),i=t-t*e,_offset.copy(_scalePointTemp).sub(this._v3_2).normalize().multiplyScalar(i),this._translationMatrix.makeTranslation(s.x,s.y,s.z),this._scaleMatrix.makeScale(e,e,e),this._m4_2.makeTranslation(_offset.x,_offset.y,_offset.z).multiply(this._translationMatrix),this._m4_2.multiply(this._scaleMatrix),this._translationMatrix.makeTranslation(-s.x,-s.y,-s.z),this._m4_2.multiply(this._translationMatrix),this.setTransformationMatrices(this._m4_1,this._m4_2)}else this.setTransformationMatrices(this._m4_1);return _transformation}}setFov(t){this.camera.isPerspectiveCamera&&(this.camera.fov=MathUtils.clamp(t,this.minFov,this.maxFov),this.camera.updateProjectionMatrix())}setTransformationMatrices(t=null,i=null){null!=t?null!=_transformation.camera?_transformation.camera.copy(t):_transformation.camera=t.clone():_transformation.camera=null,null!=i?null!=_transformation.gizmos?_transformation.gizmos.copy(i):_transformation.gizmos=i.clone():_transformation.gizmos=null}zRotate(t,i){return this._rotationMatrix.makeRotationAxis(this._rotationAxis,i),this._translationMatrix.makeTranslation(-t.x,-t.y,-t.z),this._m4_1.makeTranslation(t.x,t.y,t.z),this._m4_1.multiply(this._rotationMatrix),this._m4_1.multiply(this._translationMatrix),this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(t),this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis,i),this._v3_2.sub(this._v3_1),this._m4_2.makeTranslation(this._v3_2.x,this._v3_2.y,this._v3_2.z),this.setTransformationMatrices(this._m4_1,this._m4_2),_transformation}getRaycaster(){return _raycaster}unprojectOnObj(t,i){const s=this.getRaycaster();s.near=i.near,s.far=i.far,s.setFromCamera(t,i);const e=s.intersectObjects(this.scene.children,!0);for(let t=0;t<e.length;t++)if(e[t].object.uuid!=this._gizmos.uuid&&null!=e[t].face)return e[t].point.clone();return null}unprojectOnTbSurface(t,i,s,e,a){if("OrthographicCamera"==t.type){this._v2_1.copy(this.getCursorPosition(i,s,e)),this._v3_1.set(this._v2_1.x,this._v2_1.y,0);const t=Math.pow(this._v2_1.x,2),a=Math.pow(this._v2_1.y,2),o=Math.pow(this._tbRadius,2);return t+a<=.5*o?this._v3_1.setZ(Math.sqrt(o-(t+a))):this._v3_1.setZ(.5*o/Math.sqrt(t+a)),this._v3_1}if("PerspectiveCamera"==t.type){this._v2_1.copy(this.getCursorNDC(i,s,e)),this._v3_1.set(this._v2_1.x,this._v2_1.y,-1),this._v3_1.applyMatrix4(t.projectionMatrixInverse);const o=this._v3_1.clone().normalize(),n=t.position.distanceTo(this._gizmos.position),r=Math.pow(a,2),h=this._v3_1.z,c=Math.sqrt(Math.pow(this._v3_1.x,2)+Math.pow(this._v3_1.y,2));if(0==c)return o.set(this._v3_1.x,this._v3_1.y,a),o;const _=h/c,m=n;let l=Math.pow(_,2)+1,u=2*_*m,p=Math.pow(m,2)-r,d=Math.pow(u,2)-4*l*p;if(d>=0&&(this._v2_1.setX((-u-Math.sqrt(d))/(2*l)),this._v2_1.setY(_*this._v2_1.x+m),MathUtils.RAD2DEG*this._v2_1.angle()>=45)){const t=Math.sqrt(Math.pow(this._v2_1.x,2)+Math.pow(n-this._v2_1.y,2));return o.multiplyScalar(t),o.z+=n,o}l=_,u=m,p=.5*-r,d=Math.pow(u,2)-4*l*p,this._v2_1.setX((-u-Math.sqrt(d))/(2*l)),this._v2_1.setY(_*this._v2_1.x+m);const v=Math.sqrt(Math.pow(this._v2_1.x,2)+Math.pow(n-this._v2_1.y,2));return o.multiplyScalar(v),o.z+=n,o}}unprojectOnTbPlane(t,i,s,e,a=!1){if("OrthographicCamera"==t.type)return this._v2_1.copy(this.getCursorPosition(i,s,e)),this._v3_1.set(this._v2_1.x,this._v2_1.y,0),this._v3_1.clone();if("PerspectiveCamera"==t.type){this._v2_1.copy(this.getCursorNDC(i,s,e)),this._v3_1.set(this._v2_1.x,this._v2_1.y,-1),this._v3_1.applyMatrix4(t.projectionMatrixInverse);const o=this._v3_1.clone().normalize(),n=this._v3_1.z,r=Math.sqrt(Math.pow(this._v3_1.x,2)+Math.pow(this._v3_1.y,2));let h;if(h=a?this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0)):t.position.distanceTo(this._gizmos.position),0==r)return o.set(0,0,0),o;const c=h,_=-c/(n/r),m=Math.sqrt(Math.pow(c,2)+Math.pow(_,2));return o.multiplyScalar(m),o.z=0,o}}updateMatrixState(){this._cameraMatrixState.copy(this.camera.matrix),this._gizmoMatrixState.copy(this._gizmos.matrix),this.camera.isOrthographicCamera?(this._cameraProjectionState.copy(this.camera.projectionMatrix),this.camera.updateProjectionMatrix(),this._zoomState=this.camera.zoom):this.camera.isPerspectiveCamera&&(this._fovState=this.camera.fov)}updateTbState(t,i){this._state=t,i&&this.updateMatrixState()}update(){const t=1e-6;if(!1===this.target.equals(this._currentTarget)&&(this._gizmos.position.copy(this.target),this._tbRadius=this.calculateTbRadius(this.camera),this.makeGizmos(this.target,this._tbRadius),this._currentTarget.copy(this.target)),this.camera.isOrthographicCamera){if(this.camera.zoom>this.maxZoom||this.camera.zoom<this.minZoom){const t=MathUtils.clamp(this.camera.zoom,this.minZoom,this.maxZoom);this.applyTransformMatrix(this.scale(t/this.camera.zoom,this._gizmos.position,!0))}}else if(this.camera.isPerspectiveCamera){const i=this.camera.position.distanceTo(this._gizmos.position);if(i>this.maxDistance+t||i<this.minDistance-t){const t=MathUtils.clamp(i,this.minDistance,this.maxDistance);this.applyTransformMatrix(this.scale(t/i,this._gizmos.position)),this.updateMatrixState()}(this.camera.fov<this.minFov||this.camera.fov>this.maxFov)&&(this.camera.fov=MathUtils.clamp(this.camera.fov,this.minFov,this.maxFov),this.camera.updateProjectionMatrix());const s=this._tbRadius;if(this._tbRadius=this.calculateTbRadius(this.camera),s<this._tbRadius-t||s>this._tbRadius+t){const t=(this._gizmos.scale.x+this._gizmos.scale.y+this._gizmos.scale.z)/3,i=this._tbRadius/t,s=new EllipseCurve(0,0,i,i).getPoints(this._curvePts),e=(new BufferGeometry).setFromPoints(s);for(const t in this._gizmos.children)this._gizmos.children[t].geometry=e}}this.camera.lookAt(this._gizmos.position)}setStateFromJSON(t){const i=JSON.parse(t);if(null!=i.arcballState){this._cameraMatrixState.fromArray(i.arcballState.cameraMatrix.elements),this._cameraMatrixState.decompose(this.camera.position,this.camera.quaternion,this.camera.scale),this.camera.up.copy(i.arcballState.cameraUp),this.camera.near=i.arcballState.cameraNear,this.camera.far=i.arcballState.cameraFar,this.camera.zoom=i.arcballState.cameraZoom,this.camera.isPerspectiveCamera&&(this.camera.fov=i.arcballState.cameraFov),this._gizmoMatrixState.fromArray(i.arcballState.gizmoMatrix.elements),this._gizmoMatrixState.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this.camera.updateMatrix(),this.camera.updateProjectionMatrix(),this._gizmos.updateMatrix(),this._tbRadius=this.calculateTbRadius(this.camera);const t=(new Matrix4).copy(this._gizmoMatrixState0);this.makeGizmos(this._gizmos.position,this._tbRadius),this._gizmoMatrixState0.copy(t),this.camera.lookAt(this._gizmos.position),this.updateTbState(STATE.IDLE,!1),this.dispatchEvent(_changeEvent)}}}function onWindowResize(){const t=(this._gizmos.scale.x+this._gizmos.scale.y+this._gizmos.scale.z)/3;this._tbRadius=this.calculateTbRadius(this.camera);const i=this._tbRadius/t,s=new EllipseCurve(0,0,i,i).getPoints(this._curvePts),e=(new BufferGeometry).setFromPoints(s);for(const t in this._gizmos.children)this._gizmos.children[t].geometry=e;this.dispatchEvent(_changeEvent)}function onContextMenu(t){if(this.enabled)for(let i=0;i<this.mouseActions.length;i++)if(2==this.mouseActions[i].mouse){t.preventDefault();break}}function onPointerCancel(){this._touchStart.splice(0,this._touchStart.length),this._touchCurrent.splice(0,this._touchCurrent.length),this._input=INPUT.NONE}function onPointerDown(t){if(0==t.button&&t.isPrimary?(this._downValid=!0,this._downEvents.push(t),this._downStart=performance.now()):this._downValid=!1,"touch"==t.pointerType&&this._input!=INPUT.CURSOR)switch(this._touchStart.push(t),this._touchCurrent.push(t),this._input){case INPUT.NONE:this._input=INPUT.ONE_FINGER,this.onSinglePanStart(t,"ROTATE"),window.addEventListener("pointermove",this._onPointerMove),window.addEventListener("pointerup",this._onPointerUp);break;case INPUT.ONE_FINGER:case INPUT.ONE_FINGER_SWITCHED:this._input=INPUT.TWO_FINGER,this.onRotateStart(),this.onPinchStart(),this.onDoublePanStart();break;case INPUT.TWO_FINGER:this._input=INPUT.MULT_FINGER,this.onTriplePanStart(t)}else if("touch"!=t.pointerType&&this._input==INPUT.NONE){let i=null;t.ctrlKey||t.metaKey?i="CTRL":t.shiftKey&&(i="SHIFT"),this._mouseOp=this.getOpFromAction(t.button,i),null!=this._mouseOp&&(window.addEventListener("pointermove",this._onPointerMove),window.addEventListener("pointerup",this._onPointerUp),this._input=INPUT.CURSOR,this._button=t.button,this.onSinglePanStart(t,this._mouseOp))}}function onPointerMove(t){if("touch"==t.pointerType&&this._input!=INPUT.CURSOR)switch(this._input){case INPUT.ONE_FINGER:this.updateTouchEvent(t),this.onSinglePanMove(t,STATE.ROTATE);break;case INPUT.ONE_FINGER_SWITCHED:if(this.calculatePointersDistance(this._touchCurrent[0],t)*this._devPxRatio>=this._switchSensibility){this._input=INPUT.ONE_FINGER,this.updateTouchEvent(t),this.onSinglePanStart(t,"ROTATE");break}break;case INPUT.TWO_FINGER:this.updateTouchEvent(t),this.onRotateMove(),this.onPinchMove(),this.onDoublePanMove();break;case INPUT.MULT_FINGER:this.updateTouchEvent(t),this.onTriplePanMove(t)}else if("touch"!=t.pointerType&&this._input==INPUT.CURSOR){let i=null;t.ctrlKey||t.metaKey?i="CTRL":t.shiftKey&&(i="SHIFT");const s=this.getOpStateFromAction(this._button,i);null!=s&&this.onSinglePanMove(t,s)}this._downValid&&this.calculatePointersDistance(this._downEvents[this._downEvents.length-1],t)*this._devPxRatio>this._movementThreshold&&(this._downValid=!1)}function onPointerUp(t){if("touch"==t.pointerType&&this._input!=INPUT.CURSOR){const i=this._touchCurrent.length;for(let s=0;s<i;s++)if(this._touchCurrent[s].pointerId==t.pointerId){this._touchCurrent.splice(s,1),this._touchStart.splice(s,1);break}switch(this._input){case INPUT.ONE_FINGER:case INPUT.ONE_FINGER_SWITCHED:window.removeEventListener("pointermove",this._onPointerMove),window.removeEventListener("pointerup",this._onPointerUp),this._input=INPUT.NONE,this.onSinglePanEnd();break;case INPUT.TWO_FINGER:this.onDoublePanEnd(t),this.onPinchEnd(t),this.onRotateEnd(t),this._input=INPUT.ONE_FINGER_SWITCHED;break;case INPUT.MULT_FINGER:0==this._touchCurrent.length&&(window.removeEventListener("pointermove",this._onPointerMove),window.removeEventListener("pointerup",this._onPointerUp),this._input=INPUT.NONE,this.onTriplePanEnd())}}else"touch"!=t.pointerType&&this._input==INPUT.CURSOR&&(window.removeEventListener("pointermove",this._onPointerMove),window.removeEventListener("pointerup",this._onPointerUp),this._input=INPUT.NONE,this.onSinglePanEnd(),this._button=-1);if(t.isPrimary)if(this._downValid)if(t.timeStamp-this._downEvents[this._downEvents.length-1].timeStamp<=this._maxDownTime)if(0==this._nclicks)this._nclicks=1,this._clickStart=performance.now();else{const i=t.timeStamp-this._clickStart,s=this.calculatePointersDistance(this._downEvents[1],this._downEvents[0])*this._devPxRatio;i<=this._maxInterval&&s<=this._posThreshold?(this._nclicks=0,this._downEvents.splice(0,this._downEvents.length),this.onDoubleTap(t)):(this._nclicks=1,this._downEvents.shift(),this._clickStart=performance.now())}else this._downValid=!1,this._nclicks=0,this._downEvents.splice(0,this._downEvents.length);else this._nclicks=0,this._downEvents.splice(0,this._downEvents.length)}function onWheel(t){if(this.enabled&&this.enableZoom){let i=null;t.ctrlKey||t.metaKey?i="CTRL":t.shiftKey&&(i="SHIFT");const s=this.getOpFromAction("WHEEL",i);if(null!=s){t.preventDefault(),this.dispatchEvent(_startEvent);const i=125;let e=t.deltaY/i,a=1;switch(e>0?a=1/this.scaleFactor:e<0&&(a=this.scaleFactor),s){case"ZOOM":if(this.updateTbState(STATE.SCALE,!0),e>0?a=1/Math.pow(this.scaleFactor,e):e<0&&(a=Math.pow(this.scaleFactor,-e)),this.cursorZoom&&this.enablePan){let i;this.camera.isOrthographicCamera?i=this.unprojectOnTbPlane(this.camera,t.clientX,t.clientY,this.domElement).applyQuaternion(this.camera.quaternion).multiplyScalar(1/this.camera.zoom).add(this._gizmos.position):this.camera.isPerspectiveCamera&&(i=this.unprojectOnTbPlane(this.camera,t.clientX,t.clientY,this.domElement).applyQuaternion(this.camera.quaternion).add(this._gizmos.position)),this.applyTransformMatrix(this.scale(a,i))}else this.applyTransformMatrix(this.scale(a,this._gizmos.position));null!=this._grid&&(this.disposeGrid(),this.drawGrid()),this.updateTbState(STATE.IDLE,!1),this.dispatchEvent(_changeEvent),this.dispatchEvent(_endEvent);break;case"FOV":if(this.camera.isPerspectiveCamera){this.updateTbState(STATE.FOV,!0),0!=t.deltaX&&(e=t.deltaX/i,a=1,e>0?a=1/Math.pow(this.scaleFactor,e):e<0&&(a=Math.pow(this.scaleFactor,-e))),this._v3_1.setFromMatrixPosition(this._cameraMatrixState);const s=this._v3_1.distanceTo(this._gizmos.position);let o=s/a;o=MathUtils.clamp(o,this.minDistance,this.maxDistance);const n=s*Math.tan(MathUtils.DEG2RAD*this.camera.fov*.5);let r=MathUtils.RAD2DEG*(2*Math.atan(n/o));r>this.maxFov?r=this.maxFov:r<this.minFov&&(r=this.minFov),a=s/(n/Math.tan(MathUtils.DEG2RAD*(r/2))),this.setFov(r),this.applyTransformMatrix(this.scale(a,this._gizmos.position,!1))}null!=this._grid&&(this.disposeGrid(),this.drawGrid()),this.updateTbState(STATE.IDLE,!1),this.dispatchEvent(_changeEvent),this.dispatchEvent(_endEvent)}}}}export{ArcballControls};