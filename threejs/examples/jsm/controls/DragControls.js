import{EventDispatcher,Matrix4,Plane,Raycaster,Vector2,Vector3}from"three";const _plane=new Plane,_raycaster=new Raycaster,_pointer=new Vector2,_offset=new Vector3,_intersection=new Vector3,_worldPosition=new Vector3,_inverseMatrix=new Matrix4;class DragControls extends EventDispatcher{constructor(e,t,r){super(),r.style.touchAction="none";let n=null,o=null;const i=[],s=this;function a(){r.addEventListener("pointermove",l),r.addEventListener("pointerdown",p),r.addEventListener("pointerup",d),r.addEventListener("pointerleave",d)}function c(){r.removeEventListener("pointermove",l),r.removeEventListener("pointerdown",p),r.removeEventListener("pointerup",d),r.removeEventListener("pointerleave",d),r.style.cursor=""}function l(a){if(!1!==s.enabled){if(u(a),_raycaster.setFromCamera(_pointer,t),n)return _raycaster.ray.intersectPlane(_plane,_intersection)&&n.position.copy(_intersection.sub(_offset).applyMatrix4(_inverseMatrix)),void s.dispatchEvent({type:"drag",object:n});if("mouse"===a.pointerType||"pen"===a.pointerType)if(i.length=0,_raycaster.setFromCamera(_pointer,t),_raycaster.intersectObjects(e,!0,i),i.length>0){const e=i[0].object;_plane.setFromNormalAndCoplanarPoint(t.getWorldDirection(_plane.normal),_worldPosition.setFromMatrixPosition(e.matrixWorld)),o!==e&&null!==o&&(s.dispatchEvent({type:"hoveroff",object:o}),r.style.cursor="auto",o=null),o!==e&&(s.dispatchEvent({type:"hoveron",object:e}),r.style.cursor="pointer",o=e)}else null!==o&&(s.dispatchEvent({type:"hoveroff",object:o}),r.style.cursor="auto",o=null)}}function p(o){!1!==s.enabled&&(u(o),i.length=0,_raycaster.setFromCamera(_pointer,t),_raycaster.intersectObjects(e,!0,i),i.length>0&&(n=!0===s.transformGroup?e[0]:i[0].object,_plane.setFromNormalAndCoplanarPoint(t.getWorldDirection(_plane.normal),_worldPosition.setFromMatrixPosition(n.matrixWorld)),_raycaster.ray.intersectPlane(_plane,_intersection)&&(_inverseMatrix.copy(n.parent.matrixWorld).invert(),_offset.copy(_intersection).sub(_worldPosition.setFromMatrixPosition(n.matrixWorld))),r.style.cursor="move",s.dispatchEvent({type:"dragstart",object:n})))}function d(){!1!==s.enabled&&(n&&(s.dispatchEvent({type:"dragend",object:n}),n=null),r.style.cursor=o?"pointer":"auto")}function u(e){const t=r.getBoundingClientRect();_pointer.x=(e.clientX-t.left)/t.width*2-1,_pointer.y=-(e.clientY-t.top)/t.height*2+1}a(),this.enabled=!0,this.transformGroup=!1,this.activate=a,this.deactivate=c,this.dispose=function(){c()},this.getObjects=function(){return e},this.getRaycaster=function(){return _raycaster}}}export{DragControls};