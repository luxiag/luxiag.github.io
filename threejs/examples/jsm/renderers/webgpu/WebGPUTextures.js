import{GPUTextureFormat,GPUAddressMode,GPUFilterMode,GPUTextureDimension}from"./constants.js";import{VideoTexture,CubeTexture,Texture,NearestFilter,NearestMipmapNearestFilter,NearestMipmapLinearFilter,LinearFilter,RepeatWrapping,MirroredRepeatWrapping,RGB_ETC2_Format,RGBA_ETC2_EAC_Format,RGBAFormat,RedFormat,RGFormat,RGBA_S3TC_DXT1_Format,RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format,UnsignedByteType,FloatType,HalfFloatType,SRGBColorSpace,DepthFormat,DepthTexture,RGBA_ASTC_4x4_Format,RGBA_ASTC_5x4_Format,RGBA_ASTC_5x5_Format,RGBA_ASTC_6x5_Format,RGBA_ASTC_6x6_Format,RGBA_ASTC_8x5_Format,RGBA_ASTC_8x6_Format,RGBA_ASTC_8x8_Format,RGBA_ASTC_10x5_Format,RGBA_ASTC_10x6_Format,RGBA_ASTC_10x8_Format,RGBA_ASTC_10x10_Format,RGBA_ASTC_12x10_Format,RGBA_ASTC_12x12_Format}from"three";import WebGPUTextureUtils from"./WebGPUTextureUtils.js";class WebGPUTextures{constructor(e,t,r){this.device=e,this.properties=t,this.info=r,this.defaultTexture=null,this.depthDefaultTexture=null,this.defaultVideoTexture=null,this.defaultCubeTexture=null,this.defaultSampler=null,this.samplerCache=new Map,this.utils=null}getDefaultSampler(){return null===this.defaultSampler&&(this.defaultSampler=this.device.createSampler({})),this.defaultSampler}getDepthDefaultTexture(){if(null===this.depthDefaultTexture){const e=new DepthTexture;e.minFilter=NearestFilter,e.magFilter=NearestFilter,e.image.width=1,e.image.height=1,this._uploadTexture(e),this.depthDefaultTexture=this.getTextureGPU(e)}return this.depthDefaultTexture}getDefaultTexture(){if(null===this.defaultTexture){const e=new Texture;e.minFilter=NearestFilter,e.magFilter=NearestFilter,this._uploadTexture(e),this.defaultTexture=this.getTextureGPU(e)}return this.defaultTexture}getVideoDefaultTexture(){if(null===this.defaultVideoTexture){const e=document.getElementById("video"),t=new VideoTexture(e);t.minFilter=NearestFilter,t.magFilter=NearestFilter,this._uploadVideoTexture(t),this.defaultVideoTexture=this.getTextureGPU(t)}return this.defaultVideoTexture}getDefaultCubeTexture(){if(null===this.defaultCubeTexture){const e=new CubeTexture;e.minFilter=NearestFilter,e.magFilter=NearestFilter,this._uploadTexture(e),this.defaultCubeTexture=this.getTextureGPU(e)}return this.defaultCubeTexture}getTextureGPU(e){return this.properties.get(e).textureGPU}getSampler(e){return this.properties.get(e).samplerGPU}updateTexture(e){let t=!1;const r=this.properties.get(e);if(e.version>0&&r.version!==e.version){const o=e.image;if(void 0===o)console.warn("THREE.WebGPURenderer: Texture marked for update but image is undefined.");else if(!1===o.complete)console.warn("THREE.WebGPURenderer: Texture marked for update but image is incomplete.");else{if(void 0===r.initialized){r.initialized=!0;const t=onTextureDispose.bind(this);r.disposeCallback=t,e.addEventListener("dispose",t),this.info.memory.textures++}t=e.isVideoTexture?this._uploadVideoTexture(e):this._uploadTexture(e)}}return!1===r.initializedRTT&&(r.initializedRTT=!0,t=!0),t}updateSampler(e){const t=[];t.push(e.wrapS),t.push(e.wrapT),t.push(e.wrapR),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy);const r=t.join();let o=this.samplerCache.get(r);void 0===o&&(o=this.device.createSampler({addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:e.anisotropy}),this.samplerCache.set(r,o)),this.properties.get(e).samplerGPU=o}initRenderTarget(e){const t=this.properties,r=t.get(e);if(void 0===r.initialized){const o=this.device,a=e.width,i=e.height,m=this._getFormat(e.texture),T=e.texture.name?"_"+e.texture.name:"",u=o.createTexture({label:"renderTarget"+T,size:{width:a,height:i,depthOrArrayLayers:1},format:m,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING});this.info.memory.textures++,r.colorTextureGPU=u,r.colorTextureFormat=m;const s=t.get(e.texture);if(s.textureGPU=u,s.initializedRTT=!1,!0===e.depthBuffer){const m=null!==e.depthTexture?this._getFormat(e.depthTexture):GPUTextureFormat.Depth24PlusStencil8,u=o.createTexture({label:"renderTarget"+T+"_depthBuffer",size:{width:a,height:i,depthOrArrayLayers:1},format:m,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING});if(this.info.memory.textures++,r.depthTextureGPU=u,r.depthTextureFormat=m,null!==e.depthTexture){const r=t.get(e.depthTexture);r.textureGPU=u,r.initializedRTT=!1}}const n=onRenderTargetDispose.bind(this);r.disposeCallback=n,e.addEventListener("dispose",n),r.initialized=!0}}dispose(){this.samplerCache.clear()}_convertAddressMode(e){let t=GPUAddressMode.ClampToEdge;return e===RepeatWrapping?t=GPUAddressMode.Repeat:e===MirroredRepeatWrapping&&(t=GPUAddressMode.MirrorRepeat),t}_convertFilterMode(e){let t=GPUFilterMode.Linear;return e!==NearestFilter&&e!==NearestMipmapNearestFilter&&e!==NearestMipmapLinearFilter||(t=GPUFilterMode.Nearest),t}_uploadVideoTexture(e){const t=this.device,r=this.properties.get(e),o=t.importExternalTexture({source:e.source.data});return r.textureGPU=o,!0}_uploadTexture(e){let t=!1;const r=this.device,o=e.image,a=this.properties.get(e),{width:i,height:m,depth:T}=this._getSize(e),u=this._needsMipmaps(e),s=this._getDimension(e),n=this._getMipLevelCount(e,i,m,u),x=this._getFormat(e);let G=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST;u&&(G|=GPUTextureUsage.RENDER_ATTACHMENT);const h={label:e.name,size:{width:i,height:m,depthOrArrayLayers:T},mipLevelCount:n,sampleCount:1,dimension:s,format:x,usage:G};let l=a.textureGPU;return void 0===l&&(l=r.createTexture(h),t=!0),e.isDataTexture||e.isDataArrayTexture||e.isData3DTexture?this._copyBufferToTexture(o,l,h,u):e.isCompressedTexture?this._copyCompressedBufferToTexture(e.mipmaps,l,h):e.isCubeTexture?6===o.length&&this._copyCubeMapToTexture(o,e,l,h,u):!0!==e.isDepthTexture&&null!==o&&this._copyImageToTexture(o,e,l,h,u),a.textureGPU=l,a.version=e.version,t}_copyBufferToTexture(e,t,r,o,a=0){const i=e.data,m=this._getBytesPerTexel(r.format),T=e.width*m;this.device.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:a}},i,{offset:0,bytesPerRow:T},{width:e.width,height:e.height,depthOrArrayLayers:void 0!==e.depth?e.depth:1}),!0===o&&this._generateMipmaps(t,r,a)}_copyCubeMapToTexture(e,t,r,o,a){for(let i=0;i<6;i++){const m=e[i];m.isDataTexture?this._copyBufferToTexture(m.image,r,o,a,i):this._copyImageToTexture(m,t,r,o,a,i)}}_copyExternalImageToTexture(e,t,r,o,a=0){this.device.queue.copyExternalImageToTexture({source:e},{texture:t,mipLevel:0,origin:{x:0,y:0,z:a}},{width:e.width,height:e.height,depthOrArrayLayers:1}),o&&this._generateMipmaps(t,r,a)}_copyCompressedBufferToTexture(e,t,r){const o=this._getBlockData(r.format);for(let r=0;r<e.length;r++){const a=e[r],i=a.width,m=a.height,T=Math.ceil(i/o.width)*o.byteLength;this.device.queue.writeTexture({texture:t,mipLevel:r},a.data,{offset:0,bytesPerRow:T},{width:Math.ceil(i/o.width)*o.width,height:Math.ceil(m/o.width)*o.width,depthOrArrayLayers:1})}}_generateMipmaps(e,t,r){null===this.utils&&(this.utils=new WebGPUTextureUtils(this.device)),this.utils.generateMipmaps(e,t,r)}_getBlockData(e){return e===GPUTextureFormat.BC1RGBAUnorm||e===GPUTextureFormat.BC1RGBAUnormSRGB?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.BC2RGBAUnorm||e===GPUTextureFormat.BC2RGBAUnormSRGB||e===GPUTextureFormat.BC3RGBAUnorm||e===GPUTextureFormat.BC3RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.BC4RUnorm||e===GPUTextureFormat.BC4RSNorm?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.BC5RGUnorm||e===GPUTextureFormat.BC5RGSnorm||e===GPUTextureFormat.BC6HRGBUFloat||e===GPUTextureFormat.BC6HRGBFloat||e===GPUTextureFormat.BC7RGBAUnorm||e===GPUTextureFormat.BC7RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.ETC2RGB8Unorm||e===GPUTextureFormat.ETC2RGB8UnormSRGB||e===GPUTextureFormat.ETC2RGB8A1Unorm||e===GPUTextureFormat.ETC2RGB8A1UnormSRGB?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.ETC2RGBA8Unorm||e===GPUTextureFormat.ETC2RGBA8UnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.EACR11Unorm||e===GPUTextureFormat.EACR11Snorm?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.EACRG11Unorm||e===GPUTextureFormat.EACRG11Snorm||e===GPUTextureFormat.ASTC4x4Unorm||e===GPUTextureFormat.ASTC4x4UnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.ASTC5x4Unorm||e===GPUTextureFormat.ASTC5x4UnormSRGB?{byteLength:16,width:5,height:4}:e===GPUTextureFormat.ASTC5x5Unorm||e===GPUTextureFormat.ASTC5x5UnormSRGB?{byteLength:16,width:5,height:5}:e===GPUTextureFormat.ASTC6x5Unorm||e===GPUTextureFormat.ASTC6x5UnormSRGB?{byteLength:16,width:6,height:5}:e===GPUTextureFormat.ASTC6x6Unorm||e===GPUTextureFormat.ASTC6x6UnormSRGB?{byteLength:16,width:6,height:6}:e===GPUTextureFormat.ASTC8x5Unorm||e===GPUTextureFormat.ASTC8x5UnormSRGB?{byteLength:16,width:8,height:5}:e===GPUTextureFormat.ASTC8x6Unorm||e===GPUTextureFormat.ASTC8x6UnormSRGB?{byteLength:16,width:8,height:6}:e===GPUTextureFormat.ASTC8x8Unorm||e===GPUTextureFormat.ASTC8x8UnormSRGB?{byteLength:16,width:8,height:8}:e===GPUTextureFormat.ASTC10x5Unorm||e===GPUTextureFormat.ASTC10x5UnormSRGB?{byteLength:16,width:10,height:5}:e===GPUTextureFormat.ASTC10x6Unorm||e===GPUTextureFormat.ASTC10x6UnormSRGB?{byteLength:16,width:10,height:6}:e===GPUTextureFormat.ASTC10x8Unorm||e===GPUTextureFormat.ASTC10x8UnormSRGB?{byteLength:16,width:10,height:8}:e===GPUTextureFormat.ASTC10x10Unorm||e===GPUTextureFormat.ASTC10x10UnormSRGB?{byteLength:16,width:10,height:10}:e===GPUTextureFormat.ASTC12x10Unorm||e===GPUTextureFormat.ASTC12x10UnormSRGB?{byteLength:16,width:12,height:10}:e===GPUTextureFormat.ASTC12x12Unorm||e===GPUTextureFormat.ASTC12x12UnormSRGB?{byteLength:16,width:12,height:12}:void 0}_getBytesPerTexel(e){return e===GPUTextureFormat.R8Unorm?1:e===GPUTextureFormat.R16Float||e===GPUTextureFormat.RG8Unorm?2:e===GPUTextureFormat.RG16Float||e===GPUTextureFormat.R32Float||e===GPUTextureFormat.RGBA8Unorm||e===GPUTextureFormat.RGBA8UnormSRGB?4:e===GPUTextureFormat.RG32Float||e===GPUTextureFormat.RGBA16Float?8:e===GPUTextureFormat.RGBA32Float?16:void 0}_getDimension(e){let t;return t=e.isData3DTexture?GPUTextureDimension.ThreeD:GPUTextureDimension.TwoD,t}_getFormat(e){const t=e.format,r=e.type,o=e.colorSpace;let a;if(!0===e.isCompressedTexture)switch(t){case RGBA_S3TC_DXT1_Format:a=o===SRGBColorSpace?GPUTextureFormat.BC1RGBAUnormSRGB:GPUTextureFormat.BC1RGBAUnorm;break;case RGBA_S3TC_DXT3_Format:a=o===SRGBColorSpace?GPUTextureFormat.BC2RGBAUnormSRGB:GPUTextureFormat.BC2RGBAUnorm;break;case RGBA_S3TC_DXT5_Format:a=o===SRGBColorSpace?GPUTextureFormat.BC3RGBAUnormSRGB:GPUTextureFormat.BC3RGBAUnorm;break;case RGB_ETC2_Format:a=o===SRGBColorSpace?GPUTextureFormat.ETC2RGB8UnormSRGB:GPUTextureFormat.ETC2RGB8Unorm;break;case RGBA_ETC2_EAC_Format:a=o===SRGBColorSpace?GPUTextureFormat.ETC2RGBA8UnormSRGB:GPUTextureFormat.ETC2RGBA8Unorm;break;case RGBA_ASTC_4x4_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC4x4UnormSRGB:GPUTextureFormat.ASTC4x4Unorm;break;case RGBA_ASTC_5x4_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC5x4UnormSRGB:GPUTextureFormat.ASTC5x4Unorm;break;case RGBA_ASTC_5x5_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC5x5UnormSRGB:GPUTextureFormat.ASTC5x5Unorm;break;case RGBA_ASTC_6x5_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC6x5UnormSRGB:GPUTextureFormat.ASTC6x5Unorm;break;case RGBA_ASTC_6x6_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC6x6UnormSRGB:GPUTextureFormat.ASTC6x6Unorm;break;case RGBA_ASTC_8x5_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC8x5UnormSRGB:GPUTextureFormat.ASTC8x5Unorm;break;case RGBA_ASTC_8x6_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC8x6UnormSRGB:GPUTextureFormat.ASTC8x6Unorm;break;case RGBA_ASTC_8x8_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC8x8UnormSRGB:GPUTextureFormat.ASTC8x8Unorm;break;case RGBA_ASTC_10x5_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC10x5UnormSRGB:GPUTextureFormat.ASTC10x5Unorm;break;case RGBA_ASTC_10x6_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC10x6UnormSRGB:GPUTextureFormat.ASTC10x6Unorm;break;case RGBA_ASTC_10x8_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC10x8UnormSRGB:GPUTextureFormat.ASTC10x8Unorm;break;case RGBA_ASTC_10x10_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC10x10UnormSRGB:GPUTextureFormat.ASTC10x10Unorm;break;case RGBA_ASTC_12x10_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC12x10UnormSRGB:GPUTextureFormat.ASTC12x10Unorm;break;case RGBA_ASTC_12x12_Format:a=o===SRGBColorSpace?GPUTextureFormat.ASTC12x12UnormSRGB:GPUTextureFormat.ASTC12x12Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",t)}else switch(t){case RGBAFormat:switch(r){case UnsignedByteType:a=o===SRGBColorSpace?GPUTextureFormat.RGBA8UnormSRGB:GPUTextureFormat.RGBA8Unorm;break;case HalfFloatType:a=GPUTextureFormat.RGBA16Float;break;case FloatType:a=GPUTextureFormat.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",r)}break;case RedFormat:switch(r){case UnsignedByteType:a=GPUTextureFormat.R8Unorm;break;case HalfFloatType:a=GPUTextureFormat.R16Float;break;case FloatType:a=GPUTextureFormat.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",r)}break;case RGFormat:switch(r){case UnsignedByteType:a=GPUTextureFormat.RG8Unorm;break;case HalfFloatType:a=GPUTextureFormat.RG16Float;break;case FloatType:a=GPUTextureFormat.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",r)}break;case DepthFormat:a=GPUTextureFormat.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture format.",t)}return a}_isHTMLImage(e){return"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement}_copyImageToTexture(e,t,r,o,a,i){this._isHTMLImage(e)?this._getImageBitmapFromHTML(e,t).then((e=>{this._copyExternalImageToTexture(e,r,o,a,i)})):this._copyExternalImageToTexture(e,r,o,a,i)}_getImageBitmapFromHTML(e,t){const r=e.width,o=e.height,a={};return a.imageOrientation=!0===t.flipY?"flipY":"none",a.premultiplyAlpha=!0===t.premultiplyAlpha?"premultiply":"default",createImageBitmap(e,0,0,r,o,a)}_getImageBitmap(e,t){const r=e.width,o=e.height;if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement){const a={};return a.imageOrientation=!0===t.flipY?"flipY":"none",a.premultiplyAlpha=!0===t.premultiplyAlpha?"premultiply":"default",createImageBitmap(e,0,0,r,o,a)}return Promise.resolve(e)}_getMipLevelCount(e,t,r,o){let a;return a=e.isCompressedTexture?e.mipmaps.length:o?Math.floor(Math.log2(Math.max(t,r)))+1:1,a}_getSize(e){const t=e.image;let r,o,a;if(e.isCubeTexture){const e=t.length>0?t[0].image||t[0]:null;r=e?e.width:1,o=e?e.height:1,a=6}else null!==t?(r=t.width,o=t.height,a=void 0!==t.depth?t.depth:1):r=o=a=1;return{width:r,height:o,depth:a}}_needsMipmaps(e){return!0!==e.isCompressedTexture&&!0===e.generateMipmaps&&e.minFilter!==NearestFilter&&e.minFilter!==LinearFilter}}function onRenderTargetDispose(e){const t=e.target,r=this.properties,o=r.get(t);t.removeEventListener("dispose",o.disposeCallback),o.colorTextureGPU.destroy(),r.remove(t.texture),this.info.memory.textures--,!0===t.depthBuffer&&(o.depthTextureGPU.destroy(),this.info.memory.textures--,null!==t.depthTexture&&r.remove(t.depthTexture)),r.remove(t)}function onTextureDispose(e){const t=e.target,r=this.properties.get(t);r.textureGPU.destroy(),t.removeEventListener("dispose",r.disposeCallback),this.properties.remove(t),this.info.memory.textures--}export default WebGPUTextures;