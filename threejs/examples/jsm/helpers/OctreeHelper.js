import{LineSegments,BufferGeometry,Float32BufferAttribute,LineBasicMaterial}from"three";class OctreeHelper extends LineSegments{constructor(e,s=16776960){super(new BufferGeometry,new LineBasicMaterial({color:s,toneMapped:!1})),this.octree=e,this.color=s,this.type="OctreeHelper",this.update()}update(){const e=[];!function s(t){for(let p=0;p<t.length;p++){const u=t[p].box.min,r=t[p].box.max;e.push(r.x,r.y,r.z),e.push(u.x,r.y,r.z),e.push(u.x,r.y,r.z),e.push(u.x,u.y,r.z),e.push(u.x,u.y,r.z),e.push(r.x,u.y,r.z),e.push(r.x,u.y,r.z),e.push(r.x,r.y,r.z),e.push(r.x,r.y,u.z),e.push(u.x,r.y,u.z),e.push(u.x,r.y,u.z),e.push(u.x,u.y,u.z),e.push(u.x,u.y,u.z),e.push(r.x,u.y,u.z),e.push(r.x,u.y,u.z),e.push(r.x,r.y,u.z),e.push(r.x,r.y,r.z),e.push(r.x,r.y,u.z),e.push(u.x,r.y,r.z),e.push(u.x,r.y,u.z),e.push(u.x,u.y,r.z),e.push(u.x,u.y,u.z),e.push(r.x,u.y,r.z),e.push(r.x,u.y,u.z),s(t[p].subTrees)}}(this.octree.subTrees),this.geometry.dispose(),this.geometry=new BufferGeometry,this.geometry.setAttribute("position",new Float32BufferAttribute(e,3))}dispose(){this.geometry.dispose(),this.material.dispose()}}export{OctreeHelper};