import{BufferGeometry,BufferAttribute,LineBasicMaterial,Line,MathUtils}from"three";class PositionalAudioHelper extends Line{constructor(e,t=1,i=16,s=2){const n=new BufferGeometry,o=new Float32Array(3*(3*(i+2*s)+3));n.setAttribute("position",new BufferAttribute(o,3));const r=new LineBasicMaterial({color:65280});super(n,[new LineBasicMaterial({color:16776960}),r]),this.audio=e,this.range=t,this.divisionsInnerAngle=i,this.divisionsOuterAngle=s,this.type="PositionalAudioHelper",this.update()}update(){const e=this.audio,t=this.range,i=this.divisionsInnerAngle,s=this.divisionsOuterAngle,n=MathUtils.degToRad(e.panner.coneInnerAngle),o=MathUtils.degToRad(e.panner.coneOuterAngle),r=n/2,a=o/2;let l,h,d=0,u=0;const p=this.geometry,c=p.attributes.position;function A(e,i,s,n){const o=(i-e)/s;for(c.setXYZ(d,0,0,0),u++,l=e;l<i;l+=o)h=d+u,c.setXYZ(h,Math.sin(l)*t,0,Math.cos(l)*t),c.setXYZ(h+1,Math.sin(Math.min(l+o,i))*t,0,Math.cos(Math.min(l+o,i))*t),c.setXYZ(h+2,0,0,0),u+=3;p.addGroup(d,u,n),d+=u,u=0}p.clearGroups(),A(-a,-r,s,0),A(-r,r,i,1),A(r,a,s,0),c.needsUpdate=!0,n===o&&(this.material[0].visible=!1)}dispose(){this.geometry.dispose(),this.material[0].dispose(),this.material[1].dispose()}}export{PositionalAudioHelper};