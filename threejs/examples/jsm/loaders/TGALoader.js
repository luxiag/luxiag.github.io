import{DataTextureLoader,LinearMipmapLinearFilter}from"three";class TGALoader extends DataTextureLoader{constructor(e){super(e)}parse(e){e.length<19&&console.error("THREE.TGALoader: Not enough data to contain header.");let r=0;const a=new Uint8Array(e),o={id_length:a[r++],colormap_type:a[r++],image_type:a[r++],colormap_index:a[r++]|a[r++]<<8,colormap_length:a[r++]|a[r++]<<8,colormap_size:a[r++],origin:[a[r++]|a[r++]<<8,a[r++]|a[r++]<<8],width:a[r++]|a[r++]<<8,height:a[r++]|a[r++]<<8,pixel_size:a[r++],flags:a[r++]};!function(e){switch(e.image_type){case 1:case 9:(e.colormap_length>256||24!==e.colormap_size||1!==e.colormap_type)&&console.error("THREE.TGALoader: Invalid type colormap data for indexed type.");break;case 2:case 3:case 10:case 11:e.colormap_type&&console.error("THREE.TGALoader: Invalid type colormap data for colormap type.");break;case 0:console.error("THREE.TGALoader: No data.");default:console.error('THREE.TGALoader: Invalid type "%s".',e.image_type)}(e.width<=0||e.height<=0)&&console.error("THREE.TGALoader: Invalid image size."),8!==e.pixel_size&&16!==e.pixel_size&&24!==e.pixel_size&&32!==e.pixel_size&&console.error('THREE.TGALoader: Invalid pixel size "%s".',e.pixel_size)}(o),o.id_length+r>e.length&&console.error("THREE.TGALoader: No data."),r+=o.id_length;let t=!1,i=!1,s=!1;switch(o.image_type){case 9:t=!0,i=!0;break;case 1:i=!0;break;case 10:t=!0;break;case 2:break;case 11:t=!0,s=!0;break;case 3:s=!0}const n=new Uint8Array(o.width*o.height*4),l=function(e,r,a,o,t){let i,s;const n=a.pixel_size>>3,l=a.width*a.height*n;if(r&&(s=t.subarray(o,o+=a.colormap_length*(a.colormap_size>>3))),e){let e,r,a;i=new Uint8Array(l);let s=0;const c=new Uint8Array(n);for(;s<l;)if(e=t[o++],r=1+(127&e),128&e){for(a=0;a<n;++a)c[a]=t[o++];for(a=0;a<r;++a)i.set(c,s+a*n);s+=n*r}else{for(r*=n,a=0;a<r;++a)i[s+a]=t[o++];s+=r}}else i=t.subarray(o,o+=r?a.width*a.height:l);return{pixel_data:i,palettes:s}}(t,i,o,r,a);return function(e,r,a,t,i){let n,l,c,d,p,h;switch((48&o.flags)>>4){default:case 2:n=0,c=1,p=r,l=0,d=1,h=a;break;case 0:n=0,c=1,p=r,l=a-1,d=-1,h=-1;break;case 3:n=r-1,c=-1,p=-1,l=0,d=1,h=a;break;case 1:n=r-1,c=-1,p=-1,l=a-1,d=-1,h=-1}if(s)switch(o.pixel_size){case 8:!function(e,r,a,t,i,s,n,l){let c,d,p,h=0;const f=o.width;for(p=r;p!==t;p+=a)for(d=i;d!==n;d+=s,h++)c=l[h],e[4*(d+f*p)+0]=c,e[4*(d+f*p)+1]=c,e[4*(d+f*p)+2]=c,e[4*(d+f*p)+3]=255}(e,l,d,h,n,c,p,t);break;case 16:!function(e,r,a,t,i,s,n,l){let c,d,p=0;const h=o.width;for(d=r;d!==t;d+=a)for(c=i;c!==n;c+=s,p+=2)e[4*(c+h*d)+0]=l[p+0],e[4*(c+h*d)+1]=l[p+0],e[4*(c+h*d)+2]=l[p+0],e[4*(c+h*d)+3]=l[p+1]}(e,l,d,h,n,c,p,t);break;default:console.error("THREE.TGALoader: Format not supported.")}else switch(o.pixel_size){case 8:!function(e,r,a,t,i,s,n,l,c){const d=c;let p,h,f,_=0;const g=o.width;for(f=r;f!==t;f+=a)for(h=i;h!==n;h+=s,_++)p=l[_],e[4*(h+g*f)+3]=255,e[4*(h+g*f)+2]=d[3*p+0],e[4*(h+g*f)+1]=d[3*p+1],e[4*(h+g*f)+0]=d[3*p+2]}(e,l,d,h,n,c,p,t,i);break;case 16:!function(e,r,a,t,i,s,n,l){let c,d,p,h=0;const f=o.width;for(p=r;p!==t;p+=a)for(d=i;d!==n;d+=s,h+=2)c=l[h+0]+(l[h+1]<<8),e[4*(d+f*p)+0]=(31744&c)>>7,e[4*(d+f*p)+1]=(992&c)>>2,e[4*(d+f*p)+2]=(31&c)<<3,e[4*(d+f*p)+3]=32768&c?0:255}(e,l,d,h,n,c,p,t);break;case 24:!function(e,r,a,t,i,s,n,l){let c,d,p=0;const h=o.width;for(d=r;d!==t;d+=a)for(c=i;c!==n;c+=s,p+=3)e[4*(c+h*d)+3]=255,e[4*(c+h*d)+2]=l[p+0],e[4*(c+h*d)+1]=l[p+1],e[4*(c+h*d)+0]=l[p+2]}(e,l,d,h,n,c,p,t);break;case 32:!function(e,r,a,t,i,s,n,l){let c,d,p=0;const h=o.width;for(d=r;d!==t;d+=a)for(c=i;c!==n;c+=s,p+=4)e[4*(c+h*d)+2]=l[p+0],e[4*(c+h*d)+1]=l[p+1],e[4*(c+h*d)+0]=l[p+2],e[4*(c+h*d)+3]=l[p+3]}(e,l,d,h,n,c,p,t);break;default:console.error("THREE.TGALoader: Format not supported.")}}(n,o.width,o.height,l.pixel_data,l.palettes),{data:n,width:o.width,height:o.height,flipY:!0,generateMipmaps:!0,minFilter:LinearMipmapLinearFilter}}}export{TGALoader};