import{BufferGeometry,Color,FileLoader,Float32BufferAttribute,Group,Loader,Mesh,MeshPhongMaterial}from"three";import*as fflate from"../libs/fflate.module.js";class AMFLoader extends Loader{constructor(e){super(e)}load(e,t,n,o){const a=this,r=new FileLoader(a.manager);r.setPath(a.path),r.setResponseType("arraybuffer"),r.setRequestHeader(a.requestHeader),r.setWithCredentials(a.withCredentials),r.load(e,(function(n){try{t(a.parse(n))}catch(t){o?o(t):console.error(t),a.manager.itemError(e)}}),n,o)}parse(e){function t(e){let t="AMF Material";const o=e.attributes.id.textContent;let a={r:1,g:1,b:1,a:1},r=null;for(let o=0;o<e.childNodes.length;o++){const r=e.childNodes[o];"metadata"===r.nodeName&&void 0!==r.attributes.type?"name"===r.attributes.type.value&&(t=r.textContent):"color"===r.nodeName&&(a=n(r))}return r=new MeshPhongMaterial({flatShading:!0,color:new Color(a.r,a.g,a.b),name:t}),1!==a.a&&(r.transparent=!0,r.opacity=a.a),{id:o,material:r}}function n(e){const t={r:1,g:1,b:1,a:1};for(let n=0;n<e.childNodes.length;n++){const o=e.childNodes[n];"r"===o.nodeName?t.r=o.textContent:"g"===o.nodeName?t.g=o.textContent:"b"===o.nodeName?t.b=o.textContent:"a"===o.nodeName&&(t.a=o.textContent)}return t}function o(e){const t={name:"",triangles:[],materialid:null};let n=e.firstElementChild;for(void 0!==e.attributes.materialid&&(t.materialId=e.attributes.materialid.nodeValue);n;){if("metadata"===n.nodeName)void 0!==n.attributes.type&&"name"===n.attributes.type.value&&(t.name=n.textContent);else if("triangle"===n.nodeName){const e=n.getElementsByTagName("v1")[0].textContent,o=n.getElementsByTagName("v2")[0].textContent,a=n.getElementsByTagName("v3")[0].textContent;t.triangles.push(e,o,a)}n=n.nextElementSibling}return t}function a(e){const t=[],n=[];let o=e.firstElementChild;for(;o;){if("vertex"===o.nodeName){let e=o.firstElementChild;for(;e;){if("coordinates"===e.nodeName){const n=e.getElementsByTagName("x")[0].textContent,o=e.getElementsByTagName("y")[0].textContent,a=e.getElementsByTagName("z")[0].textContent;t.push(n,o,a)}else if("normal"===e.nodeName){const t=e.getElementsByTagName("nx")[0].textContent,o=e.getElementsByTagName("ny")[0].textContent,a=e.getElementsByTagName("nz")[0].textContent;n.push(t,o,a)}e=e.nextElementSibling}}o=o.nextElementSibling}return{vertices:t,normals:n}}function r(e){const t=e.attributes.id.textContent,r={name:"amfobject",meshes:[]};let l=null,i=e.firstElementChild;for(;i;){if("metadata"===i.nodeName)void 0!==i.attributes.type&&"name"===i.attributes.type.value&&(r.name=i.textContent);else if("color"===i.nodeName)l=n(i);else if("mesh"===i.nodeName){let e=i.firstElementChild;const t={vertices:[],normals:[],volumes:[],color:l};for(;e;){if("vertices"===e.nodeName){const n=a(e);t.normals=t.normals.concat(n.normals),t.vertices=t.vertices.concat(n.vertices)}else"volume"===e.nodeName&&t.volumes.push(o(e));e=e.nextElementSibling}r.meshes.push(t)}i=i.nextElementSibling}return{id:t,obj:r}}const l=function(e){let t=new DataView(e);if("PK"===String.fromCharCode(t.getUint8(0),t.getUint8(1))){let n=null,o=null;console.log("THREE.AMFLoader: Loading Zip");try{n=fflate.unzipSync(new Uint8Array(e))}catch(e){if(e instanceof ReferenceError)return console.log("THREE.AMFLoader: fflate missing and file is compressed."),null}for(o in n)if(".amf"===o.toLowerCase().slice(-4))break;console.log("THREE.AMFLoader: Trying to load file asset: "+o),t=new DataView(n[o].buffer)}const n=(new TextDecoder).decode(t),o=(new DOMParser).parseFromString(n,"application/xml");return"amf"!==o.documentElement.nodeName.toLowerCase()?(console.log("THREE.AMFLoader: Error loading AMF - no AMF document found."),null):o}(e);let i="",s="";const m=function(e){let t=1,n="millimeter";void 0!==e.documentElement.attributes.unit&&(n=e.documentElement.attributes.unit.value.toLowerCase());const o={millimeter:1,inch:25.4,feet:304.8,meter:1e3,micron:.001};return void 0!==o[n]&&(t=o[n]),console.log("THREE.AMFLoader: Unit scale: "+t),t}(l),d={},c={},u=l.documentElement.childNodes;let f,g;for(f=0;f<u.length;f++){const e=u[f];if("metadata"===e.nodeName)void 0!==e.attributes.type&&("name"===e.attributes.type.value?i=e.textContent:"author"===e.attributes.type.value&&(s=e.textContent));else if("material"===e.nodeName){const n=t(e);d[n.id]=n.material}else if("object"===e.nodeName){const t=r(e);c[t.id]=t.obj}}const h=new Group,b=new MeshPhongMaterial({color:11184895,flatShading:!0});h.name=i,h.userData.author=s,h.userData.loader="AMF";for(const e in c){const t=c[e],n=t.meshes,o=new Group;for(o.name=t.name||"",f=0;f<n.length;f++){let e=b;const t=n[f],a=new Float32BufferAttribute(t.vertices,3);let r=null;if(t.normals.length&&(r=new Float32BufferAttribute(t.normals,3)),t.color){const n=t.color;e=b.clone(),e.color=new Color(n.r,n.g,n.b),1!==n.a&&(e.transparent=!0,e.opacity=n.a)}const l=t.volumes;for(g=0;g<l.length;g++){const t=l[g],n=new BufferGeometry;let i=e;n.setIndex(t.triangles),n.setAttribute("position",a.clone()),r&&n.setAttribute("normal",r.clone()),void 0!==d[t.materialId]&&(i=d[t.materialId]),n.scale(m,m,m),o.add(new Mesh(n,i.clone()))}}h.add(o)}return h}}export{AMFLoader};