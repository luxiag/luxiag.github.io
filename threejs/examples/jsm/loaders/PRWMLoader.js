import{BufferAttribute,BufferGeometry,FileLoader,Loader}from"three";let bigEndianPlatform=null;function isBigEndianPlatform(){if(null===bigEndianPlatform){const e=new ArrayBuffer(2),r=new Uint8Array(e),t=new Uint16Array(e);r[0]=170,r[1]=187,bigEndianPlatform=43707===t[0]}return bigEndianPlatform}const InvertedEncodingTypes=[null,Float32Array,null,Int8Array,Int16Array,null,Int32Array,Uint8Array,Uint16Array,null,Uint32Array],getMethods={Uint16Array:"getUint16",Uint32Array:"getUint32",Int16Array:"getInt16",Int32Array:"getInt32",Float32Array:"getFloat32",Float64Array:"getFloat64"};function copyFromBuffer(e,r,t,n,o){const i=r.BYTES_PER_ELEMENT;let a;if(o===isBigEndianPlatform()||1===i)a=new r(e,t,n);else{const s=new DataView(e,t,n*i),l=getMethods[r.name],d=!o;a=new r(n);for(let e=0;e<n;e++)a[e]=s[l](e*i,d)}return a}function decodePrwm(e){const r=new Uint8Array(e),t=r[0];let n=r[1];const o=!!(n>>7&1),i=n>>6&1,a=1==(n>>5&1),s=31&n;let l=0,d=0;if(a?(l=(r[2]<<16)+(r[3]<<8)+r[4],d=(r[5]<<16)+(r[6]<<8)+r[7]):(l=r[2]+(r[3]<<8)+(r[4]<<16),d=r[5]+(r[6]<<8)+(r[7]<<16)),0===t)throw new Error("PRWM decoder: Invalid format version: 0");if(1!==t)throw new Error("PRWM decoder: Unsupported format version: "+t);if(!o){if(0!==i)throw new Error("PRWM decoder: Indices type must be set to 0 for non-indexed geometries");if(0!==d)throw new Error("PRWM decoder: Number of indices must be set to 0 for non-indexed geometries")}let f=8;const c={};for(let t=0;t<s;t++){let t="";for(;f<r.length;){const e=r[f];if(f++,0===e)break;t+=String.fromCharCode(e)}n=r[f];const o=n>>7&1,i=1+(n>>4&3),s=InvertedEncodingTypes[15&n];f++,f=4*Math.ceil(f/4);const d=copyFromBuffer(e,s,f,i*l,a);f+=s.BYTES_PER_ELEMENT*i*l,c[t]={type:o,cardinality:i,values:d}}f=4*Math.ceil(f/4);let u=null;return o&&(u=copyFromBuffer(e,1===i?Uint32Array:Uint16Array,f,d,a)),{version:t,attributes:c,indices:u}}class PRWMLoader extends Loader{constructor(e){super(e)}load(e,r,t,n){const o=this,i=new FileLoader(o.manager);i.setPath(o.path),i.setResponseType("arraybuffer"),i.setRequestHeader(o.requestHeader),i.setWithCredentials(o.withCredentials),e=e.replace(/\*/g,isBigEndianPlatform()?"be":"le"),i.load(e,(function(t){try{r(o.parse(t))}catch(r){n?n(r):console.error(r),o.manager.itemError(e)}}),t,n)}parse(e){const r=decodePrwm(e),t=Object.keys(r.attributes),n=new BufferGeometry;for(let e=0;e<t.length;e++){const o=r.attributes[t[e]];n.setAttribute(t[e],new BufferAttribute(o.values,o.cardinality,o.normalized))}return null!==r.indices&&n.setIndex(new BufferAttribute(r.indices,1)),n}static isBigEndianPlatform(){return isBigEndianPlatform()}}export{PRWMLoader};