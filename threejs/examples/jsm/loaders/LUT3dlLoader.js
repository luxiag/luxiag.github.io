import{Loader,FileLoader,DataTexture,Data3DTexture,RGBAFormat,UnsignedByteType,ClampToEdgeWrapping,LinearFilter}from"three";export class LUT3dlLoader extends Loader{load(e,t,a,r){const i=new FileLoader(this.manager);i.setPath(this.path),i.setResponseType("text"),i.load(e,(a=>{try{t(this.parse(a))}catch(t){r?r(t):console.error(t),this.manager.itemError(e)}}),a,r)}parse(e){const t=(e=e.replace(/^#.*?(\n|\r)/gm,"").replace(/^\s*?(\n|\r)/gm,"").trim()).split(/[\n\r]+/g),a=t[0].trim().split(/\s+/g).map((e=>parseFloat(e))),r=a[1]-a[0],i=a.length;for(let e=1,t=a.length;e<t;e++)if(r!==a[e]-a[e-1])throw new Error("LUT3dlLoader: Inconsistent grid size not supported.");const n=new Array(i*i*i*4);let p=0,o=0;for(let e=1,a=t.length;e<a;e++){const a=t[e].trim().split(/\s/g),r=parseFloat(a[0]),s=parseFloat(a[1]),l=parseFloat(a[2]);o=Math.max(o,r,s,l);const g=p%i*i*i+Math.floor(p/i)%i*i+Math.floor(p/(i*i))%i;n[4*g+0]=r,n[4*g+1]=s,n[4*g+2]=l,n[4*g+3]=1,p+=1}const s=Math.ceil(Math.log2(o)),l=Math.pow(2,s);for(let e=0,t=n.length;e<t;e+=4){const t=n[e+0],a=n[e+1],r=n[e+2];n[e+0]=255*t/l,n[e+1]=255*a/l,n[e+2]=255*r/l}const g=new Uint8Array(n),m=new DataTexture;m.image.data=g,m.image.width=i,m.image.height=i*i,m.format=RGBAFormat,m.type=UnsignedByteType,m.magFilter=LinearFilter,m.minFilter=LinearFilter,m.wrapS=ClampToEdgeWrapping,m.wrapT=ClampToEdgeWrapping,m.generateMipmaps=!1,m.needsUpdate=!0;const d=new Data3DTexture;return d.image.data=g,d.image.width=i,d.image.height=i,d.image.depth=i,d.format=RGBAFormat,d.type=UnsignedByteType,d.magFilter=LinearFilter,d.minFilter=LinearFilter,d.wrapS=ClampToEdgeWrapping,d.wrapT=ClampToEdgeWrapping,d.wrapR=ClampToEdgeWrapping,d.generateMipmaps=!1,d.needsUpdate=!0,{size:i,texture:m,texture3D:d}}}