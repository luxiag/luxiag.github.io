import{AdditiveBlending,BufferGeometry,Color,DoubleSide,FileLoader,Float32BufferAttribute,Group,Loader,LoaderUtils,Matrix4,Mesh,MeshPhongMaterial,TextureLoader}from"three";class TDSLoader extends Loader{constructor(e){super(e),this.debug=!1,this.group=null,this.materials=[],this.meshes=[]}load(e,s,t,a){const i=this,r=""===this.path?LoaderUtils.extractUrlBase(e):this.path,d=new FileLoader(this.manager);d.setPath(this.path),d.setResponseType("arraybuffer"),d.setRequestHeader(this.requestHeader),d.setWithCredentials(this.withCredentials),d.load(e,(function(t){try{s(i.parse(t,r))}catch(s){a?a(s):console.error(s),i.manager.itemError(e)}}),t,a)}parse(e,s){this.group=new Group,this.materials=[],this.meshes=[],this.readFile(e,s);for(let e=0;e<this.meshes.length;e++)this.group.add(this.meshes[e]);return this.group}readFile(e,s){const t=new DataView(e),a=new Chunk(t,0,this.debugMessage);if(a.id===MLIBMAGIC||a.id===CMAGIC||a.id===M3DMAGIC){let e=a.readChunk();for(;e;){if(e.id===M3D_VERSION){const s=e.readDWord();this.debugMessage("3DS file version: "+s)}else e.id===MDATA?this.readMeshData(e,s):this.debugMessage("Unknown main chunk: "+e.hexId);e=a.readChunk()}}this.debugMessage("Parsed "+this.meshes.length+" meshes")}readMeshData(e,s){let t=e.readChunk();for(;t;){if(t.id===MESH_VERSION){const e=+t.readDWord();this.debugMessage("Mesh Version: "+e)}else if(t.id===MASTER_SCALE){const e=t.readFloat();this.debugMessage("Master scale: "+e),this.group.scale.set(e,e,e)}else t.id===NAMED_OBJECT?(this.debugMessage("Named Object"),this.readNamedObject(t)):t.id===MAT_ENTRY?(this.debugMessage("Material"),this.readMaterialEntry(t,s)):this.debugMessage("Unknown MDATA chunk: "+t.hexId);t=e.readChunk()}}readNamedObject(e){const s=e.readString();let t=e.readChunk();for(;t;){if(t.id===N_TRI_OBJECT){const e=this.readMesh(t);e.name=s,this.meshes.push(e)}else this.debugMessage("Unknown named object chunk: "+t.hexId);t=e.readChunk()}}readMaterialEntry(e,s){let t=e.readChunk();const a=new MeshPhongMaterial;for(;t;){if(t.id===MAT_NAME)a.name=t.readString(),this.debugMessage("   Name: "+a.name);else if(t.id===MAT_WIRE)this.debugMessage("   Wireframe"),a.wireframe=!0;else if(t.id===MAT_WIRE_SIZE){const e=t.readByte();a.wireframeLinewidth=e,this.debugMessage("   Wireframe Thickness: "+e)}else if(t.id===MAT_TWO_SIDE)a.side=DoubleSide,this.debugMessage("   DoubleSided");else if(t.id===MAT_ADDITIVE)this.debugMessage("   Additive Blending"),a.blending=AdditiveBlending;else if(t.id===MAT_DIFFUSE)this.debugMessage("   Diffuse Color"),a.color=this.readColor(t);else if(t.id===MAT_SPECULAR)this.debugMessage("   Specular Color"),a.specular=this.readColor(t);else if(t.id===MAT_AMBIENT)this.debugMessage("   Ambient color"),a.color=this.readColor(t);else if(t.id===MAT_SHININESS){const e=this.readPercentage(t);a.shininess=100*e,this.debugMessage("   Shininess : "+e)}else if(t.id===MAT_TRANSPARENCY){const e=this.readPercentage(t);a.opacity=1-e,this.debugMessage("  Transparency : "+e),a.transparent=a.opacity<1}else t.id===MAT_TEXMAP?(this.debugMessage("   ColorMap"),a.map=this.readMap(t,s)):t.id===MAT_BUMPMAP?(this.debugMessage("   BumpMap"),a.bumpMap=this.readMap(t,s)):t.id===MAT_OPACMAP?(this.debugMessage("   OpacityMap"),a.alphaMap=this.readMap(t,s)):t.id===MAT_SPECMAP?(this.debugMessage("   SpecularMap"),a.specularMap=this.readMap(t,s)):this.debugMessage("   Unknown material chunk: "+t.hexId);t=e.readChunk()}this.materials[a.name]=a}readMesh(e){let s=e.readChunk();const t=new BufferGeometry,a=new MeshPhongMaterial,i=new Mesh(t,a);for(i.name="mesh";s;){if(s.id===POINT_ARRAY){const e=s.readWord();this.debugMessage("   Vertex: "+e);const a=[];for(let t=0;t<e;t++)a.push(s.readFloat()),a.push(s.readFloat()),a.push(s.readFloat());t.setAttribute("position",new Float32BufferAttribute(a,3))}else if(s.id===FACE_ARRAY)this.readFaceArray(s,i);else if(s.id===TEX_VERTS){const e=s.readWord();this.debugMessage("   UV: "+e);const a=[];for(let t=0;t<e;t++)a.push(s.readFloat()),a.push(s.readFloat());t.setAttribute("uv",new Float32BufferAttribute(a,2))}else if(s.id===MESH_MATRIX){this.debugMessage("   Tranformation Matrix (TODO)");const e=[];for(let t=0;t<12;t++)e[t]=s.readFloat();const a=new Matrix4;a.elements[0]=e[0],a.elements[1]=e[6],a.elements[2]=e[3],a.elements[3]=e[9],a.elements[4]=e[2],a.elements[5]=e[8],a.elements[6]=e[5],a.elements[7]=e[11],a.elements[8]=e[1],a.elements[9]=e[7],a.elements[10]=e[4],a.elements[11]=e[10],a.elements[12]=0,a.elements[13]=0,a.elements[14]=0,a.elements[15]=1,a.transpose();const r=new Matrix4;r.copy(a).invert(),t.applyMatrix4(r),a.decompose(i.position,i.quaternion,i.scale)}else this.debugMessage("   Unknown mesh chunk: "+s.hexId);s=e.readChunk()}return t.computeVertexNormals(),i}readFaceArray(e,s){const t=e.readWord();this.debugMessage("   Faces: "+t);const a=[];for(let s=0;s<t;++s)a.push(e.readWord(),e.readWord(),e.readWord()),e.readWord();s.geometry.setIndex(a);let i=0,r=0;for(;!e.endOfChunk;){const t=e.readChunk();if(t.id===MSH_MAT_GROUP){this.debugMessage("      Material Group");const e=this.readMaterialGroup(t),a=3*e.index.length;s.geometry.addGroup(r,a,i),r+=a,i++;const d=this.materials[e.name];!1===Array.isArray(s.material)&&(s.material=[]),void 0!==d&&s.material.push(d)}else this.debugMessage("      Unknown face array chunk: "+t.hexId)}1===s.material.length&&(s.material=s.material[0])}readMap(e,s){let t=e.readChunk(),a={};const i=new TextureLoader(this.manager);for(i.setPath(this.resourcePath||s).setCrossOrigin(this.crossOrigin);t;){if(t.id===MAT_MAPNAME){const e=t.readString();a=i.load(e),this.debugMessage("      File: "+s+e)}else t.id===MAT_MAP_UOFFSET?(a.offset.x=t.readFloat(),this.debugMessage("      OffsetX: "+a.offset.x)):t.id===MAT_MAP_VOFFSET?(a.offset.y=t.readFloat(),this.debugMessage("      OffsetY: "+a.offset.y)):t.id===MAT_MAP_USCALE?(a.repeat.x=t.readFloat(),this.debugMessage("      RepeatX: "+a.repeat.x)):t.id===MAT_MAP_VSCALE?(a.repeat.y=t.readFloat(),this.debugMessage("      RepeatY: "+a.repeat.y)):this.debugMessage("      Unknown map chunk: "+t.hexId);t=e.readChunk()}return a}readMaterialGroup(e){const s=e.readString(),t=e.readWord();this.debugMessage("         Name: "+s),this.debugMessage("         Faces: "+t);const a=[];for(let s=0;s<t;++s)a.push(e.readWord());return{name:s,index:a}}readColor(e){const s=e.readChunk(),t=new Color;if(s.id===COLOR_24||s.id===LIN_COLOR_24){const e=s.readByte(),a=s.readByte(),i=s.readByte();t.setRGB(e/255,a/255,i/255),this.debugMessage("      Color: "+t.r+", "+t.g+", "+t.b)}else if(s.id===COLOR_F||s.id===LIN_COLOR_F){const e=s.readFloat(),a=s.readFloat(),i=s.readFloat();t.setRGB(e,a,i),this.debugMessage("      Color: "+t.r+", "+t.g+", "+t.b)}else this.debugMessage("      Unknown color chunk: "+s.hexId);return t}readPercentage(e){const s=e.readChunk();switch(s.id){case INT_PERCENTAGE:return s.readShort()/100;case FLOAT_PERCENTAGE:return s.readFloat();default:return this.debugMessage("      Unknown percentage chunk: "+s.hexId),0}}debugMessage(e){this.debug&&console.log(e)}}class Chunk{constructor(e,s,t){this.data=e,this.offset=s,this.position=s,this.debugMessage=t,this.debugMessage instanceof Function&&(this.debugMessage=function(){}),this.id=this.readWord(),this.size=this.readDWord(),this.end=this.offset+this.size,this.end>e.byteLength&&this.debugMessage("Bad chunk size for chunk at "+s)}readChunk(){if(this.endOfChunk)return null;try{const e=new Chunk(this.data,this.position,this.debugMessage);return this.position+=e.size,e}catch(e){return this.debugMessage("Unable to read chunk at "+this.position),null}}get hexId(){return this.id.toString(16)}get endOfChunk(){return this.position>=this.end}readByte(){const e=this.data.getUint8(this.position,!0);return this.position+=1,e}readFloat(){try{const e=this.data.getFloat32(this.position,!0);return this.position+=4,e}catch(e){return this.debugMessage(e+" "+this.position+" "+this.data.byteLength),0}}readInt(){const e=this.data.getInt32(this.position,!0);return this.position+=4,e}readShort(){const e=this.data.getInt16(this.position,!0);return this.position+=2,e}readDWord(){const e=this.data.getUint32(this.position,!0);return this.position+=4,e}readWord(){const e=this.data.getUint16(this.position,!0);return this.position+=2,e}readString(){let e="",s=this.readByte();for(;s;)e+=String.fromCharCode(s),s=this.readByte();return e}}const M3DMAGIC=19789,MLIBMAGIC=15786,CMAGIC=49725,M3D_VERSION=2,COLOR_F=16,COLOR_24=17,LIN_COLOR_24=18,LIN_COLOR_F=19,INT_PERCENTAGE=48,FLOAT_PERCENTAGE=49,MDATA=15677,MESH_VERSION=15678,MASTER_SCALE=256,MAT_ENTRY=45055,MAT_NAME=40960,MAT_AMBIENT=40976,MAT_DIFFUSE=40992,MAT_SPECULAR=41008,MAT_SHININESS=41024,MAT_TRANSPARENCY=41040,MAT_TWO_SIDE=41089,MAT_ADDITIVE=41091,MAT_WIRE=41093,MAT_WIRE_SIZE=41095,MAT_TEXMAP=41472,MAT_OPACMAP=41488,MAT_BUMPMAP=41520,MAT_SPECMAP=41476,MAT_MAPNAME=41728,MAT_MAP_USCALE=41812,MAT_MAP_VSCALE=41814,MAT_MAP_UOFFSET=41816,MAT_MAP_VOFFSET=41818,NAMED_OBJECT=16384,N_TRI_OBJECT=16640,POINT_ARRAY=16656,FACE_ARRAY=16672,MSH_MAT_GROUP=16688,TEX_VERTS=16704,MESH_MATRIX=16736;export{TDSLoader};