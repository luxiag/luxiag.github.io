import{Loader,FileLoader,Vector3,DataTexture,Data3DTexture,UnsignedByteType,ClampToEdgeWrapping,LinearFilter}from"three";export class LUTCubeLoader extends Loader{load(e,a,t,r){const i=new FileLoader(this.manager);i.setPath(this.path),i.setResponseType("text"),i.load(e,(t=>{try{a(this.parse(t))}catch(a){r?r(a):console.error(a),this.manager.itemError(e)}}),t,r)}parse(e){e=e.replace(/^#.*?(\n|\r)/gm,"").replace(/^\s*?(\n|\r)/gm,"").trim();let a=null,t=null;const r=new Vector3(0,0,0),i=new Vector3(1,1,1),n=e.split(/[\n\r]+/g);let p=null,s=0;for(let e=0,o=n.length;e<o;e++){const o=n[e].trim(),l=o.split(/\s/g);switch(l[0]){case"TITLE":a=o.substring(7,o.length-1);break;case"LUT_3D_SIZE":const e=l[1];t=parseFloat(e),p=new Uint8Array(t*t*t*4);break;case"DOMAIN_MIN":r.x=parseFloat(l[1]),r.y=parseFloat(l[2]),r.z=parseFloat(l[3]);break;case"DOMAIN_MAX":i.x=parseFloat(l[1]),i.y=parseFloat(l[2]),i.z=parseFloat(l[3]);break;default:const n=parseFloat(l[0]),g=parseFloat(l[1]),d=parseFloat(l[2]);if(n>1||n<0||g>1||g<0||d>1||d<0)throw new Error("LUTCubeLoader : Non normalized values not supported.");p[s+0]=255*n,p[s+1]=255*g,p[s+2]=255*d,p[s+3]=255,s+=4}}const o=new DataTexture;o.image.data=p,o.image.width=t,o.image.height=t*t,o.type=UnsignedByteType,o.magFilter=LinearFilter,o.minFilter=LinearFilter,o.wrapS=ClampToEdgeWrapping,o.wrapT=ClampToEdgeWrapping,o.generateMipmaps=!1,o.needsUpdate=!0;const l=new Data3DTexture;return l.image.data=p,l.image.width=t,l.image.height=t,l.image.depth=t,l.type=UnsignedByteType,l.magFilter=LinearFilter,l.minFilter=LinearFilter,l.wrapS=ClampToEdgeWrapping,l.wrapT=ClampToEdgeWrapping,l.wrapR=ClampToEdgeWrapping,l.generateMipmaps=!1,l.needsUpdate=!0,{title:a,size:t,domainMin:r,domainMax:i,texture:o,texture3D:l}}}