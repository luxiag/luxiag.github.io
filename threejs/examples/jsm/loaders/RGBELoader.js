import{DataTextureLoader,DataUtils,FloatType,HalfFloatType,LinearFilter,LinearSRGBColorSpace}from"three";class RGBELoader extends DataTextureLoader{constructor(e){super(e),this.type=HalfFloatType}parse(e){const t=function(e,t){switch(e){case 1:console.error("THREE.RGBELoader Read Error: "+(t||""));break;case 2:console.error("THREE.RGBELoader Write Error: "+(t||""));break;case 3:console.error("THREE.RGBELoader Bad File Format: "+(t||""));break;default:console.error("THREE.RGBELoader: Error: "+(t||""))}return-1},r=function(e,t,r){t=t||1024;let a=e.pos,n=-1,o=0,s="",i=String.fromCharCode.apply(null,new Uint16Array(e.subarray(a,a+128)));for(;0>(n=i.indexOf("\n"))&&o<t&&a<e.byteLength;)s+=i,o+=i.length,a+=128,i+=String.fromCharCode.apply(null,new Uint16Array(e.subarray(a,a+128)));return-1<n&&(!1!==r&&(e.pos+=o+n+1),s+i.slice(0,n))},a=function(e,t,r,a){const n=e[t+3],o=Math.pow(2,n-128)/255;r[a+0]=e[t+0]*o,r[a+1]=e[t+1]*o,r[a+2]=e[t+2]*o,r[a+3]=1},n=function(e,t,r,a){const n=e[t+3],o=Math.pow(2,n-128)/255;r[a+0]=DataUtils.toHalfFloat(Math.min(e[t+0]*o,65504)),r[a+1]=DataUtils.toHalfFloat(Math.min(e[t+1]*o,65504)),r[a+2]=DataUtils.toHalfFloat(Math.min(e[t+2]*o,65504)),r[a+3]=DataUtils.toHalfFloat(1)},o=new Uint8Array(e);o.pos=0;const s=function(e){const a=/^\s*GAMMA\s*=\s*(\d+(\.\d+)?)\s*$/,n=/^\s*EXPOSURE\s*=\s*(\d+(\.\d+)?)\s*$/,o=/^\s*FORMAT=(\S+)\s*$/,s=/^\s*\-Y\s+(\d+)\s+\+X\s+(\d+)\s*$/,i={valid:0,string:"",comments:"",programtype:"RGBE",format:"",gamma:1,exposure:1,width:0,height:0};let l,c;if(e.pos>=e.byteLength||!(l=r(e)))return t(1,"no header found");if(!(c=l.match(/^#\?(\S+)/)))return t(3,"bad initial token");for(i.valid|=1,i.programtype=c[1],i.string+=l+"\n";l=r(e),!1!==l;)if(i.string+=l+"\n","#"!==l.charAt(0)){if((c=l.match(a))&&(i.gamma=parseFloat(c[1])),(c=l.match(n))&&(i.exposure=parseFloat(c[1])),(c=l.match(o))&&(i.valid|=2,i.format=c[1]),(c=l.match(s))&&(i.valid|=4,i.height=parseInt(c[1],10),i.width=parseInt(c[2],10)),2&i.valid&&4&i.valid)break}else i.comments+=l+"\n";return 2&i.valid?4&i.valid?i:t(3,"missing image size specifier"):t(3,"missing format specifier")}(o);if(-1!==s){const e=s.width,r=s.height,i=function(e,r,a){const n=r;if(n<8||n>32767||2!==e[0]||2!==e[1]||128&e[2])return new Uint8Array(e);if(n!==(e[2]<<8|e[3]))return t(3,"wrong scanline width");const o=new Uint8Array(4*r*a);if(!o.length)return t(4,"unable to allocate buffer space");let s=0,i=0;const l=4*n,c=new Uint8Array(4),p=new Uint8Array(l);let f=a;for(;f>0&&i<e.byteLength;){if(i+4>e.byteLength)return t(1);if(c[0]=e[i++],c[1]=e[i++],c[2]=e[i++],c[3]=e[i++],2!=c[0]||2!=c[1]||(c[2]<<8|c[3])!=n)return t(3,"bad rgbe scanline format");let r,a=0;for(;a<l&&i<e.byteLength;){r=e[i++];const n=r>128;if(n&&(r-=128),0===r||a+r>l)return t(3,"bad scanline data");if(n){const t=e[i++];for(let e=0;e<r;e++)p[a++]=t}else p.set(e.subarray(i,i+r),a),a+=r,i+=r}const d=n;for(let e=0;e<d;e++){let t=0;o[s]=p[e+t],t+=n,o[s+1]=p[e+t],t+=n,o[s+2]=p[e+t],t+=n,o[s+3]=p[e+t],s+=4}f--}return o}(o.subarray(o.pos),e,r);if(-1!==i){let t,o,l;switch(this.type){case FloatType:l=i.length/4;const e=new Float32Array(4*l);for(let t=0;t<l;t++)a(i,4*t,e,4*t);t=e,o=FloatType;break;case HalfFloatType:l=i.length/4;const r=new Uint16Array(4*l);for(let e=0;e<l;e++)n(i,4*e,r,4*e);t=r,o=HalfFloatType;break;default:console.error("THREE.RGBELoader: unsupported type: ",this.type)}return{width:e,height:r,data:t,header:s.string,gamma:s.gamma,exposure:s.exposure,type:o}}}return null}setDataType(e){return this.type=e,this}load(e,t,r,a){return super.load(e,(function(e,r){switch(e.type){case FloatType:case HalfFloatType:e.colorSpace=LinearSRGBColorSpace,e.minFilter=LinearFilter,e.magFilter=LinearFilter,e.generateMipmaps=!1,e.flipY=!0}t&&t(e,r)}),r,a)}}export{RGBELoader};