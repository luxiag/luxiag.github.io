import{FileLoader,Loader,TextureLoader,RepeatWrapping}from"three";import{MeshPhysicalNodeMaterial,float,bool,int,vec2,vec3,vec4,color,texture,positionLocal,add,sub,mul,div,mod,abs,sign,floor,ceil,round,pow,sin,cos,tan,asin,acos,atan2,sqrt,exp,clamp,min,max,normalize,length,dot,cross,normalMap,remap,smoothstep,luminance,mx_rgbtohsv,mx_hsvtorgb,mix,mx_ramplr,mx_ramptb,mx_splitlr,mx_splittb,mx_fractal_noise_float,mx_noise_float,mx_cell_noise_float,mx_worley_noise_float,mx_transform_uv,mx_safepower,mx_contrast,mx_srgb_texture_to_lin_rec709,saturation}from"three/nodes";const colorSpaceLib={mx_srgb_texture_to_lin_rec709};class MtlXElement{constructor(e,t,n=null){this.name=e,this.nodeFunc=t,this.params=n}}const MtlXElements=[new MtlXElement("add",add,["in1","in2"]),new MtlXElement("subtract",sub,["in1","in2"]),new MtlXElement("multiply",mul,["in1","in2"]),new MtlXElement("divide",div,["in1","in2"]),new MtlXElement("modulo",mod,["in1","in2"]),new MtlXElement("absval",abs,["in1","in2"]),new MtlXElement("sign",sign,["in1","in2"]),new MtlXElement("floor",floor,["in1","in2"]),new MtlXElement("ceil",ceil,["in1","in2"]),new MtlXElement("round",round,["in1","in2"]),new MtlXElement("power",pow,["in1","in2"]),new MtlXElement("sin",sin,["in"]),new MtlXElement("cos",cos,["in"]),new MtlXElement("tan",tan,["in"]),new MtlXElement("asin",asin,["in"]),new MtlXElement("acos",acos,["in"]),new MtlXElement("atan2",atan2,["in1","in2"]),new MtlXElement("sqrt",sqrt,["in"]),new MtlXElement("exp",exp,["in"]),new MtlXElement("clamp",clamp,["in","low","high"]),new MtlXElement("min",min,["in1","in2"]),new MtlXElement("max",max,["in1","in2"]),new MtlXElement("normalize",normalize,["in"]),new MtlXElement("magnitude",length,["in1","in2"]),new MtlXElement("dotproduct",dot,["in1","in2"]),new MtlXElement("crossproduct",cross,["in"]),new MtlXElement("normalmap",normalMap,["in","scale"]),new MtlXElement("remap",remap,["in","inlow","inhigh","outlow","outhigh"]),new MtlXElement("smoothstep",smoothstep,["in","low","high"]),new MtlXElement("luminance",luminance,["in","lumacoeffs"]),new MtlXElement("rgbtohsv",mx_rgbtohsv,["in"]),new MtlXElement("hsvtorgb",mx_hsvtorgb,["in"]),new MtlXElement("mix",mix,["bg","fg","mix"]),new MtlXElement("combine2",vec2,["in1","in2"]),new MtlXElement("combine3",vec3,["in1","in2","in3"]),new MtlXElement("combine4",vec4,["in1","in2","in3","in4"]),new MtlXElement("ramplr",mx_ramplr,["valuel","valuer","texcoord"]),new MtlXElement("ramptb",mx_ramptb,["valuet","valueb","texcoord"]),new MtlXElement("splitlr",mx_splitlr,["valuel","valuer","texcoord"]),new MtlXElement("splittb",mx_splittb,["valuet","valueb","texcoord"]),new MtlXElement("noise2d",mx_noise_float,["texcoord","amplitude","pivot"]),new MtlXElement("noise3d",mx_noise_float,["texcoord","amplitude","pivot"]),new MtlXElement("fractal3d",mx_fractal_noise_float,["position","octaves","lacunarity","diminish","amplitude"]),new MtlXElement("cellnoise2d",mx_cell_noise_float,["texcoord"]),new MtlXElement("cellnoise3d",mx_cell_noise_float,["texcoord"]),new MtlXElement("worleynoise2d",mx_worley_noise_float,["texcoord","jitter"]),new MtlXElement("worleynoise3d",mx_worley_noise_float,["texcoord","jitter"]),new MtlXElement("safepower",mx_safepower,["in1","in2"]),new MtlXElement("contrast",mx_contrast,["in","amount","pivot"]),new MtlXElement("saturate",saturation,["in","amount"])],MtlXLibrary={};MtlXElements.forEach((e=>MtlXLibrary[e.name]=e));class MaterialXLoader extends Loader{constructor(e){super(e)}load(e,t,n,o){return new FileLoader(this.manager).setPath(this.path).load(e,(async e=>{try{t(this.parse(e))}catch(e){o(e)}}),n,o),this}parse(e){return new MaterialX(this.manager,this.path).parse(e)}}class MaterialXNode{constructor(e,t,n=""){this.materialX=e,this.nodeXML=t,this.nodePath=n?n+"/"+this.name:this.name,this.parent=null,this.node=null,this.children=[]}get element(){return this.nodeXML.nodeName}get nodeGraph(){return this.getAttribute("nodegraph")}get nodeName(){return this.getAttribute("nodename")}get interfaceName(){return this.getAttribute("interfacename")}get output(){return this.getAttribute("output")}get name(){return this.getAttribute("name")}get type(){return this.getAttribute("type")}get value(){return this.getAttribute("value")}getNodeGraph(){let e=this;for(;null!==e&&"nodegraph"!==e.element;)e=e.parent;return e}getRoot(){let e=this;for(;null!==e.parent;)e=e.parent;return e}get referencePath(){let e=null;return null!==this.nodeGraph&&null!==this.output?e=this.nodeGraph+"/"+this.output:null===this.nodeName&&null===this.interfaceName||(e=this.getNodeGraph().nodePath+"/"+(this.nodeName||this.interfaceName)),e}get hasReference(){return null!==this.referencePath}get isConst(){return"input"===this.element&&null!==this.value&&"filename"!==this.type}getColorSpaceNode(){const e=this.getAttribute("colorspace"),t=this.getRoot().getAttribute("colorspace");return colorSpaceLib[`mx_${e}_to_${t}`]}getTexture(){const e=this.getRecursiveAttribute("fileprefix")||"",t=this.materialX.textureLoader.load(e+this.value);return t.wrapS=t.wrapT=RepeatWrapping,t.flipY=!1,t}getClassFromType(e){let t=null;return"integer"===e?t=int:"float"===e?t=float:"vector2"===e?t=vec2:"vector3"===e?t=vec3:"vector4"===e||"color4"===e?t=vec4:"color3"===e?t=color:"boolean"===e&&(t=bool),t}getNode(){let e=this.node;if(null!==e)return e;const t=this.type;if(this.isConst)e=this.getClassFromType(t)(...this.getVector());else if(this.hasReference)e=this.materialX.getMaterialXNode(this.referencePath).getNode();else{const n=this.element;if("convert"===n)e=this.getClassFromType(t)(this.getNodeByName("in"));else if("constant"===n)e=this.getNodeByName("value");else if("position"===n)e=positionLocal;else if("tiledimage"===n){const t=this.getChildByName("file"),n=t.getTexture(),o=mx_transform_uv(...this.getNodesByNames(["uvtiling","uvoffset"]));e=texture(n,o);const l=t.getColorSpaceNode();l&&(e=l(e))}else if("image"===n){const t=this.getChildByName("file"),n=this.getNodeByName("texcoord"),o=t.getTexture();e=texture(o,n);const l=t.getColorSpaceNode();l&&(e=l(e))}else if(void 0!==MtlXLibrary[n]){const t=MtlXLibrary[n];e=t.nodeFunc(...this.getNodesByNames(...t.params))}}null===e&&(console.warn(`THREE.MaterialXLoader: Unexpected node ${(new XMLSerializer).serializeToString(this.nodeXML)}.`),e=float(0));const n=this.getClassFromType(t);return null!==n&&(e=n(e)),e.name=this.name,this.node=e,e}getChildByName(e){for(const t of this.children)if(t.name===e)return t}getNodes(){const e={};for(const t of this.children){const n=t.getNode();e[n.name]=n}return e}getNodeByName(e){const t=this.getChildByName(e);return t?t.getNode():void 0}getNodesByNames(...e){const t=[];for(const n of e){const e=this.getNodeByName(n);e&&t.push(e)}return t}getValue(){return this.value.trim()}getVector(){const e=[];for(const t of this.getValue().split(/[,|\s]/))""!==t&&e.push(Number(t.trim()));return e}getAttribute(e){return this.nodeXML.getAttribute(e)}getRecursiveAttribute(e){let t=this.nodeXML.getAttribute(e);return null===t&&null!==this.parent&&(t=this.parent.getRecursiveAttribute(e)),t}setStandardSurfaceToGltfPBR(e){const t=this.getNodes();let n=null;t.base&&t.base_color?n=mul(t.base,t.base_color):t.base?n=t.base:t.base_color&&(n=t.base_color);let o=null;t.specular_roughness&&(o=t.specular_roughness);let l=null;t.metalness&&(l=t.metalness);let r=null,i=null;t.coat&&(r=t.coat),t.coat_roughness&&(i=t.coat_roughness),t.coat_color&&(n=n?mul(n,t.coat_color):n),e.colorNode=n||color(.8,.8,.8),e.roughnessNode=o||float(.2),e.metalnessNode=l||float(0),e.clearcoatNode=r||float(0),e.clearcoatRoughnessNode=i||float(0)}setMaterial(e){const t=this.element;"gltf_pbr"===t||"standard_surface"===t&&this.setStandardSurfaceToGltfPBR(e)}toMaterial(){const e=new MeshPhysicalNodeMaterial;e.name=this.name;for(const t of this.children)this.materialX.getMaterialXNode(t.nodeName).setMaterial(e);return e}toMaterials(){const e={};for(const t of this.children)if("surfacematerial"===t.element){const n=t.toMaterial();e[n.name]=n}return e}add(e){e.parent=this,this.children.push(e)}}class MaterialX{constructor(e,t){this.manager=e,this.path=t,this.resourcePath="",this.nodesXLib=new Map,this.textureLoader=new TextureLoader(e)}addMaterialXNode(e){this.nodesXLib.set(e.nodePath,e)}getMaterialXNode(...e){return this.nodesXLib.get(e.join("/"))}parseNode(e,t=""){const n=new MaterialXNode(this,e,t);n.nodePath&&this.addMaterialXNode(n);for(const t of e.children){const e=this.parseNode(t,n.nodePath);n.add(e)}return n}parse(e){const t=(new DOMParser).parseFromString(e,"application/xml").documentElement;return this.textureLoader.setPath(this.path),{materials:this.parseNode(t).toMaterials()}}}export{MaterialXLoader};