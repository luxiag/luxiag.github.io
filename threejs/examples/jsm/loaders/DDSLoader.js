import{CompressedTextureLoader,RGBAFormat,RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format,RGB_ETC1_Format,RGB_S3TC_DXT1_Format}from"three";class DDSLoader extends CompressedTextureLoader{constructor(r){super(r)}parse(r,t){const e={mipmaps:[],width:0,height:0,format:null,mipmapCount:1};function a(r){return r.charCodeAt(0)+(r.charCodeAt(1)<<8)+(r.charCodeAt(2)<<16)+(r.charCodeAt(3)<<24)}function o(r,t,e,a){const o=e*a*4,n=new Uint8Array(r,t,o),m=new Uint8Array(o);let s=0,c=0;for(let r=0;r<a;r++)for(let r=0;r<e;r++){const r=n[c];c++;const t=n[c];c++;const e=n[c];c++;const a=n[c];c++,m[s]=e,s++,m[s]=t,s++,m[s]=r,s++,m[s]=a,s++}return m}const n=a("DXT1"),m=a("DXT3"),s=a("DXT5"),c=a("ETC1"),i=new Int32Array(r,0,31);if(542327876!==i[0])return console.error("THREE.DDSLoader.parse: Invalid magic number in DDS header."),e;let p;const h=i[21];let u=!1;switch(h){case n:p=8,e.format=RGB_S3TC_DXT1_Format;break;case m:p=16,e.format=RGBA_S3TC_DXT3_Format;break;case s:p=16,e.format=RGBA_S3TC_DXT5_Format;break;case c:p=8,e.format=RGB_ETC1_Format;break;default:if(!(32===i[22]&&16711680&i[23]&&65280&i[24]&&255&i[25]&&4278190080&i[26]))return console.error("THREE.DDSLoader.parse: Unsupported FourCC code ",(C=h,String.fromCharCode(255&C,C>>8&255,C>>16&255,C>>24&255))),e;u=!0,p=64,e.format=RGBAFormat}var C;e.mipmapCount=1,131072&i[2]&&!1!==t&&(e.mipmapCount=Math.max(1,i[7]));const d=i[28];if(e.isCubemap=!!(512&d),e.isCubemap&&(!(1024&d)||!(2048&d)||!(4096&d)||!(8192&d)||!(16384&d)||!(32768&d)))return console.error("THREE.DDSLoader.parse: Incomplete cubemap faces"),e;e.width=i[4],e.height=i[3];let T=i[1]+4;const _=e.isCubemap?6:1;for(let t=0;t<_;t++){let t=e.width,a=e.height;for(let n=0;n<e.mipmapCount;n++){let n,m;u?(n=o(r,T,t,a),m=n.length):(m=Math.max(4,t)/4*Math.max(4,a)/4*p,n=new Uint8Array(r,T,m));const s={data:n,width:t,height:a};e.mipmaps.push(s),T+=m,t=Math.max(t>>1,1),a=Math.max(a>>1,1)}}return e}}export{DDSLoader};