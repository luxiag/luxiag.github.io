import{AnimationClip,BufferGeometry,FileLoader,Float32BufferAttribute,Loader,Vector3}from"three";const _normalData=[[-.525731,0,.850651],[-.442863,.238856,.864188],[-.295242,0,.955423],[-.309017,.5,.809017],[-.16246,.262866,.951056],[0,0,1],[0,.850651,.525731],[-.147621,.716567,.681718],[.147621,.716567,.681718],[0,.525731,.850651],[.309017,.5,.809017],[.525731,0,.850651],[.295242,0,.955423],[.442863,.238856,.864188],[.16246,.262866,.951056],[-.681718,.147621,.716567],[-.809017,.309017,.5],[-.587785,.425325,.688191],[-.850651,.525731,0],[-.864188,.442863,.238856],[-.716567,.681718,.147621],[-.688191,.587785,.425325],[-.5,.809017,.309017],[-.238856,.864188,.442863],[-.425325,.688191,.587785],[-.716567,.681718,-.147621],[-.5,.809017,-.309017],[-.525731,.850651,0],[0,.850651,-.525731],[-.238856,.864188,-.442863],[0,.955423,-.295242],[-.262866,.951056,-.16246],[0,1,0],[0,.955423,.295242],[-.262866,.951056,.16246],[.238856,.864188,.442863],[.262866,.951056,.16246],[.5,.809017,.309017],[.238856,.864188,-.442863],[.262866,.951056,-.16246],[.5,.809017,-.309017],[.850651,.525731,0],[.716567,.681718,.147621],[.716567,.681718,-.147621],[.525731,.850651,0],[.425325,.688191,.587785],[.864188,.442863,.238856],[.688191,.587785,.425325],[.809017,.309017,.5],[.681718,.147621,.716567],[.587785,.425325,.688191],[.955423,.295242,0],[1,0,0],[.951056,.16246,.262866],[.850651,-.525731,0],[.955423,-.295242,0],[.864188,-.442863,.238856],[.951056,-.16246,.262866],[.809017,-.309017,.5],[.681718,-.147621,.716567],[.850651,0,.525731],[.864188,.442863,-.238856],[.809017,.309017,-.5],[.951056,.16246,-.262866],[.525731,0,-.850651],[.681718,.147621,-.716567],[.681718,-.147621,-.716567],[.850651,0,-.525731],[.809017,-.309017,-.5],[.864188,-.442863,-.238856],[.951056,-.16246,-.262866],[.147621,.716567,-.681718],[.309017,.5,-.809017],[.425325,.688191,-.587785],[.442863,.238856,-.864188],[.587785,.425325,-.688191],[.688191,.587785,-.425325],[-.147621,.716567,-.681718],[-.309017,.5,-.809017],[0,.525731,-.850651],[-.525731,0,-.850651],[-.442863,.238856,-.864188],[-.295242,0,-.955423],[-.16246,.262866,-.951056],[0,0,-1],[.295242,0,-.955423],[.16246,.262866,-.951056],[-.442863,-.238856,-.864188],[-.309017,-.5,-.809017],[-.16246,-.262866,-.951056],[0,-.850651,-.525731],[-.147621,-.716567,-.681718],[.147621,-.716567,-.681718],[0,-.525731,-.850651],[.309017,-.5,-.809017],[.442863,-.238856,-.864188],[.16246,-.262866,-.951056],[.238856,-.864188,-.442863],[.5,-.809017,-.309017],[.425325,-.688191,-.587785],[.716567,-.681718,-.147621],[.688191,-.587785,-.425325],[.587785,-.425325,-.688191],[0,-.955423,-.295242],[0,-1,0],[.262866,-.951056,-.16246],[0,-.850651,.525731],[0,-.955423,.295242],[.238856,-.864188,.442863],[.262866,-.951056,.16246],[.5,-.809017,.309017],[.716567,-.681718,.147621],[.525731,-.850651,0],[-.238856,-.864188,-.442863],[-.5,-.809017,-.309017],[-.262866,-.951056,-.16246],[-.850651,-.525731,0],[-.716567,-.681718,-.147621],[-.716567,-.681718,.147621],[-.525731,-.850651,0],[-.5,-.809017,.309017],[-.238856,-.864188,.442863],[-.262866,-.951056,.16246],[-.864188,-.442863,.238856],[-.809017,-.309017,.5],[-.688191,-.587785,.425325],[-.681718,-.147621,.716567],[-.442863,-.238856,.864188],[-.587785,-.425325,.688191],[-.309017,-.5,.809017],[-.147621,-.716567,.681718],[-.425325,-.688191,.587785],[-.16246,-.262866,.951056],[.442863,-.238856,.864188],[.16246,-.262866,.951056],[.309017,-.5,.809017],[.147621,-.716567,.681718],[0,-.525731,.850651],[.425325,-.688191,.587785],[.587785,-.425325,.688191],[.688191,-.587785,.425325],[-.955423,.295242,0],[-.951056,.16246,.262866],[-1,0,0],[-.850651,0,.525731],[-.955423,-.295242,0],[-.951056,-.16246,.262866],[-.864188,.442863,-.238856],[-.951056,.16246,-.262866],[-.809017,.309017,-.5],[-.864188,-.442863,-.238856],[-.951056,-.16246,-.262866],[-.809017,-.309017,-.5],[-.681718,.147621,-.716567],[-.681718,-.147621,-.716567],[-.850651,0,-.525731],[-.688191,.587785,-.425325],[-.587785,.425325,-.688191],[-.425325,.688191,-.587785],[-.425325,-.688191,-.587785],[-.587785,-.425325,-.688191],[-.688191,-.587785,-.425325]];class MD2Loader extends Loader{constructor(t){super(t)}load(t,e,r,s){const n=this,o=new FileLoader(n.manager);o.setPath(n.path),o.setResponseType("arraybuffer"),o.setRequestHeader(n.requestHeader),o.setWithCredentials(n.withCredentials),o.load(t,(function(r){try{e(n.parse(r))}catch(e){s?s(e):console.error(e),n.manager.itemError(t)}}),r,s)}parse(t){const e=new DataView(t),r={},s=["ident","version","skinwidth","skinheight","framesize","num_skins","num_vertices","num_st","num_tris","num_glcmds","num_frames","offset_skins","offset_st","offset_tris","offset_frames","offset_glcmds","offset_end"];for(let t=0;t<s.length;t++)r[s[t]]=e.getInt32(4*t,!0);if(844121161!==r.ident||8!==r.version)return void console.error("Not a valid MD2 file");if(r.offset_end!==e.byteLength)return void console.error("Corrupted MD2 file");const n=new BufferGeometry,o=[];let i=r.offset_st;for(let t=0,s=r.num_st;t<s;t++){const t=e.getInt16(i+0,!0),s=e.getInt16(i+2,!0);o.push(t/r.skinwidth,1-s/r.skinheight),i+=4}i=r.offset_tris;const a=[],l=[];for(let t=0,s=r.num_tris;t<s;t++)a.push(e.getUint16(i+0,!0),e.getUint16(i+2,!0),e.getUint16(i+4,!0)),l.push(e.getUint16(i+6,!0),e.getUint16(i+8,!0),e.getUint16(i+10,!0)),i+=12;const f=new Vector3,u=new Vector3,c=[];i=r.offset_frames;for(let t=0,s=r.num_frames;t<s;t++){u.set(e.getFloat32(i+0,!0),e.getFloat32(i+4,!0),e.getFloat32(i+8,!0)),f.set(e.getFloat32(i+12,!0),e.getFloat32(i+16,!0),e.getFloat32(i+20,!0)),i+=24;const t=[];for(let r=0;r<16;r++){const s=e.getUint8(i+r);if(0===s)break;t[r]=s}const s={name:String.fromCharCode.apply(null,t),vertices:[],normals:[]};i+=16;for(let t=0;t<r.num_vertices;t++){let t=e.getUint8(i++),r=e.getUint8(i++),n=e.getUint8(i++);const o=_normalData[e.getUint8(i++)];t=t*u.x+f.x,r=r*u.y+f.y,n=n*u.z+f.z,s.vertices.push(t,n,r),s.normals.push(o[0],o[2],o[1])}c.push(s)}const m=[],h=[],g=[],p=c[0].vertices,d=c[0].normals;for(let t=0,e=a.length;t<e;t++){let e=3*a[t];const r=p[e],s=p[e+1],n=p[e+2];m.push(r,s,n);const i=d[e],f=d[e+1],u=d[e+2];h.push(i,f,u),e=2*l[t];const c=o[e],_=o[e+1];g.push(c,_)}n.setAttribute("position",new Float32BufferAttribute(m,3)),n.setAttribute("normal",new Float32BufferAttribute(h,3)),n.setAttribute("uv",new Float32BufferAttribute(g,2));const _=[],v=[];for(let t=0,e=c.length;t<e;t++){const e=c[t],r=e.name;if(e.vertices.length>0){const t=[];for(let r=0,s=a.length;r<s;r++){const s=3*a[r],n=e.vertices[s],o=e.vertices[s+1],i=e.vertices[s+2];t.push(n,o,i)}const s=new Float32BufferAttribute(t,3);s.name=r,_.push(s)}if(e.normals.length>0){const t=[];for(let r=0,s=a.length;r<s;r++){const s=3*a[r],n=e.normals[s],o=e.normals[s+1],i=e.normals[s+2];t.push(n,o,i)}const s=new Float32BufferAttribute(t,3);s.name=r,v.push(s)}}return n.morphAttributes.position=_,n.morphAttributes.normal=v,n.morphTargetsRelative=!1,n.animations=AnimationClip.CreateClipsFromMorphTargetSequences(c,10),n}}export{MD2Loader};