import{BackSide,Color,ShaderMaterial,UniformsLib,UniformsUtils}from"three";class OutlineEffect{constructor(e,t={}){this.enabled=!0;const i=void 0!==t.defaultThickness?t.defaultThickness:.003,n=(new Color).fromArray(void 0!==t.defaultColor?t.defaultColor:[0,0,0]),a=void 0!==t.defaultAlpha?t.defaultAlpha:1,l=void 0!==t.defaultKeepAlive&&t.defaultKeepAlive,r={},o={},s={},u={outlineThickness:{value:i},outlineColor:{value:n},outlineAlpha:{value:a}},c=["#include <common>","#include <uv_pars_vertex>","#include <displacementmap_pars_vertex>","#include <fog_pars_vertex>","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","#include <logdepthbuf_pars_vertex>","#include <clipping_planes_pars_vertex>","uniform float outlineThickness;","vec4 calculateOutline( vec4 pos, vec3 normal, vec4 skinned ) {","\tfloat thickness = outlineThickness;","\tconst float ratio = 1.0;","\tvec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + normal, 1.0 );","\tvec4 norm = normalize( pos - pos2 );","\treturn pos + norm * thickness * pos.w * ratio;","}","void main() {","\t#include <uv_vertex>","\t#include <beginnormal_vertex>","\t#include <morphnormal_vertex>","\t#include <skinbase_vertex>","\t#include <skinnormal_vertex>","\t#include <begin_vertex>","\t#include <morphtarget_vertex>","\t#include <skinning_vertex>","\t#include <displacementmap_vertex>","\t#include <project_vertex>","\tvec3 outlineNormal = - objectNormal;","\tgl_Position = calculateOutline( gl_Position, outlineNormal, vec4( transformed, 1.0 ) );","\t#include <logdepthbuf_vertex>","\t#include <clipping_planes_vertex>","\t#include <fog_vertex>","}"].join("\n"),d=["#include <common>","#include <fog_pars_fragment>","#include <logdepthbuf_pars_fragment>","#include <clipping_planes_pars_fragment>","uniform vec3 outlineColor;","uniform float outlineAlpha;","void main() {","\t#include <clipping_planes_fragment>","\t#include <logdepthbuf_fragment>","\tgl_FragColor = vec4( outlineColor, outlineAlpha );","\t#include <tonemapping_fragment>","\t#include <encodings_fragment>","\t#include <fog_fragment>","\t#include <premultiplied_alpha_fragment>","}"].join("\n");function p(e){const t=function(e){let t=r[e.uuid];return void 0===t&&(t={material:new ShaderMaterial({type:"OutlineEffect",uniforms:UniformsUtils.merge([UniformsLib.fog,UniformsLib.displacementmap,u]),vertexShader:c,fragmentShader:d,side:BackSide}),used:!0,keepAlive:l,count:0},r[e.uuid]=t),t.used=!0,t.material}(e);return o[t.uuid]=e,function(e,t){if("invisible"===e.name)return;const i=t.userData.outlineParameters;e.fog=t.fog,e.toneMapped=t.toneMapped,e.premultipliedAlpha=t.premultipliedAlpha,e.displacementMap=t.displacementMap,void 0!==i?(!1===t.visible?e.visible=!1:e.visible=void 0===i.visible||i.visible,e.transparent=void 0!==i.alpha&&i.alpha<1||t.transparent,void 0!==i.keepAlive&&(r[t.uuid].keepAlive=i.keepAlive)):(e.transparent=t.transparent,e.visible=t.visible),!0!==t.wireframe&&!1!==t.depthTest||(e.visible=!1),t.clippingPlanes&&(e.clipping=!0,e.clippingPlanes=t.clippingPlanes,e.clipIntersection=t.clipIntersection,e.clipShadows=t.clipShadows),e.version=t.version}(t,e),t}function m(e){const t=e.geometry,i=void 0!==t&&void 0!==t.attributes.normal;return!0===e.isMesh&&void 0!==e.material&&!0===i}function f(e){if(!1!==m(e)){if(Array.isArray(e.material))for(let t=0,i=e.material.length;t<i;t++)e.material[t]=p(e.material[t]);else e.material=p(e.material);s[e.uuid]=e.onBeforeRender,e.onBeforeRender=h}}function v(e){if(!1!==m(e)){if(Array.isArray(e.material))for(let t=0,i=e.material.length;t<i;t++)e.material[t]=o[e.material[t].uuid];else e.material=o[e.material.uuid];e.onBeforeRender=s[e.uuid]}}function h(e,t,i,n,a){const l=o[a.uuid];void 0!==l&&function(e,t){const i=t.userData.outlineParameters;e.uniforms.outlineAlpha.value=t.opacity,void 0!==i&&(void 0!==i.thickness&&(e.uniforms.outlineThickness.value=i.thickness),void 0!==i.color&&e.uniforms.outlineColor.value.fromArray(i.color),void 0!==i.alpha&&(e.uniforms.outlineAlpha.value=i.alpha)),t.displacementMap&&(e.uniforms.displacementMap.value=t.displacementMap,e.uniforms.displacementScale.value=t.displacementScale,e.uniforms.displacementBias.value=t.displacementBias)}(a,l)}this.render=function(t,i){if(!1===this.enabled)return void e.render(t,i);const n=e.autoClear;e.autoClear=this.autoClear,e.render(t,i),e.autoClear=n,this.renderOutline(t,i)},this.renderOutline=function(t,i){const n=e.autoClear,a=t.matrixWorldAutoUpdate,l=t.background,u=e.shadowMap.enabled;t.matrixWorldAutoUpdate=!1,t.background=null,e.autoClear=!1,e.shadowMap.enabled=!1,t.traverse(f),e.render(t,i),t.traverse(v),function(){let e;e=Object.keys(o);for(let t=0,i=e.length;t<i;t++)o[e[t]]=void 0;e=Object.keys(s);for(let t=0,i=e.length;t<i;t++)s[e[t]]=void 0;e=Object.keys(r);for(let t=0,i=e.length;t<i;t++){const i=e[t];!1===r[i].used?(r[i].count++,!1===r[i].keepAlive&&r[i].count>60&&delete r[i]):(r[i].used=!1,r[i].count=0)}}(),t.matrixWorldAutoUpdate=a,t.background=l,e.autoClear=n,e.shadowMap.enabled=u},this.autoClear=e.autoClear,this.domElement=e.domElement,this.shadowMap=e.shadowMap,this.clear=function(t,i,n){e.clear(t,i,n)},this.getPixelRatio=function(){return e.getPixelRatio()},this.setPixelRatio=function(t){e.setPixelRatio(t)},this.getSize=function(t){return e.getSize(t)},this.setSize=function(t,i,n){e.setSize(t,i,n)},this.setViewport=function(t,i,n,a){e.setViewport(t,i,n,a)},this.setScissor=function(t,i,n,a){e.setScissor(t,i,n,a)},this.setScissorTest=function(t){e.setScissorTest(t)},this.setRenderTarget=function(t){e.setRenderTarget(t)}}}export{OutlineEffect};