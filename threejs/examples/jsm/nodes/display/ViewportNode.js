import Node,{addNodeClass}from"../core/Node.js";import{NodeUpdateType}from"../core/constants.js";import{uniform}from"../core/UniformNode.js";import{nodeImmutable,vec2}from"../shadernode/ShaderNode.js";import{Vector2}from"three";let resolution;class ViewportNode extends Node{constructor(e){super(),this.scope=e,this.isViewportNode=!0}getNodeType(){return this.scope===ViewportNode.COORDINATE?"vec4":"vec2"}getUpdateType(){let e=NodeUpdateType.NONE;return this.scope===ViewportNode.RESOLUTION&&(e=NodeUpdateType.FRAME),this.updateType=e,e}update({renderer:e}){e.getSize(resolution)}construct(e){const o=this.scope;if(o===ViewportNode.COORDINATE)return;let t=null;if(o===ViewportNode.RESOLUTION)t=uniform(resolution||(resolution=new Vector2));else{const r=vec2(new ViewportNode(ViewportNode.COORDINATE)),i=new ViewportNode(ViewportNode.RESOLUTION);t=r.div(i);let p=t.x,d=t.y;(/top/i.test(o)&&e.isFlipY()||/bottom/i.test(o)&&!1===e.isFlipY())&&(d=d.oneMinus()),/right/i.test(o)&&(p=p.oneMinus()),t=vec2(p,d)}return t}generate(e){return this.scope===ViewportNode.COORDINATE?e.getFragCoord():super.generate(e)}}ViewportNode.COORDINATE="coordinate",ViewportNode.RESOLUTION="resolution",ViewportNode.TOP_LEFT="topLeft",ViewportNode.BOTTOM_LEFT="bottomLeft",ViewportNode.TOP_RIGHT="topRight",ViewportNode.BOTTOM_RIGHT="bottomRight";export default ViewportNode;export const viewportCoordinate=nodeImmutable(ViewportNode,ViewportNode.COORDINATE);export const viewportResolution=nodeImmutable(ViewportNode,ViewportNode.RESOLUTION);export const viewportTopLeft=nodeImmutable(ViewportNode,ViewportNode.TOP_LEFT);export const viewportBottomLeft=nodeImmutable(ViewportNode,ViewportNode.BOTTOM_LEFT);export const viewportTopRight=nodeImmutable(ViewportNode,ViewportNode.TOP_RIGHT);export const viewportBottomRight=nodeImmutable(ViewportNode,ViewportNode.BOTTOM_RIGHT);addNodeClass(ViewportNode);