import TempNode from"../core/TempNode.js";import{EPSILON}from"../math/MathNode.js";import{addNodeClass}from"../core/Node.js";import{addNodeElement,ShaderNode,nodeProxy,vec3}from"../shadernode/ShaderNode.js";export const BurnNode=new ShaderNode((({base:e,blend:d})=>{const o=o=>d[o].lessThan(EPSILON).cond(d[o],e[o].oneMinus().div(d[o]).oneMinus().max(0));return vec3(o("x"),o("y"),o("z"))}));export const DodgeNode=new ShaderNode((({base:e,blend:d})=>{const o=o=>d[o].equal(1).cond(d[o],e[o].div(d[o].oneMinus()).max(0));return vec3(o("x"),o("y"),o("z"))}));export const ScreenNode=new ShaderNode((({base:e,blend:d})=>{const o=o=>e[o].oneMinus().mul(d[o].oneMinus()).oneMinus();return vec3(o("x"),o("y"),o("z"))}));export const OverlayNode=new ShaderNode((({base:e,blend:d})=>{const o=o=>e[o].lessThan(.5).cond(e[o].mul(d[o],2),e[o].oneMinus().mul(d[o].oneMinus()).oneMinus());return vec3(o("x"),o("y"),o("z"))}));class BlendModeNode extends TempNode{constructor(e,d,o){super(),this.blendMode=e,this.baseNode=d,this.blendNode=o}construct(){const{blendMode:e,baseNode:d,blendNode:o}=this,n={base:d,blend:o};let r=null;return e===BlendModeNode.BURN?r=BurnNode.call(n):e===BlendModeNode.DODGE?r=DodgeNode.call(n):e===BlendModeNode.SCREEN?r=ScreenNode.call(n):e===BlendModeNode.OVERLAY&&(r=OverlayNode.call(n)),r}}BlendModeNode.BURN="burn",BlendModeNode.DODGE="dodge",BlendModeNode.SCREEN="screen",BlendModeNode.OVERLAY="overlay";export default BlendModeNode;export const burn=nodeProxy(BlendModeNode,BlendModeNode.BURN);export const dodge=nodeProxy(BlendModeNode,BlendModeNode.DODGE);export const overlay=nodeProxy(BlendModeNode,BlendModeNode.OVERLAY);export const screen=nodeProxy(BlendModeNode,BlendModeNode.SCREEN);addNodeElement("burn",burn),addNodeElement("dodge",dodge),addNodeElement("overlay",overlay),addNodeElement("screen",screen),addNodeClass(BlendModeNode);