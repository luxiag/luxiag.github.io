import NodeMaterial,{addNodeMaterial}from"./NodeMaterial.js";import{uniform}from"../core/UniformNode.js";import{cameraProjectionMatrix}from"../accessors/CameraNode.js";import{materialRotation}from"../accessors/MaterialNode.js";import{modelViewMatrix,modelWorldMatrix}from"../accessors/ModelNode.js";import{positionLocal}from"../accessors/PositionNode.js";import{vec2,vec3,vec4}from"../shadernode/ShaderNode.js";import{SpriteMaterial}from"three";const defaultValues=new SpriteMaterial;class SpriteNodeMaterial extends NodeMaterial{constructor(e){super(),this.isSpriteNodeMaterial=!0,this.lights=!1,this.normals=!1,this.colorNode=null,this.opacityNode=null,this.alphaTestNode=null,this.lightNode=null,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.setDefaultValues(defaultValues),this.setValues(e)}constructPosition({object:e,context:o}){const{positionNode:t,rotationNode:i,scaleNode:r}=this,a=positionLocal;let s=modelViewMatrix.mul(vec3(t||0)),l=vec2(modelWorldMatrix[0].xyz.length(),modelWorldMatrix[1].xyz.length());null!==r&&(l=l.mul(r));let d=a.xy;e.center&&!0===e.center.isVector2&&(d=d.sub(uniform(e.center).sub(.5))),d=d.mul(l);const c=i||materialRotation,n=c.cos(),N=c.sin(),m=vec2(vec2(n,N.negate()).dot(d),vec2(N,n).dot(d));s=vec4(s.xy.add(m),s.zw);const h=cameraProjectionMatrix.mul(s);return o.vertex=a,h}copy(e){return this.colorNode=e.colorNode,this.opacityNode=e.opacityNode,this.alphaTestNode=e.alphaTestNode,this.lightNode=e.lightNode,this.positionNode=e.positionNode,this.rotationNode=e.rotationNode,this.scaleNode=e.scaleNode,super.copy(e)}}export default SpriteNodeMaterial;addNodeMaterial(SpriteNodeMaterial);