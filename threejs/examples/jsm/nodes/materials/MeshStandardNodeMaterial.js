import NodeMaterial,{addNodeMaterial}from"./NodeMaterial.js";import{diffuseColor,metalness,roughness,specularColor}from"../core/PropertyNode.js";import{mix}from"../math/MathNode.js";import{materialRoughness,materialMetalness}from"../accessors/MaterialNode.js";import getRoughness from"../functions/material/getRoughness.js";import physicalLightingModel from"../functions/PhysicalLightingModel.js";import{float,vec3,vec4}from"../shadernode/ShaderNode.js";import{MeshStandardMaterial}from"three";const defaultValues=new MeshStandardMaterial;class MeshStandardNodeMaterial extends NodeMaterial{constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.colorNode=null,this.opacityNode=null,this.alphaTestNode=null,this.normalNode=null,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.envNode=null,this.lightsNode=null,this.positionNode=null,this.setDefaultValues(defaultValues),this.setValues(e)}constructLightingModel(){return physicalLightingModel}constructVariants({stack:e}){const s=this.metalnessNode?float(this.metalnessNode):materialMetalness;e.assign(metalness,s);let o=this.roughnessNode?float(this.roughnessNode):materialRoughness;o=getRoughness.call({roughness:o}),e.assign(roughness,o);const t=mix(vec3(.04),diffuseColor.rgb,s);e.assign(specularColor,t),e.assign(diffuseColor,vec4(diffuseColor.rgb.mul(s.oneMinus()),diffuseColor.a))}copy(e){return this.colorNode=e.colorNode,this.opacityNode=e.opacityNode,this.alphaTestNode=e.alphaTestNode,this.normalNode=e.normalNode,this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,this.envNode=e.envNode,this.lightsNode=e.lightsNode,this.positionNode=e.positionNode,super.copy(e)}}export default MeshStandardNodeMaterial;addNodeMaterial(MeshStandardNodeMaterial);