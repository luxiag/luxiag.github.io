import Node,{addNodeClass}from"../core/Node.js";import{attribute}from"../core/AttributeNode.js";import{label}from"../core/VarNode.js";import{varying}from"../core/VaryingNode.js";import{normalize}from"../math/MathNode.js";import{cameraViewMatrix}from"./CameraNode.js";import{modelViewMatrix}from"./ModelNode.js";import{nodeImmutable}from"../shadernode/ShaderNode.js";class TangentNode extends Node{constructor(e=TangentNode.LOCAL){super(),this.scope=e}getHash(){return`tangent-${this.scope}`}getNodeType(){return this.scope===TangentNode.GEOMETRY?"vec4":"vec3"}generate(e){const t=this.scope;let o=null;if(t===TangentNode.GEOMETRY)o=attribute("tangent","vec4");else if(t===TangentNode.LOCAL)o=varying(tangentGeometry.xyz);else if(t===TangentNode.VIEW){const e=modelViewMatrix.mul(tangentLocal).xyz;o=normalize(varying(e))}else if(t===TangentNode.WORLD){const e=tangentView.transformDirection(cameraViewMatrix);o=normalize(varying(e))}return o.build(e,this.getNodeType(e))}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}TangentNode.GEOMETRY="geometry",TangentNode.LOCAL="local",TangentNode.VIEW="view",TangentNode.WORLD="world";export default TangentNode;export const tangentGeometry=nodeImmutable(TangentNode,TangentNode.GEOMETRY);export const tangentLocal=nodeImmutable(TangentNode,TangentNode.LOCAL);export const tangentView=nodeImmutable(TangentNode,TangentNode.VIEW);export const tangentWorld=nodeImmutable(TangentNode,TangentNode.WORLD);export const transformedTangentView=label(tangentView,"TransformedTangentView");export const transformedTangentWorld=normalize(transformedTangentView.transformDirection(cameraViewMatrix));addNodeClass(TangentNode);