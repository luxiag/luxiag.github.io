import Node,{addNodeClass}from"../core/Node.js";import{varying}from"../core/VaryingNode.js";import{normalize}from"../math/MathNode.js";import{cameraViewMatrix}from"./CameraNode.js";import{normalGeometry,normalLocal,normalView,normalWorld,transformedNormalView}from"./NormalNode.js";import{tangentGeometry,tangentLocal,tangentView,tangentWorld,transformedTangentView}from"./TangentNode.js";import{nodeImmutable}from"../shadernode/ShaderNode.js";class BitangentNode extends Node{constructor(e=BitangentNode.LOCAL){super("vec3"),this.scope=e}getHash(){return`bitangent-${this.scope}`}generate(e){const t=this.scope;let o;t===BitangentNode.GEOMETRY?o=normalGeometry.cross(tangentGeometry):t===BitangentNode.LOCAL?o=normalLocal.cross(tangentLocal):t===BitangentNode.VIEW?o=normalView.cross(tangentView):t===BitangentNode.WORLD&&(o=normalWorld.cross(tangentWorld));const n=o.mul(tangentGeometry.w).xyz;return normalize(varying(n)).build(e,this.getNodeType(e))}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}BitangentNode.GEOMETRY="geometry",BitangentNode.LOCAL="local",BitangentNode.VIEW="view",BitangentNode.WORLD="world";export default BitangentNode;export const bitangentGeometry=nodeImmutable(BitangentNode,BitangentNode.GEOMETRY);export const bitangentLocal=nodeImmutable(BitangentNode,BitangentNode.LOCAL);export const bitangentView=nodeImmutable(BitangentNode,BitangentNode.VIEW);export const bitangentWorld=nodeImmutable(BitangentNode,BitangentNode.WORLD);export const transformedBitangentView=normalize(transformedNormalView.cross(transformedTangentView).mul(tangentGeometry.w));export const transformedBitangentWorld=normalize(transformedBitangentView.transformDirection(cameraViewMatrix));addNodeClass(BitangentNode);