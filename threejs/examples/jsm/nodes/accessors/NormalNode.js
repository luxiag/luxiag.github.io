import Node,{addNodeClass}from"../core/Node.js";import{attribute}from"../core/AttributeNode.js";import{label}from"../core/VarNode.js";import{varying}from"../core/VaryingNode.js";import{normalize}from"../math/MathNode.js";import{cameraViewMatrix}from"./CameraNode.js";import{modelNormalMatrix}from"./ModelNode.js";import{nodeImmutable}from"../shadernode/ShaderNode.js";class NormalNode extends Node{constructor(o=NormalNode.LOCAL){super("vec3"),this.scope=o}isGlobal(){return!0}getHash(){return`normal-${this.scope}`}generate(o){const e=this.scope;let r=null;if(e===NormalNode.GEOMETRY)r=attribute("normal","vec3");else if(e===NormalNode.LOCAL)r=varying(normalGeometry);else if(e===NormalNode.VIEW){const o=modelNormalMatrix.mul(normalLocal);r=normalize(varying(o))}else if(e===NormalNode.WORLD){const o=normalView.transformDirection(cameraViewMatrix);r=normalize(varying(o))}return r.build(o,this.getNodeType(o))}serialize(o){super.serialize(o),o.scope=this.scope}deserialize(o){super.deserialize(o),this.scope=o.scope}}NormalNode.GEOMETRY="geometry",NormalNode.LOCAL="local",NormalNode.VIEW="view",NormalNode.WORLD="world";export default NormalNode;export const normalGeometry=nodeImmutable(NormalNode,NormalNode.GEOMETRY);export const normalLocal=nodeImmutable(NormalNode,NormalNode.LOCAL);export const normalView=nodeImmutable(NormalNode,NormalNode.VIEW);export const normalWorld=nodeImmutable(NormalNode,NormalNode.WORLD);export const transformedNormalView=label(normalView,"TransformedNormalView");export const transformedNormalWorld=transformedNormalView.transformDirection(cameraViewMatrix).normalize();addNodeClass(NormalNode);