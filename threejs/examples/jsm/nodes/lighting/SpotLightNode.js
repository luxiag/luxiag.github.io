import AnalyticLightNode from"./AnalyticLightNode.js";import{lightTargetDirection}from"./LightNode.js";import{addLightNode}from"./LightsNode.js";import{getDistanceAttenuation}from"./LightUtils.js";import{uniform}from"../core/UniformNode.js";import{smoothstep}from"../math/MathNode.js";import{objectViewPosition}from"../accessors/Object3DNode.js";import{positionView}from"../accessors/PositionNode.js";import{addNodeClass}from"../core/Node.js";import{SpotLight}from"three";class SpotLightNode extends AnalyticLightNode{constructor(t=null){super(t),this.coneCosNode=uniform(0),this.penumbraCosNode=uniform(0),this.cutoffDistanceNode=uniform(0),this.decayExponentNode=uniform(0)}update(t){super.update(t);const{light:o}=this;this.coneCosNode.value=Math.cos(o.angle),this.penumbraCosNode.value=Math.cos(o.angle*(1-o.penumbra)),this.cutoffDistanceNode.value=o.distance,this.decayExponentNode.value=o.decay}getSpotAttenuation(t){const{coneCosNode:o,penumbraCosNode:e}=this;return smoothstep(o,e,t)}construct(t){super.construct(t);const{colorNode:o,cutoffDistanceNode:e,decayExponentNode:i,light:s}=this,n=objectViewPosition(s).sub(positionView),r=n.normalize(),c=r.dot(lightTargetDirection(s)),d=this.getSpotAttenuation(c),a=n.length(),h=getDistanceAttenuation.call({lightDistance:a,cutoffDistance:e,decayExponent:i}),l=o.mul(d).mul(h),m=t.context.lightingModelNode,p=t.context.reflectedLight;m&&m.direct&&m.direct.call({lightDirection:r,lightColor:l,reflectedLight:p},t)}}export default SpotLightNode;addLightNode(SpotLight,SpotLightNode),addNodeClass(SpotLightNode);