import{FloatType,HalfFloatType,RGBAFormat,DataUtils}from"three";import*as fflate from"../libs/fflate.module.js";const textEncoder=new TextEncoder,NO_COMPRESSION=0,ZIPS_COMPRESSION=2,ZIP_COMPRESSION=3;class EXRExporter{parse(t,e,n){if(!supported(t,e))return;const a=buildInfo(e,n);return fillData(compressData(reorganizeDataBuffer(getPixelData(t,e,a),a),a),a)}}function supported(t,e){return t&&t.isWebGLRenderer?e&&e.isWebGLRenderTarget?e.texture.type!==FloatType&&e.texture.type!==HalfFloatType?(console.error("EXRExporter.parse: Unsupported WebGLRenderTarget texture type."),!1):e.texture.format===RGBAFormat||(console.error("EXRExporter.parse: Unsupported WebGLRenderTarget texture format, expected RGBAFormat."),!1):(console.error("EXRExporter.parse: Unsupported second parameter, expected instance of WebGLRenderTarget."),!1):(console.error("EXRExporter.parse: Unsupported first parameter, expected instance of WebGLRenderer."),!1)}function buildInfo(t,e={}){const n=t.width,a=t.height,r=t.texture.type,i=t.texture.format,s=t.texture.colorSpace,o=void 0!==e.compression?e.compression:3,l=(void 0!==e.type?e.type:HalfFloatType)===FloatType?2:1,u={0:1,2:1,3:16}[o];return{width:n,height:a,type:r,format:i,colorSpace:s,compression:o,blockLines:u,dataType:l,dataSize:2*l,numBlocks:Math.ceil(a/u),numInputChannels:4,numOutputChannels:4}}function getPixelData(t,e,n){let a;return a=n.type===FloatType?new Float32Array(n.width*n.height*n.numInputChannels):new Uint16Array(n.width*n.height*n.numInputChannels),t.readRenderTargetPixels(e,0,0,n.width,n.height,a),a}function reorganizeDataBuffer(t,e){const n=e.width,a=e.height,r={r:0,g:0,b:0,a:0},i={value:0},s=4==e.numOutputChannels?1:0,o=e.type==FloatType?getFloat32:getFloat16,l=1==e.dataType?setFloat16:setFloat32,u=new Uint8Array(e.width*e.height*e.numOutputChannels*e.dataSize),c=new DataView(u.buffer);for(let u=0;u<a;++u)for(let p=0;p<n;++p){const d=u*n*4+4*p,f=o(t,d),U=o(t,d+1),g=o(t,d+2),h=o(t,d+3),S=(a-u-1)*n*(3+s)*e.dataSize;decodeLinear(r,f,U,g,h),i.value=S+p*e.dataSize,l(c,r.a,i),i.value=S+s*n*e.dataSize+p*e.dataSize,l(c,r.b,i),i.value=S+(1+s)*n*e.dataSize+p*e.dataSize,l(c,r.g,i),i.value=S+(2+s)*n*e.dataSize+p*e.dataSize,l(c,r.r,i)}return u}function compressData(t,e){let n,a,r=0;const i={data:new Array,totalSize:0},s=e.width*e.numOutputChannels*e.blockLines*e.dataSize;switch(e.compression){case 0:n=compressNONE;break;case 2:case 3:n=compressZIP}0!==e.compression&&(a=new Uint8Array(s));for(let o=0;o<e.numBlocks;++o){const e=n(t.subarray(s*o,s*(o+1)),a);r+=e.length,i.data.push({dataChunk:e,size:e.length})}return i.totalSize=r,i}function compressNONE(t){return t}function compressZIP(t,e){let n=0,a=Math.floor((t.length+1)/2),r=0;const i=t.length-1;for(;!(r>i||(e[n++]=t[r++],r>i));)e[a++]=t[r++];let s=e[0];for(let t=1;t<e.length;t++){const n=e[t]-s+384;s=e[t],e[t]=n}return fflate.zlibSync(e)}function fillHeader(t,e,n){const a={value:0},r=new DataView(t.buffer);setUint32(r,20000630,a),setUint32(r,2,a),setString(r,"compression",a),setString(r,"compression",a),setUint32(r,1,a),setUint8(r,n.compression,a),setString(r,"screenWindowCenter",a),setString(r,"v2f",a),setUint32(r,8,a),setUint32(r,0,a),setUint32(r,0,a),setString(r,"screenWindowWidth",a),setString(r,"float",a),setUint32(r,4,a),setFloat32(r,1,a),setString(r,"pixelAspectRatio",a),setString(r,"float",a),setUint32(r,4,a),setFloat32(r,1,a),setString(r,"lineOrder",a),setString(r,"lineOrder",a),setUint32(r,1,a),setUint8(r,0,a),setString(r,"dataWindow",a),setString(r,"box2i",a),setUint32(r,16,a),setUint32(r,0,a),setUint32(r,0,a),setUint32(r,n.width-1,a),setUint32(r,n.height-1,a),setString(r,"displayWindow",a),setString(r,"box2i",a),setUint32(r,16,a),setUint32(r,0,a),setUint32(r,0,a),setUint32(r,n.width-1,a),setUint32(r,n.height-1,a),setString(r,"channels",a),setString(r,"chlist",a),setUint32(r,18*n.numOutputChannels+1,a),setString(r,"A",a),setUint32(r,n.dataType,a),a.value+=4,setUint32(r,1,a),setUint32(r,1,a),setString(r,"B",a),setUint32(r,n.dataType,a),a.value+=4,setUint32(r,1,a),setUint32(r,1,a),setString(r,"G",a),setUint32(r,n.dataType,a),a.value+=4,setUint32(r,1,a),setUint32(r,1,a),setString(r,"R",a),setUint32(r,n.dataType,a),a.value+=4,setUint32(r,1,a),setUint32(r,1,a),setUint8(r,0,a),setUint8(r,0,a);let i=a.value+8*n.numBlocks;for(let t=0;t<e.data.length;++t)setUint64(r,i,a),i+=e.data[t].size+8}function fillData(t,e){const n=8*e.numBlocks,a=259+18*e.numOutputChannels,r={value:a+n},i=new Uint8Array(a+n+t.totalSize+8*e.numBlocks),s=new DataView(i.buffer);fillHeader(i,t,e);for(let n=0;n<t.data.length;++n){const a=t.data[n].dataChunk,o=t.data[n].size;setUint32(s,n*e.blockLines,r),setUint32(s,o,r),i.set(a,r.value),r.value+=o}return i}function decodeLinear(t,e,n,a,r){t.r=e,t.g=n,t.b=a,t.a=r}function setUint8(t,e,n){t.setUint8(n.value,e),n.value+=1}function setUint32(t,e,n){t.setUint32(n.value,e,!0),n.value+=4}function setFloat16(t,e,n){t.setUint16(n.value,DataUtils.toHalfFloat(e),!0),n.value+=2}function setFloat32(t,e,n){t.setFloat32(n.value,e,!0),n.value+=4}function setUint64(t,e,n){t.setBigUint64(n.value,BigInt(e),!0),n.value+=8}function setString(t,e,n){const a=textEncoder.encode(e+"\0");for(let e=0;e<a.length;++e)setUint8(t,a[e],n)}function decodeFloat16(t){const e=(31744&t)>>10,n=1023&t;return(t>>15?-1:1)*(e?31===e?n?NaN:1/0:Math.pow(2,e-15)*(1+n/1024):n/1024*6103515625e-14)}function getFloat16(t,e){return decodeFloat16(t[e])}function getFloat32(t,e){return t[e]}export{EXRExporter,NO_COMPRESSION,ZIP_COMPRESSION,ZIPS_COMPRESSION};