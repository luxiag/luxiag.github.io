import{Matrix4,Quaternion,Vector3}from"three";import{MMDParser}from"../libs/mmdparser.module.js";class MMDExporter{parseVpd(e,n,t){if(!0!==e.isSkinnedMesh)return console.warn("THREE.MMDExporter: parseVpd() requires SkinnedMesh instance."),null;function o(e){Math.abs(e)<1e-6&&(e=0);let n=e.toString();-1===n.indexOf(".")&&(n+="."),n+="000000";const t=n.indexOf(".");return n.slice(0,t)+"."+n.slice(t+1,t+7)}function r(e){const n=[];for(let t=0,r=e.length;t<r;t++)n.push(o(e[t]));return n.join(",")}e.updateMatrixWorld(!0);const s=e.skeleton.bones,i=getBindBones(e),a=new Vector3,u=new Quaternion,c=new Quaternion,l=new Matrix4,p=[];p.push("Vocaloid Pose Data file"),p.push(""),p.push((""!==e.name?e.name.replace(/\s/g,"_"):"skin")+".osm;"),p.push(s.length+";"),p.push("");for(let e=0,n=s.length;e<n;e++){const n=s[e],o=i[e];!0===t&&void 0!==n.userData.ik&&void 0!==n.userData.ik.originalMatrix?l.fromArray(n.userData.ik.originalMatrix):l.copy(n.matrix),a.setFromMatrixPosition(l),u.setFromRotationMatrix(l);const h=a.sub(o.position).toArray(),d=c.copy(o.quaternion).conjugate().multiply(u).toArray();h[2]=-h[2],d[0]=-d[0],d[1]=-d[1],p.push("Bone"+e+"{"+n.name),p.push("  "+r(h)+";"),p.push("  "+r(d)+";"),p.push("}"),p.push("")}p.push("");const h=p.join("\n");return!0===n?unicodeToShiftjis(h):h}}let u2sTable;function unicodeToShiftjis(e){if(void 0===u2sTable){const e=(new MMDParser.CharsetEncoder).s2uTable;u2sTable={};const n=Object.keys(e);for(let t=0,o=n.length;t<o;t++){let o=n[t];const r=e[o];o=parseInt(o),u2sTable[r]=o}}const n=[];for(let t=0,o=e.length;t<o;t++){const o=e.charCodeAt(t),r=u2sTable[o];if(void 0===r)throw new Error("cannot convert charcode 0x"+o.toString(16));r>255?(n.push(r>>8&255),n.push(255&r)):n.push(255&r)}return new Uint8Array(n)}function getBindBones(e){const n=e.clone();return n.pose(),n.skeleton.bones}export{MMDExporter};