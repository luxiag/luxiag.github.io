import{BufferGeometry,DynamicDrawUsage,Float32BufferAttribute,MathUtils,Uint32BufferAttribute,Vector3}from"three";import{SimplexNoise}from"../math/SimplexNoise.js";class LightningStrike extends BufferGeometry{constructor(t={}){super(),this.isLightningStrike=!0,this.type="LightningStrike",this.init(LightningStrike.copyParameters(t,t)),this.createMesh()}static createRandomGenerator(){const t=2053,i=[];for(let e=0;e<t;e++)i.push(Math.random());const e={currentSeed:0,random:function(){const r=i[e.currentSeed];return e.currentSeed=(e.currentSeed+1)%t,r},getSeed:function(){return e.currentSeed/t},setSeed:function(i){e.currentSeed=Math.floor(i*t)%t}};return e}static copyParameters(t={},i={}){const e=function(e){return i===t?e:e.clone()};return t.sourceOffset=void 0!==i.sourceOffset?e(i.sourceOffset):new Vector3(0,100,0),t.destOffset=void 0!==i.destOffset?e(i.destOffset):new Vector3(0,0,0),t.timeScale=void 0!==i.timeScale?i.timeScale:1,t.roughness=void 0!==i.roughness?i.roughness:.9,t.straightness=void 0!==i.straightness?i.straightness:.7,t.up0=void 0!==i.up0?e(i.up0):new Vector3(0,0,1),t.up1=void 0!==i.up1?e(i.up1):new Vector3(0,0,1),t.radius0=void 0!==i.radius0?i.radius0:1,t.radius1=void 0!==i.radius1?i.radius1:1,t.radius0Factor=void 0!==i.radius0Factor?i.radius0Factor:.5,t.radius1Factor=void 0!==i.radius1Factor?i.radius1Factor:.2,t.minRadius=void 0!==i.minRadius?i.minRadius:.2,t.isEternal=void 0!==i.isEternal?i.isEternal:void 0===i.birthTime||void 0===i.deathTime,t.birthTime=i.birthTime,t.deathTime=i.deathTime,t.propagationTimeFactor=void 0!==i.propagationTimeFactor?i.propagationTimeFactor:.1,t.vanishingTimeFactor=void 0!==i.vanishingTimeFactor?i.vanishingTimeFactor:.9,t.subrayPeriod=void 0!==i.subrayPeriod?i.subrayPeriod:4,t.subrayDutyCycle=void 0!==i.subrayDutyCycle?i.subrayDutyCycle:.6,t.maxIterations=void 0!==i.maxIterations?i.maxIterations:9,t.isStatic=void 0!==i.isStatic&&i.isStatic,t.ramification=void 0!==i.ramification?i.ramification:5,t.maxSubrayRecursion=void 0!==i.maxSubrayRecursion?i.maxSubrayRecursion:3,t.recursionProbability=void 0!==i.recursionProbability?i.recursionProbability:.6,t.generateUVs=void 0!==i.generateUVs&&i.generateUVs,t.randomGenerator=i.randomGenerator,t.noiseSeed=i.noiseSeed,t.onDecideSubrayCreation=i.onDecideSubrayCreation,t.onSubrayCreation=i.onSubrayCreation,t}update(t){this.isStatic||(this.rayParameters.isEternal||this.rayParameters.birthTime<=t&&t<=this.rayParameters.deathTime?(this.updateMesh(t),t<this.subrays[0].endPropagationTime?this.state=LightningStrike.RAY_PROPAGATING:t>this.subrays[0].beginVanishingTime?this.state=LightningStrike.RAY_VANISHING:this.state=LightningStrike.RAY_STEADY,this.visible=!0):(this.visible=!1,t<this.rayParameters.birthTime?this.state=LightningStrike.RAY_UNBORN:this.state=LightningStrike.RAY_EXTINGUISHED))}init(t){this.rayParameters=t,this.maxIterations=void 0!==t.maxIterations?Math.floor(t.maxIterations):9,t.maxIterations=this.maxIterations,this.isStatic=void 0!==t.isStatic&&t.isStatic,t.isStatic=this.isStatic,this.ramification=void 0!==t.ramification?Math.floor(t.ramification):5,t.ramification=this.ramification,this.maxSubrayRecursion=void 0!==t.maxSubrayRecursion?Math.floor(t.maxSubrayRecursion):3,t.maxSubrayRecursion=this.maxSubrayRecursion,this.recursionProbability=void 0!==t.recursionProbability?t.recursionProbability:.6,t.recursionProbability=this.recursionProbability,this.generateUVs=void 0!==t.generateUVs&&t.generateUVs,t.generateUVs=this.generateUVs,void 0!==t.randomGenerator?(this.randomGenerator=t.randomGenerator,this.seedGenerator=t.randomGenerator,void 0!==t.noiseSeed&&this.seedGenerator.setSeed(t.noiseSeed)):(this.randomGenerator=LightningStrike.createRandomGenerator(),this.seedGenerator=Math),void 0!==t.onDecideSubrayCreation?this.onDecideSubrayCreation=t.onDecideSubrayCreation:(this.createDefaultSubrayCreationCallbacks(),void 0!==t.onSubrayCreation&&(this.onSubrayCreation=t.onSubrayCreation)),this.state=LightningStrike.RAY_INITIALIZED,this.maxSubrays=Math.ceil(1+Math.pow(this.ramification,Math.max(0,this.maxSubrayRecursion-1))),t.maxSubrays=this.maxSubrays,this.maxRaySegments=2*(1<<this.maxIterations),this.subrays=[];for(let t=0;t<this.maxSubrays;t++)this.subrays.push(this.createSubray());this.raySegments=[];for(let t=0;t<this.maxRaySegments;t++)this.raySegments.push(this.createSegment());this.time=0,this.timeFraction=0,this.currentSegmentCallback=null,this.currentCreateTriangleVertices=this.generateUVs?this.createTriangleVerticesWithUVs:this.createTriangleVerticesWithoutUVs,this.numSubrays=0,this.currentSubray=null,this.currentSegmentIndex=0,this.isInitialSegment=!1,this.subrayProbability=0,this.currentVertex=0,this.currentIndex=0,this.currentCoordinate=0,this.currentUVCoordinate=0,this.vertices=null,this.uvs=null,this.indices=null,this.positionAttribute=null,this.uvsAttribute=null,this.simplexX=new SimplexNoise(this.seedGenerator),this.simplexY=new SimplexNoise(this.seedGenerator),this.simplexZ=new SimplexNoise(this.seedGenerator),this.forwards=new Vector3,this.forwardsFill=new Vector3,this.side=new Vector3,this.down=new Vector3,this.middlePos=new Vector3,this.middleLinPos=new Vector3,this.newPos=new Vector3,this.vPos=new Vector3,this.cross1=new Vector3}createMesh(){const t=1<<this.maxIterations,i=3*(t+1)*this.maxSubrays,e=18*t*this.maxSubrays;this.vertices=new Float32Array(3*i),this.indices=new Uint32Array(e),this.generateUVs&&(this.uvs=new Float32Array(2*i)),this.fillMesh(0),this.setIndex(new Uint32BufferAttribute(this.indices,1)),this.positionAttribute=new Float32BufferAttribute(this.vertices,3),this.setAttribute("position",this.positionAttribute),this.generateUVs&&(this.uvsAttribute=new Float32BufferAttribute(new Float32Array(this.uvs),2),this.setAttribute("uv",this.uvsAttribute)),this.isStatic||(this.index.usage=DynamicDrawUsage,this.positionAttribute.usage=DynamicDrawUsage,this.generateUVs&&(this.uvsAttribute.usage=DynamicDrawUsage)),this.vertices=this.positionAttribute.array,this.indices=this.index.array,this.generateUVs&&(this.uvs=this.uvsAttribute.array)}updateMesh(t){this.fillMesh(t),this.drawRange.count=this.currentIndex,this.index.needsUpdate=!0,this.positionAttribute.needsUpdate=!0,this.generateUVs&&(this.uvsAttribute.needsUpdate=!0)}fillMesh(t){const i=this;this.currentVertex=0,this.currentIndex=0,this.currentCoordinate=0,this.currentUVCoordinate=0,this.fractalRay(t,(function(e){const r=i.currentSubray;t<r.birthTime||(this.rayParameters.isEternal&&0==i.currentSubray.recursion?(i.createPrism(e),i.onDecideSubrayCreation(e,i)):t<r.endPropagationTime?i.timeFraction>=e.fraction0*r.propagationTimeFactor&&(i.createPrism(e),i.onDecideSubrayCreation(e,i)):t<r.beginVanishingTime?(i.createPrism(e),i.onDecideSubrayCreation(e,i)):(i.timeFraction<=r.vanishingTimeFactor+e.fraction1*(1-r.vanishingTimeFactor)&&i.createPrism(e),i.onDecideSubrayCreation(e,i)))}))}addNewSubray(){return this.subrays[this.numSubrays++]}initSubray(t,i){t.pos0.copy(i.sourceOffset),t.pos1.copy(i.destOffset),t.up0.copy(i.up0),t.up1.copy(i.up1),t.radius0=i.radius0,t.radius1=i.radius1,t.birthTime=i.birthTime,t.deathTime=i.deathTime,t.timeScale=i.timeScale,t.roughness=i.roughness,t.straightness=i.straightness,t.propagationTimeFactor=i.propagationTimeFactor,t.vanishingTimeFactor=i.vanishingTimeFactor,t.maxIterations=this.maxIterations,t.seed=void 0!==i.noiseSeed?i.noiseSeed:0,t.recursion=0}fractalRay(t,i){this.time=t,this.currentSegmentCallback=i,this.numSubrays=0,this.initSubray(this.addNewSubray(),this.rayParameters);for(let i=0;i<this.numSubrays;i++){const e=this.subrays[i];this.currentSubray=e,this.randomGenerator.setSeed(e.seed),e.endPropagationTime=MathUtils.lerp(e.birthTime,e.deathTime,e.propagationTimeFactor),e.beginVanishingTime=MathUtils.lerp(e.deathTime,e.birthTime,1-e.vanishingTimeFactor);const r=this.randomGenerator.random;e.linPos0.set(r(),r(),r()).multiplyScalar(1e3),e.linPos1.set(r(),r(),r()).multiplyScalar(1e3),this.timeFraction=(t-e.birthTime)/(e.deathTime-e.birthTime),this.currentSegmentIndex=0,this.isInitialSegment=!0;const s=this.getNewSegment();s.iteration=0,s.pos0.copy(e.pos0),s.pos1.copy(e.pos1),s.linPos0.copy(e.linPos0),s.linPos1.copy(e.linPos1),s.up0.copy(e.up0),s.up1.copy(e.up1),s.radius0=e.radius0,s.radius1=e.radius1,s.fraction0=0,s.fraction1=1,s.positionVariationFactor=1-e.straightness,this.subrayProbability=this.ramification*Math.pow(this.recursionProbability,e.recursion)/(1<<e.maxIterations),this.fractalRayRecursive(s)}this.currentSegmentCallback=null,this.currentSubray=null}fractalRayRecursive(t){if(t.iteration>=this.currentSubray.maxIterations)return void this.currentSegmentCallback(t);this.forwards.subVectors(t.pos1,t.pos0);let i=this.forwards.length();i<1e-6&&(this.forwards.set(0,0,.01),i=this.forwards.length());const e=.5*(t.radius0+t.radius1),r=.5*(t.fraction0+t.fraction1),s=this.time*this.currentSubray.timeScale*Math.pow(2,t.iteration);this.middlePos.lerpVectors(t.pos0,t.pos1,.5),this.middleLinPos.lerpVectors(t.linPos0,t.linPos1,.5);const a=this.middleLinPos;this.newPos.set(this.simplexX.noise4d(a.x,a.y,a.z,s),this.simplexY.noise4d(a.x,a.y,a.z,s),this.simplexZ.noise4d(a.x,a.y,a.z,s)),this.newPos.multiplyScalar(t.positionVariationFactor*i),this.newPos.add(this.middlePos);const n=this.getNewSegment();n.pos0.copy(t.pos0),n.pos1.copy(this.newPos),n.linPos0.copy(t.linPos0),n.linPos1.copy(this.middleLinPos),n.up0.copy(t.up0),n.up1.copy(t.up1),n.radius0=t.radius0,n.radius1=e,n.fraction0=t.fraction0,n.fraction1=r,n.positionVariationFactor=t.positionVariationFactor*this.currentSubray.roughness,n.iteration=t.iteration+1;const o=this.getNewSegment();o.pos0.copy(this.newPos),o.pos1.copy(t.pos1),o.linPos0.copy(this.middleLinPos),o.linPos1.copy(t.linPos1),this.cross1.crossVectors(t.up0,this.forwards.normalize()),o.up0.crossVectors(this.forwards,this.cross1).normalize(),o.up1.copy(t.up1),o.radius0=e,o.radius1=t.radius1,o.fraction0=r,o.fraction1=t.fraction1,o.positionVariationFactor=t.positionVariationFactor*this.currentSubray.roughness,o.iteration=t.iteration+1,this.fractalRayRecursive(n),this.fractalRayRecursive(o)}createPrism(t){this.forwardsFill.subVectors(t.pos1,t.pos0).normalize(),this.isInitialSegment&&(this.currentCreateTriangleVertices(t.pos0,t.up0,this.forwardsFill,t.radius0,0),this.isInitialSegment=!1),this.currentCreateTriangleVertices(t.pos1,t.up0,this.forwardsFill,t.radius1,t.fraction1),this.createPrismFaces()}createTriangleVerticesWithoutUVs(t,i,e,r){this.side.crossVectors(i,e).multiplyScalar(r*LightningStrike.COS30DEG),this.down.copy(i).multiplyScalar(-r*LightningStrike.SIN30DEG);const s=this.vPos,a=this.vertices;s.copy(t).sub(this.side).add(this.down),a[this.currentCoordinate++]=s.x,a[this.currentCoordinate++]=s.y,a[this.currentCoordinate++]=s.z,s.copy(t).add(this.side).add(this.down),a[this.currentCoordinate++]=s.x,a[this.currentCoordinate++]=s.y,a[this.currentCoordinate++]=s.z,s.copy(i).multiplyScalar(r).add(t),a[this.currentCoordinate++]=s.x,a[this.currentCoordinate++]=s.y,a[this.currentCoordinate++]=s.z,this.currentVertex+=3}createTriangleVerticesWithUVs(t,i,e,r,s){this.side.crossVectors(i,e).multiplyScalar(r*LightningStrike.COS30DEG),this.down.copy(i).multiplyScalar(-r*LightningStrike.SIN30DEG);const a=this.vPos,n=this.vertices,o=this.uvs;a.copy(t).sub(this.side).add(this.down),n[this.currentCoordinate++]=a.x,n[this.currentCoordinate++]=a.y,n[this.currentCoordinate++]=a.z,o[this.currentUVCoordinate++]=s,o[this.currentUVCoordinate++]=0,a.copy(t).add(this.side).add(this.down),n[this.currentCoordinate++]=a.x,n[this.currentCoordinate++]=a.y,n[this.currentCoordinate++]=a.z,o[this.currentUVCoordinate++]=s,o[this.currentUVCoordinate++]=.5,a.copy(i).multiplyScalar(r).add(t),n[this.currentCoordinate++]=a.x,n[this.currentCoordinate++]=a.y,n[this.currentCoordinate++]=a.z,o[this.currentUVCoordinate++]=s,o[this.currentUVCoordinate++]=1,this.currentVertex+=3}createPrismFaces(t){const i=this.indices;t=this.currentVertex-6,i[this.currentIndex++]=t+1,i[this.currentIndex++]=t+2,i[this.currentIndex++]=t+5,i[this.currentIndex++]=t+1,i[this.currentIndex++]=t+5,i[this.currentIndex++]=t+4,i[this.currentIndex++]=t+0,i[this.currentIndex++]=t+1,i[this.currentIndex++]=t+4,i[this.currentIndex++]=t+0,i[this.currentIndex++]=t+4,i[this.currentIndex++]=t+3,i[this.currentIndex++]=t+2,i[this.currentIndex++]=t+0,i[this.currentIndex++]=t+3,i[this.currentIndex++]=t+2,i[this.currentIndex++]=t+3,i[this.currentIndex++]=t+5}createDefaultSubrayCreationCallbacks(){const t=this.randomGenerator.random;this.onDecideSubrayCreation=function(i,e){const r=e.currentSubray,s=e.rayParameters.subrayPeriod,a=e.rayParameters.subrayDutyCycle,n=e.rayParameters.isEternal&&0==r.recursion?-t()*s:MathUtils.lerp(r.birthTime,r.endPropagationTime,i.fraction0)-t()*s,o=e.time-n,c=Math.floor(o/s),h=t()*(c+1);let u=0;if(o%s<=a*s&&(u=e.subrayProbability),r.recursion<e.maxSubrayRecursion&&e.numSubrays<e.maxSubrays&&t()<u){const o=e.addNewSubray(),u=e.randomGenerator.getSeed();o.seed=h,e.randomGenerator.setSeed(h),o.recursion=r.recursion+1,o.maxIterations=Math.max(1,r.maxIterations-1),o.linPos0.set(t(),t(),t()).multiplyScalar(1e3),o.linPos1.set(t(),t(),t()).multiplyScalar(1e3),o.up0.copy(r.up0),o.up1.copy(r.up1),o.radius0=i.radius0*e.rayParameters.radius0Factor,o.radius1=Math.min(e.rayParameters.minRadius,i.radius1*e.rayParameters.radius1Factor),o.birthTime=n+c*s,o.deathTime=o.birthTime+s*a,e.rayParameters.isEternal||0!=r.recursion||(o.birthTime=Math.max(o.birthTime,r.birthTime),o.deathTime=Math.min(o.deathTime,r.deathTime)),o.timeScale=2*r.timeScale,o.roughness=r.roughness,o.straightness=r.straightness,o.propagationTimeFactor=r.propagationTimeFactor,o.vanishingTimeFactor=r.vanishingTimeFactor,e.onSubrayCreation(i,r,o,e),e.randomGenerator.setSeed(u)}};const i=new Vector3,e=new Vector3,r=new Vector3,s=new Vector3;this.onSubrayCreation=function(t,i,e,r){r.subrayCylinderPosition(t,i,e,.5,.6,.2)},this.subrayConePosition=function(a,n,o,c,h,u){o.pos0.copy(a.pos0),i.subVectors(n.pos1,n.pos0),e.copy(i).normalize(),i.multiplyScalar(a.fraction0+(1-a.fraction0)*(t()*c));const d=i.length();r.crossVectors(n.up0,e);const m=2*Math.PI*t();r.multiplyScalar(Math.cos(m)),s.copy(n.up0).multiplyScalar(Math.sin(m)),o.pos1.copy(r).add(s).multiplyScalar(d*h*(u+t()*(1-u))).add(i).add(n.pos0)},this.subrayCylinderPosition=function(a,n,o,c,h,u){o.pos0.copy(a.pos0),i.subVectors(n.pos1,n.pos0),e.copy(i).normalize(),i.multiplyScalar(a.fraction0+(1-a.fraction0)*((2*t()-1)*c));const d=i.length();r.crossVectors(n.up0,e);const m=2*Math.PI*t();r.multiplyScalar(Math.cos(m)),s.copy(n.up0).multiplyScalar(Math.sin(m)),o.pos1.copy(r).add(s).multiplyScalar(d*h*(u+t()*(1-u))).add(i).add(n.pos0)}}createSubray(){return{seed:0,maxIterations:0,recursion:0,pos0:new Vector3,pos1:new Vector3,linPos0:new Vector3,linPos1:new Vector3,up0:new Vector3,up1:new Vector3,radius0:0,radius1:0,birthTime:0,deathTime:0,timeScale:0,roughness:0,straightness:0,propagationTimeFactor:0,vanishingTimeFactor:0,endPropagationTime:0,beginVanishingTime:0}}createSegment(){return{iteration:0,pos0:new Vector3,pos1:new Vector3,linPos0:new Vector3,linPos1:new Vector3,up0:new Vector3,up1:new Vector3,radius0:0,radius1:0,fraction0:0,fraction1:0,positionVariationFactor:0}}getNewSegment(){return this.raySegments[this.currentSegmentIndex++]}copy(t){return super.copy(t),this.init(LightningStrike.copyParameters({},t.rayParameters)),this}clone(){return new this.constructor(LightningStrike.copyParameters({},this.rayParameters))}}LightningStrike.RAY_INITIALIZED=0,LightningStrike.RAY_UNBORN=1,LightningStrike.RAY_PROPAGATING=2,LightningStrike.RAY_STEADY=3,LightningStrike.RAY_VANISHING=4,LightningStrike.RAY_EXTINGUISHED=5,LightningStrike.COS30DEG=Math.cos(30*Math.PI/180),LightningStrike.SIN30DEG=Math.sin(30*Math.PI/180);export{LightningStrike};