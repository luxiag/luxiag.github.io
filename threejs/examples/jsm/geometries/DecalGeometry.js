import{BufferGeometry,Float32BufferAttribute,Matrix4,Vector3}from"three";class DecalGeometry extends BufferGeometry{constructor(t,o,e,n){super();const r=[],s=[],i=[],u=new Vector3,p=new Matrix4;p.makeRotationFromEuler(e),p.setPosition(o);const l=new Matrix4;function c(o,e,n){e.applyMatrix4(t.matrixWorld),e.applyMatrix4(l),n.transformDirection(t.matrixWorld),o.push(new DecalVertex(e.clone(),n.clone()))}function a(t,o){const e=[],r=.5*Math.abs(n.dot(o));for(let n=0;n<t.length;n+=3){let s,i,u,p,l=0;const c=t[n+0].position.dot(o)-r>0,a=t[n+1].position.dot(o)-r>0,f=t[n+2].position.dot(o)-r>0;switch(l=(c?1:0)+(a?1:0)+(f?1:0),l){case 0:e.push(t[n]),e.push(t[n+1]),e.push(t[n+2]);break;case 1:if(c&&(s=t[n+1],i=t[n+2],u=h(t[n],s,o,r),p=h(t[n],i,o,r)),a){s=t[n],i=t[n+2],u=h(t[n+1],s,o,r),p=h(t[n+1],i,o,r),e.push(u),e.push(i.clone()),e.push(s.clone()),e.push(i.clone()),e.push(u.clone()),e.push(p);break}f&&(s=t[n],i=t[n+1],u=h(t[n+2],s,o,r),p=h(t[n+2],i,o,r)),e.push(s.clone()),e.push(i.clone()),e.push(u),e.push(p),e.push(u.clone()),e.push(i.clone());break;case 2:c||(s=t[n].clone(),i=h(s,t[n+1],o,r),u=h(s,t[n+2],o,r),e.push(s),e.push(i),e.push(u)),a||(s=t[n+1].clone(),i=h(s,t[n+2],o,r),u=h(s,t[n],o,r),e.push(s),e.push(i),e.push(u)),f||(s=t[n+2].clone(),i=h(s,t[n],o,r),u=h(s,t[n+1],o,r),e.push(s),e.push(i),e.push(u))}}return e}function h(t,o,e,n){const r=t.position.dot(e)-n,s=r/(r-(o.position.dot(e)-n));return new DecalVertex(new Vector3(t.position.x+s*(o.position.x-t.position.x),t.position.y+s*(o.position.y-t.position.y),t.position.z+s*(o.position.z-t.position.z)),new Vector3(t.normal.x+s*(o.normal.x-t.normal.x),t.normal.y+s*(o.normal.y-t.normal.y),t.normal.z+s*(o.normal.z-t.normal.z)))}l.copy(p).invert(),function(){let o=[];const e=new Vector3,l=new Vector3,h=t.geometry,f=h.attributes.position,m=h.attributes.normal;if(null!==h.index){const t=h.index;for(let n=0;n<t.count;n++)e.fromBufferAttribute(f,t.getX(n)),l.fromBufferAttribute(m,t.getX(n)),c(o,e,l)}else for(let t=0;t<f.count;t++)e.fromBufferAttribute(f,t),l.fromBufferAttribute(m,t),c(o,e,l);o=a(o,u.set(1,0,0)),o=a(o,u.set(-1,0,0)),o=a(o,u.set(0,1,0)),o=a(o,u.set(0,-1,0)),o=a(o,u.set(0,0,1)),o=a(o,u.set(0,0,-1));for(let t=0;t<o.length;t++){const e=o[t];i.push(.5+e.position.x/n.x,.5+e.position.y/n.y),e.position.applyMatrix4(p),r.push(e.position.x,e.position.y,e.position.z),s.push(e.normal.x,e.normal.y,e.normal.z)}}(),this.setAttribute("position",new Float32BufferAttribute(r,3)),this.setAttribute("normal",new Float32BufferAttribute(s,3)),this.setAttribute("uv",new Float32BufferAttribute(i,2))}}class DecalVertex{constructor(t,o){this.position=t,this.normal=o}clone(){return new this.constructor(this.position.clone(),this.normal.clone())}}export{DecalGeometry,DecalVertex};