import{BufferGeometry,Float32BufferAttribute,Vector3}from"three";class ParametricGeometry extends BufferGeometry{constructor(t=((t,e,r)=>r.set(t,e,Math.cos(t)*Math.sin(e))),e=8,r=8){super(),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:r};const s=[],o=[],c=[],u=[],i=1e-5,a=new Vector3,n=new Vector3,f=new Vector3,h=new Vector3,p=new Vector3,m=e+1;for(let s=0;s<=r;s++){const m=s/r;for(let r=0;r<=e;r++){const s=r/e;t(s,m,n),o.push(n.x,n.y,n.z),s-i>=0?(t(s-i,m,f),h.subVectors(n,f)):(t(s+i,m,f),h.subVectors(f,n)),m-i>=0?(t(s,m-i,f),p.subVectors(n,f)):(t(s,m+i,f),p.subVectors(f,n)),a.crossVectors(h,p).normalize(),c.push(a.x,a.y,a.z),u.push(s,m)}}for(let t=0;t<r;t++)for(let r=0;r<e;r++){const e=t*m+r,o=t*m+r+1,c=(t+1)*m+r+1,u=(t+1)*m+r;s.push(e,o,u),s.push(o,c,u)}this.setIndex(s),this.setAttribute("position",new Float32BufferAttribute(o,3)),this.setAttribute("normal",new Float32BufferAttribute(c,3)),this.setAttribute("uv",new Float32BufferAttribute(u,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}}export{ParametricGeometry};