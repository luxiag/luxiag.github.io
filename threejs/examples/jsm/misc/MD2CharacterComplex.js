import{Box3,MathUtils,MeshLambertMaterial,Object3D,TextureLoader,UVMapping,SRGBColorSpace}from"three";import{MD2Loader}from"../loaders/MD2Loader.js";import{MorphBlendMesh}from"../misc/MorphBlendMesh.js";class MD2CharacterComplex{constructor(){this.scale=1,this.animationFPS=6,this.transitionFrames=15,this.maxSpeed=275,this.maxReverseSpeed=-275,this.frontAcceleration=600,this.backAcceleration=600,this.frontDecceleration=600,this.angularSpeed=2.5,this.root=new Object3D,this.meshBody=null,this.meshWeapon=null,this.controls=null,this.skinsBody=[],this.skinsWeapon=[],this.weapons=[],this.currentSkin=void 0,this.onLoadComplete=function(){},this.meshes=[],this.animations={},this.loadCounter=0,this.speed=0,this.bodyOrientation=0,this.walkSpeed=this.maxSpeed,this.crouchSpeed=.5*this.maxSpeed,this.activeAnimation=null,this.oldAnimation=null}enableShadows(e){for(let t=0;t<this.meshes.length;t++)this.meshes[t].castShadow=e,this.meshes[t].receiveShadow=e}setVisible(e){for(let t=0;t<this.meshes.length;t++)this.meshes[t].visible=e,this.meshes[t].visible=e}shareParts(e){this.animations=e.animations,this.walkSpeed=e.walkSpeed,this.crouchSpeed=e.crouchSpeed,this.skinsBody=e.skinsBody,this.skinsWeapon=e.skinsWeapon;const t=this._createPart(e.meshBody.geometry,this.skinsBody[0]);t.scale.set(this.scale,this.scale,this.scale),this.root.position.y=e.root.position.y,this.root.add(t),this.meshBody=t,this.meshes.push(t);for(let t=0;t<e.weapons.length;t++){const i=this._createPart(e.weapons[t].geometry,this.skinsWeapon[t]);i.scale.set(this.scale,this.scale,this.scale),i.visible=!1,i.name=e.weapons[t].name,this.root.add(i),this.weapons[t]=i,this.meshWeapon=i,this.meshes.push(i)}}loadParts(e){const t=this;function i(e,t){const i=new TextureLoader,a=[];for(let o=0;o<t.length;o++)a[o]=i.load(e+t[o],s),a[o].mapping=UVMapping,a[o].name=t[o],a[o].colorSpace=SRGBColorSpace;return a}function s(){t.loadCounter-=1,0===t.loadCounter&&t.onLoadComplete()}this.animations=e.animations,this.walkSpeed=e.walkSpeed,this.crouchSpeed=e.crouchSpeed,this.loadCounter=2*e.weapons.length+e.skins.length+1;const a=[];for(let t=0;t<e.weapons.length;t++)a[t]=e.weapons[t][1];this.skinsBody=i(e.baseUrl+"skins/",e.skins),this.skinsWeapon=i(e.baseUrl+"skins/",a);const o=new MD2Loader;o.load(e.baseUrl+e.body,(function(e){const i=new Box3;i.setFromBufferAttribute(e.attributes.position),t.root.position.y=-t.scale*i.min.y;const a=t._createPart(e,t.skinsBody[0]);a.scale.set(t.scale,t.scale,t.scale),t.root.add(a),t.meshBody=a,t.meshes.push(a),s()}));const h=function(e,i){return function(a){const o=t._createPart(a,t.skinsWeapon[e]);o.scale.set(t.scale,t.scale,t.scale),o.visible=!1,o.name=i,t.root.add(o),t.weapons[e]=o,t.meshWeapon=o,t.meshes.push(o),s()}};for(let t=0;t<e.weapons.length;t++)o.load(e.baseUrl+e.weapons[t][0],h(t,e.weapons[t][0]))}setPlaybackRate(e){this.meshBody&&(this.meshBody.duration=this.meshBody.baseDuration/e),this.meshWeapon&&(this.meshWeapon.duration=this.meshWeapon.baseDuration/e)}setWireframe(e){e?(this.meshBody&&(this.meshBody.material=this.meshBody.materialWireframe),this.meshWeapon&&(this.meshWeapon.material=this.meshWeapon.materialWireframe)):(this.meshBody&&(this.meshBody.material=this.meshBody.materialTexture),this.meshWeapon&&(this.meshWeapon.material=this.meshWeapon.materialTexture))}setSkin(e){this.meshBody&&!1===this.meshBody.material.wireframe&&(this.meshBody.material.map=this.skinsBody[e],this.currentSkin=e)}setWeapon(e){for(let e=0;e<this.weapons.length;e++)this.weapons[e].visible=!1;const t=this.weapons[e];t&&(t.visible=!0,this.meshWeapon=t,this.activeAnimation&&(t.playAnimation(this.activeAnimation),this.meshWeapon.setAnimationTime(this.activeAnimation,this.meshBody.getAnimationTime(this.activeAnimation))))}setAnimation(e){e!==this.activeAnimation&&e&&(this.meshBody&&(this.meshBody.setAnimationWeight(e,0),this.meshBody.playAnimation(e),this.oldAnimation=this.activeAnimation,this.activeAnimation=e,this.blendCounter=this.transitionFrames),this.meshWeapon&&(this.meshWeapon.setAnimationWeight(e,0),this.meshWeapon.playAnimation(e)))}update(e){this.controls&&this.updateMovementModel(e),this.animations&&(this.updateBehaviors(),this.updateAnimations(e))}updateAnimations(e){let t=1;this.blendCounter>0&&(t=(this.transitionFrames-this.blendCounter)/this.transitionFrames,this.blendCounter-=1),this.meshBody&&(this.meshBody.update(e),this.meshBody.setAnimationWeight(this.activeAnimation,t),this.meshBody.setAnimationWeight(this.oldAnimation,1-t)),this.meshWeapon&&(this.meshWeapon.update(e),this.meshWeapon.setAnimationWeight(this.activeAnimation,t),this.meshWeapon.setAnimationWeight(this.oldAnimation,1-t))}updateBehaviors(){const e=this.controls,t=this.animations;let i,s;e.crouch?(i=t.crouchMove,s=t.crouchIdle):(i=t.move,s=t.idle),e.jump&&(i=t.jump,s=t.jump),e.attack&&(e.crouch?(i=t.crouchAttack,s=t.crouchAttack):(i=t.attack,s=t.attack)),(e.moveForward||e.moveBackward||e.moveLeft||e.moveRight)&&this.activeAnimation!==i&&this.setAnimation(i),Math.abs(this.speed)<.2*this.maxSpeed&&!(e.moveLeft||e.moveRight||e.moveForward||e.moveBackward)&&this.activeAnimation!==s&&this.setAnimation(s),e.moveForward&&(this.meshBody&&(this.meshBody.setAnimationDirectionForward(this.activeAnimation),this.meshBody.setAnimationDirectionForward(this.oldAnimation)),this.meshWeapon&&(this.meshWeapon.setAnimationDirectionForward(this.activeAnimation),this.meshWeapon.setAnimationDirectionForward(this.oldAnimation))),e.moveBackward&&(this.meshBody&&(this.meshBody.setAnimationDirectionBackward(this.activeAnimation),this.meshBody.setAnimationDirectionBackward(this.oldAnimation)),this.meshWeapon&&(this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation),this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation)))}updateMovementModel(e){function t(e){return 1===e?1:1-Math.pow(2,-10*e)}const i=this.controls;if(i.crouch?this.maxSpeed=this.crouchSpeed:this.maxSpeed=this.walkSpeed,this.maxReverseSpeed=-this.maxSpeed,i.moveForward&&(this.speed=MathUtils.clamp(this.speed+e*this.frontAcceleration,this.maxReverseSpeed,this.maxSpeed)),i.moveBackward&&(this.speed=MathUtils.clamp(this.speed-e*this.backAcceleration,this.maxReverseSpeed,this.maxSpeed)),i.moveLeft&&(this.bodyOrientation+=e*this.angularSpeed,this.speed=MathUtils.clamp(this.speed+1*e*this.frontAcceleration,this.maxReverseSpeed,this.maxSpeed)),i.moveRight&&(this.bodyOrientation-=e*this.angularSpeed,this.speed=MathUtils.clamp(this.speed+1*e*this.frontAcceleration,this.maxReverseSpeed,this.maxSpeed)),!i.moveForward&&!i.moveBackward)if(this.speed>0){const i=t(this.speed/this.maxSpeed);this.speed=MathUtils.clamp(this.speed-i*e*this.frontDecceleration,0,this.maxSpeed)}else{const i=t(this.speed/this.maxReverseSpeed);this.speed=MathUtils.clamp(this.speed+i*e*this.backAcceleration,this.maxReverseSpeed,0)}const s=this.speed*e;this.root.position.x+=Math.sin(this.bodyOrientation)*s,this.root.position.z+=Math.cos(this.bodyOrientation)*s,this.root.rotation.y=this.bodyOrientation}_createPart(e,t){const i=new MeshLambertMaterial({color:16755200,wireframe:!0}),s=new MeshLambertMaterial({color:16777215,wireframe:!1,map:t}),a=new MorphBlendMesh(e,s);return a.rotation.y=-Math.PI/2,a.materialTexture=s,a.materialWireframe=i,a.autoCreateAnimations(this.animationFPS),a}}export{MD2CharacterComplex};