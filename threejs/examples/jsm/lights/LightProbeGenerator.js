import{Color,LightProbe,LinearSRGBColorSpace,SphericalHarmonics3,Vector3,SRGBColorSpace,NoColorSpace}from"three";class LightProbeGenerator{static fromCubeTexture(e){let t=0;const r=new Vector3,o=new Vector3,a=new Color,c=[0,0,0,0,0,0,0,0,0],n=new SphericalHarmonics3,s=n.coefficients;for(let n=0;n<6;n++){const i=e.image[n],l=i.width,h=i.height,g=document.createElement("canvas");g.width=l,g.height=h;const b=g.getContext("2d");b.drawImage(i,0,0,l,h);const p=b.getImageData(0,0,l,h),w=p.data,S=p.width,f=2/S;for(let i=0,l=w.length;i<l;i+=4){a.setRGB(w[i]/255,w[i+1]/255,w[i+2]/255),convertColorToLinear(a,e.colorSpace);const l=i/4,h=(l%S+.5)*f-1,g=1-(Math.floor(l/S)+.5)*f;switch(n){case 0:r.set(-1,g,-h);break;case 1:r.set(1,g,h);break;case 2:r.set(-h,1,-g);break;case 3:r.set(-h,-1,g);break;case 4:r.set(-h,g,1);break;case 5:r.set(h,g,-1)}const b=r.lengthSq(),p=4/(Math.sqrt(b)*b);t+=p,o.copy(r).normalize(),SphericalHarmonics3.getBasisAt(o,c);for(let e=0;e<9;e++)s[e].x+=c[e]*a.r*p,s[e].y+=c[e]*a.g*p,s[e].z+=c[e]*a.b*p}}const i=4*Math.PI/t;for(let e=0;e<9;e++)s[e].x*=i,s[e].y*=i,s[e].z*=i;return new LightProbe(n)}static fromCubeRenderTarget(e,t){let r=0;const o=new Vector3,a=new Vector3,c=new Color,n=[0,0,0,0,0,0,0,0,0],s=new SphericalHarmonics3,i=s.coefficients;for(let s=0;s<6;s++){const l=t.width,h=new Uint8Array(l*l*4);e.readRenderTargetPixels(t,0,0,l,l,h,s);const g=2/l;for(let e=0,b=h.length;e<b;e+=4){c.setRGB(h[e]/255,h[e+1]/255,h[e+2]/255),convertColorToLinear(c,t.texture.colorSpace);const b=e/4,p=(b%l+.5)*g-1,w=1-(Math.floor(b/l)+.5)*g;switch(s){case 0:o.set(1,w,-p);break;case 1:o.set(-1,w,p);break;case 2:o.set(p,1,-w);break;case 3:o.set(p,-1,w);break;case 4:o.set(p,w,1);break;case 5:o.set(-p,w,-1)}const S=o.lengthSq(),f=4/(Math.sqrt(S)*S);r+=f,a.copy(o).normalize(),SphericalHarmonics3.getBasisAt(a,n);for(let e=0;e<9;e++)i[e].x+=n[e]*c.r*f,i[e].y+=n[e]*c.g*f,i[e].z+=n[e]*c.b*f}}const l=4*Math.PI/r;for(let e=0;e<9;e++)i[e].x*=l,i[e].y*=l,i[e].z*=l;return new LightProbe(s)}}function convertColorToLinear(e,t){switch(t){case SRGBColorSpace:e.convertSRGBToLinear();break;case LinearSRGBColorSpace:case NoColorSpace:break;default:console.warn("WARNING: LightProbeGenerator convertColorToLinear() encountered an unsupported color space.")}return e}export{LightProbeGenerator};