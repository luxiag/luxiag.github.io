define(["./AttributeCompression-48e336db","./Matrix3-81054f0f","./Math-2ce22ee9","./Matrix2-413c4048","./createTaskProcessorWorker","./ComponentDatatype-ab629b88","./defaultValue-f6d5e6da","./WebGLConstants-7f557f93","./RuntimeError-9b4ce3fb"],(function(e,t,a,r,n,o,i,s,c){"use strict";const u=32767,p=new t.Cartographic,f=new t.Cartesian3,l=new r.Rectangle,m=new t.Ellipsoid,b={min:void 0,max:void 0};return n((function(n,o){const i=new Uint16Array(n.positions);!function(e){e=new Float64Array(e);let a=0;b.min=e[a++],b.max=e[a++],r.Rectangle.unpack(e,a,l),a+=r.Rectangle.packedLength,t.Ellipsoid.unpack(e,a,m)}(n.packedBuffer);const s=l,c=m,d=b.min,h=b.max,C=i.length/3,g=i.subarray(0,C),w=i.subarray(C,2*C),k=i.subarray(2*C,3*C);e.AttributeCompression.zigZagDeltaDecode(g,w,k);const y=new Float64Array(i.length);for(let e=0;e<C;++e){const r=g[e],n=w[e],o=k[e],i=a.CesiumMath.lerp(s.west,s.east,r/u),l=a.CesiumMath.lerp(s.south,s.north,n/u),m=a.CesiumMath.lerp(d,h,o/u),b=t.Cartographic.fromRadians(i,l,m,p),C=c.cartographicToCartesian(b,f);t.Cartesian3.pack(C,y,3*e)}return o.push(y.buffer),{positions:y.buffer}}))}));