"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1555],{2481:(e,s,n)=>{n.r(s),n.d(s,{default:()=>o});var a=n(1534);const t=[(0,a.uE)('<ul><li>仅从名字就能知道一个 CSS 选择器具体做什么</li><li>从名字能大致清楚一个选择器可以在哪里使用</li><li>从 CSS 类的名称可以看出它们之间的联系</li></ul><h2 id="b代表区块-block" tabindex="-1"><a class="header-anchor" href="#b代表区块-block" aria-hidden="true">#</a> <strong>B代表区块(Block)</strong></h2><p>在实际中，这里『区块』可以表示一个网站导航、页眉、页脚或者其他一些设计区块。</p><p>Encapsulates a standalone entity that is meaningful on its own. While blocks can be nested and interact with each other, semantically they remain equal; there is no precedence or hierarchy. Holistic entities without DOM representation (such as controllers or models) can be blocks as well.</p><p><code>Naming</code></p><p>Block names may consist of Latin letters, digits, and dashes. To form a CSS class, add a short prefix for namespacing: <code>.block</code></p><p><code>html</code></p><p>Any DOM node can be a block if it accepts a class name.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> &lt;div class=&quot;block&quot;&gt;...&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>css</code></p><ul><li>Use class name selector only</li><li>No tag name or ids</li><li>No dependency on other blocks/elements on a page</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> .block { color: #042; }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="e代表元素-elements" tabindex="-1"><a class="header-anchor" href="#e代表元素-elements" aria-hidden="true">#</a> <strong>E代表元素(Elements)</strong></h2><p>Parts of a block and have no standalone meaning. Any element is semantically tied to its block.</p><p><strong>Naming</strong></p><p>Element names may consist of Latin letters, digits, dashes and underscores. CSS class is formed as block name plus two underscores plus element name: <code>.block__elem</code></p><p><strong>HTML</strong></p><p>Any DOM node within a block can be an element. Within a given block, all elements are semantically equal.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> &lt;div class=&quot;block&quot;&gt;\n       ...\n       &lt;span class=&quot;block__elem&quot;&gt;&lt;/span&gt;\n     &lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>CSS</strong></p><ul><li>Use class name selector only</li><li>No tag name or ids</li><li>No dependency on other blocks/elements on a page</li></ul><p><strong>Good</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> .block__elem { color: #042; }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Bad</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> .block .block__elem { color: #042; }\n     div.block__elem { color: #042; }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="m代表修饰符-modifiers" tabindex="-1"><a class="header-anchor" href="#m代表修饰符-modifiers" aria-hidden="true">#</a> <strong>M代表修饰符(Modifiers)</strong></h2><p>Flags on blocks or elements. Use them to change appearance, behavior or state.</p><p><strong>Naming</strong></p><p>Modifier names may consist of Latin letters, digits, dashes and underscores. CSS class is formed as block’s or element’s name plus two dashes: <code>.block--mod</code> or <code>.block__elem--mod</code> and <code>.block--color-black</code> with <code>.block--color-red</code>. Spaces in complicated modifiers are replaced by dash.</p><p><strong>HTML</strong></p><p>Modifier is an extra class name which you add to a block/element DOM node. Add modifier classes only to blocks/elements they modify, and keep the original class:</p><p><strong>Good</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> &lt;div class=&quot;block block--mod&quot;&gt;...&lt;/div&gt;\n     &lt;div class=&quot;block block--size-big\n         block--shadow-yes&quot;&gt;...&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Bad</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> &lt;div class=&quot;block--mod&quot;&gt;...&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>CSS</strong></p><p>Use modifier class name as selector:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> .block--hidden { }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To alter elements based on a block-level modifier:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> .block--mod .block__elem { }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Element modifier:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> .block__elem--mod { }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Example</strong></p><p>Suppose you have block form with modifiers <code>theme: &quot;xmas&quot;</code> and <code>simple: true</code> and with elements <code>input</code> and <code>submit</code>, and element <code>submit</code> with its own modifier <code>disabled: true</code> for not submitting form while it is not filled:</p><p><strong>HTML</strong></p><p>/səbˈmɪt/</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form form--theme-xmas form--simple<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form__input<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>\n     <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form__submit form__submit--disabled<span class="token punctuation">&quot;</span></span>\n     <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>CSS</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.form</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n <span class="token selector">.form--theme-xmas</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n <span class="token selector">.form--simple</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n <span class="token selector">.form__input</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n <span class="token selector">.form__submit</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n <span class="token selector">.form__submit--disabled</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',49)],l={},o=(0,n(1935).Z)(l,[["render",function(e,s){return(0,a.wg)(),(0,a.iD)("div",null,t)}]])},1935:(e,s)=>{s.Z=(e,s)=>{const n=e.__vccOpts||e;for(const[e,a]of s)n[e]=a;return n}},3398:(e,s,n)=>{n.r(s),n.d(s,{data:()=>a});const a=JSON.parse('{"key":"v-5580c294","path":"/css/bem.html","title":"BEM规范","lang":"zh-CN","frontmatter":{"title":"BEM规范","date":"2021-11-22T00:00:00.000Z","category":["CSS"],"summary":"仅从名字就能知道一个 CSS 选择器具体做什么; 从名字能大致清楚一个选择器可以在哪里使用; 从 CSS 类的名称可以看出它们之间的联系; B代表区块(Block) 在实际中，这里『区块』可以表示一个网站导航、页眉、页脚或者其他一些设计区块。 Encapsulates a standalone entity that is meaningful on its","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/css/bem.html"}],["meta",{"property":"og:title","content":"BEM规范"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-30T06:28:03.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2021-11-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-30T06:28:03.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"B代表区块(Block)","slug":"b代表区块-block","link":"#b代表区块-block","children":[]},{"level":2,"title":"E代表元素(Elements)","slug":"e代表元素-elements","link":"#e代表元素-elements","children":[]},{"level":2,"title":"M代表修饰符(Modifiers)","slug":"m代表修饰符-modifiers","link":"#m代表修饰符-modifiers","children":[]}],"git":{"createdTime":1665145185000,"updatedTime":1672381683000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1},{"name":"luxiang","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":1.83,"words":549},"filePathRelative":"css/bem.md","localizedDate":"2021年11月22日"}')}}]);