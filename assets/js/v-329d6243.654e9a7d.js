"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3413],{7047:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var t=a(1534);const p=a.p+"assets/img/958003305011022323.27db920b.png",e=a.p+"assets/img/601000909011132323.cf423311.png",o=a.p+"assets/img/593003309011132323.c3e0a233.png",c=a.p+"assets/img/978003409011132323.5674437d.png",l=a.p+"assets/img/380003509011132323.d36d7cfb.png",u=a.p+"assets/img/795003809011132323.aa41874f.png",i=[(0,t.uE)('<h2 id="进程架构" tabindex="-1"><a class="header-anchor" href="#进程架构" aria-hidden="true">#</a> 进程架构</h2><ul><li>当启动一个程序时，操作系统会为该程序分配内存，用来存放代码、运行过程中的数据，这样的运行环境叫做进程</li><li>一个进程可以启动和管理多个线程，线程之间可以共享进行数据，任何一个线程出错都可能会导致进程崩溃</li></ul><h3 id="chrome-的进程架构" tabindex="-1"><a class="header-anchor" href="#chrome-的进程架构" aria-hidden="true">#</a> Chrome 的进程架构</h3><ul><li>浏览器主进程 负责界面显示、用户交互和子进程管理</li><li>渲染进程 排版引擎和 V8 引擎运行在该进程中，负责把 HTML、CSS 和 JavaScript 转变成网页</li><li>网络进程 用来加载网络资源的</li><li>GPU 进程 用来实现 CSS3 和 3D 效果</li></ul><h3 id="html-加载" tabindex="-1"><a class="header-anchor" href="#html-加载" aria-hidden="true">#</a> HTML 加载</h3><ul><li>主进程接收用户输入的 URL</li><li>主进程把该 URL 转发给网络进程</li><li>在网络进程中发起 URL 请求</li><li>网络进程接收到响应头数据并转发给主进程</li><li>主进程发送提交导航消息到渲染进程</li><li>渲染进程开始从网络进程接收 HTML 数据</li><li>HTML 接收接受完毕后通知主进程确认导航</li><li>渲染进程开始 HTML 解析和加载子资源</li><li>HTML 解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成</li></ul><p><img src="'+p+'" alt=""></p><h2 id="渲染过程" tabindex="-1"><a class="header-anchor" href="#渲染过程" aria-hidden="true">#</a> 渲染过程</h2><ul><li>渲染进程把 HTML 转变为 DOM 树型结构</li><li>渲染进程把 CSS 文本转为浏览器中的 stylesheet</li><li>通过 stylesheet 计算出 DOM 节点的样式</li><li>根据 DOM 树创建布局树</li><li>并计算各个元素的布局信息</li><li>根据布局树生成分层树</li><li>根据分层树进行生成绘制步骤</li><li>把绘制步骤交给渲染进程中的合成线程进行合成</li><li>合成线程将图层分成图块(tile)</li><li>合成线程会把分好的图块发给栅格化线程池，栅格化线程会把图片(tile)转化为位图</li><li>而其实栅格化线程在工作的时候会把栅格化的工作交给 GPU 进程来完成，最终生成的位图就保存在了 GPU 内存中</li><li>当所有的图块都光栅化之后合成线程会发送绘制图块的命令给浏览器主进程</li><li>浏览器主进程然后会从 GPU 内存中取出位图显示到页面上</li></ul><h3 id="html-转-dom-树" tabindex="-1"><a class="header-anchor" href="#html-转-dom-树" aria-hidden="true">#</a> HTML 转 DOM 树</h3><ul><li>浏览器中的 HTML 解析器可以把 HTML 字符串转换成 DOM 结构</li><li>HTML 解析器边接收网络数据边解析 HTML</li><li>解析 DOM <ul><li>HTML 字符串转 Token</li><li>Token 栈用来维护节点之间的父子关系，Token 会依次压入栈中</li><li>如果是开始标签，把 Token 压入栈中并且创建新的 DOM 节点并添加到父节点的 children 中</li><li>如果是文本 Token，则把文本节点添加到栈顶元素的 children 中，文本 Token 不需要入栈</li><li>如果是结束标签，此开始标签出栈</li></ul></li></ul><h3 id="css-转-stylesheet" tabindex="-1"><a class="header-anchor" href="#css-转-stylesheet" aria-hidden="true">#</a> CSS 转 stylesheet</h3><ul><li>渲染进程把 CSS 文本转为浏览器中的 stylesheet</li><li>CSS 来源可能有 link 标签、style 标签和 style 行内样式</li><li>渲染引擎会把 CSS 转换为 document.styleSheets</li></ul><h3 id="计算出-dom-节点的样式" tabindex="-1"><a class="header-anchor" href="#计算出-dom-节点的样式" aria-hidden="true">#</a> 计算出 DOM 节点的样式</h3><ul><li>根据 CSS 的继承和层叠规则计算 DOM 节点的样式</li><li>DOM 节点的样式保存在了 ComputedStyle 中</li></ul><h3 id="构建布局树" tabindex="-1"><a class="header-anchor" href="#构建布局树" aria-hidden="true">#</a> 构建布局树</h3><ul><li>创建布局树</li><li>创建一棵只包含可见元素的布局树 <img src="'+e+'" alt=""></li></ul><h3 id="计算布局" tabindex="-1"><a class="header-anchor" href="#计算布局" aria-hidden="true">#</a> 计算布局</h3><p>计算各个元素的布局</p><details class="custom-container details"><summary>request</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> htmlparser2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;htmlparser2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> network <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./network.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./render.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>\n<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/** 浏览器主进程 **/</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//2.主进程把该URL转发给网络进程</span>\n    network<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//开始准备渲染页面</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;prepareRender&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//5.主进程发送提交导航消息到渲染进程</span>\n    render<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;commitNavigation&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;confirmNavigation&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;confirmNavigation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;Load&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Load&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/** 网络进程 **/</span>\nnetwork<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//3.在网络进程中发起URL请求</span>\n    <span class="token keyword">let</span> request <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">//4.网络进程接收到响应头数据并转发给主进程</span>\n        main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;prepareRender&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//结束请求体</span>\n    request<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/** 渲染进程 **/</span>\n<span class="token comment">//6.渲染进程开始从网络进程接收HTML数据</span>\nrender<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;commitNavigation&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> headers <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> contentType <span class="token operator">=</span> headers<span class="token punctuation">[</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;text/html&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//1. 渲染进程把HTML转变为DOM树型结构</span>\n        <span class="token keyword">const</span> document <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;document&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> cssRules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> tokenStack <span class="token operator">=</span> <span class="token punctuation">[</span>document<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">htmlparser2<span class="token punctuation">.</span>Parser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token function">onopentag</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> attributes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> parent <span class="token operator">=</span> tokenStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>\n                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;element&#39;</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">tagName</span><span class="token operator">:</span> name<span class="token punctuation">,</span>\n                    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                    attributes<span class="token punctuation">,</span>\n                    parent\n                <span class="token punctuation">}</span>\n                parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                tokenStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function">ontext</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\r\\n\\s]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">const</span> parent <span class="token operator">=</span> tokenStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">const</span> textNode <span class="token operator">=</span> <span class="token punctuation">{</span>\n                        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>\n                        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                        <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                        parent<span class="token punctuation">,</span>\n                        text\n                    <span class="token punctuation">}</span>\n                    parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token doc-comment comment">/**\n             * 在预解析阶段，HTML发现CSS和JS文件会并行下载，等全部下载后先把CSS生成CSSOM，然后再执行JS脚本\n             * 然后再构建DOM树，重新计算样式，构建布局树，绘制页面\n             * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">tagname</span>\n             */</span>\n            <span class="token function">onclosetag</span><span class="token punctuation">(</span><span class="token parameter">tagname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">switch</span> <span class="token punctuation">(</span>tagname<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">case</span> <span class="token string">&#39;style&#39;</span><span class="token operator">:</span>\n                        <span class="token keyword">const</span> styleToken <span class="token operator">=</span> tokenStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">const</span> cssAST <span class="token operator">=</span> css<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>styleToken<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        cssRules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>cssAST<span class="token punctuation">.</span>stylesheet<span class="token punctuation">.</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">break</span><span class="token punctuation">;</span>\n                    <span class="token keyword">default</span><span class="token operator">:</span>\n                        <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                tokenStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//开始接收响应体</span>\n        response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">//8.渲染进程开始HTML解析和加载子资源</span>\n            <span class="token comment">//网络进程加载了多少数据，HTML 解析器便解析多少数据。</span>\n            parser<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">//7.HTML接收接受完毕后通知主进程确认导航</span>\n            main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;confirmNavigation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//3. 通过stylesheet计算出DOM节点的样式</span>\n            <span class="token function">recalculateStyle</span><span class="token punctuation">(</span>cssRules<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span>\n           <span class="token comment">//4. 根据DOM树创建布局树,就是复制DOM结构并过滤掉不显示的元素</span>\n           <span class="token keyword">const</span> html <span class="token operator">=</span> document<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n           <span class="token keyword">const</span> body <span class="token operator">=</span> html<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n           <span class="token keyword">const</span> layoutTree <span class="token operator">=</span> <span class="token function">createLayout</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>          <span class="token comment">//5.并计算各个元素的布局信息</span>\n<span class="token operator">+</span>          <span class="token function">updateLayoutTree</span><span class="token punctuation">(</span>layoutTree<span class="token punctuation">)</span><span class="token punctuation">;</span>\n           <span class="token comment">//触发DOMContentLoaded事件</span>\n           main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n           <span class="token comment">//9.HTML解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成</span>\n           main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;Load&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">+</span><span class="token keyword">function</span> <span class="token function">updateLayoutTree</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> parentTop <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>    <span class="token keyword">const</span> computedStyle <span class="token operator">=</span> element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">;</span>\n<span class="token operator">+</span>    element<span class="token punctuation">.</span>layout <span class="token operator">=</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>        top<span class="token operator">:</span> top <span class="token operator">+</span> parentTop<span class="token punctuation">,</span>\n<span class="token operator">+</span>        left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n<span class="token operator">+</span>        width<span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n<span class="token operator">+</span>        height<span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>height<span class="token punctuation">,</span>\n<span class="token operator">+</span>        background<span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>background<span class="token punctuation">,</span>\n<span class="token operator">+</span>        color<span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>color\n<span class="token operator">+</span>    <span class="token punctuation">}</span>\n<span class="token operator">+</span>    <span class="token keyword">let</span> childTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>        <span class="token function">updateLayoutTree</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> childTop<span class="token punctuation">,</span> element<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>        childTop <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>computedStyle<span class="token punctuation">.</span>height <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createLayout</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    element<span class="token punctuation">.</span>children <span class="token operator">=</span> element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isShow<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">createLayout</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isShow</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">&#39;head&#39;</span> <span class="token operator">||</span> element<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> attributes <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>\n    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> attributes <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            attributes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attribute</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> <span class="token punctuation">[</span>property<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> attribute<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">===</span> <span class="token string">&#39;display&#39;</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">===</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> isShow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">recalculateStyle</span><span class="token punctuation">(</span><span class="token parameter">cssRules<span class="token punctuation">,</span> element<span class="token punctuation">,</span> parentComputedStyle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> attributes <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>computedStyle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span>parentComputedStyle<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 计算样式</span>\n    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">//stylesheets</span>\n        cssRules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">rule</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> selector <span class="token operator">=</span> rule<span class="token punctuation">.</span>selectors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>selector <span class="token operator">==</span> <span class="token string">&#39;#&#39;</span> <span class="token operator">+</span> value <span class="token operator">&amp;&amp;</span> key <span class="token operator">==</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>selector <span class="token operator">==</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> value <span class="token operator">&amp;&amp;</span> key <span class="token operator">==</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                rule<span class="token punctuation">.</span>declarations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> property<span class="token punctuation">,</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                    element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token comment">//行内样式</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> attributes <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            attributes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attribute</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> <span class="token punctuation">[</span>property<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> attribute<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">recalculateStyle</span><span class="token punctuation">(</span>cssRules<span class="token punctuation">,</span> child<span class="token punctuation">,</span>element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//1.主进程接收用户输入的URL</span>\nmain<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/index.html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="生成分层树" tabindex="-1"><a class="header-anchor" href="#生成分层树" aria-hidden="true">#</a> 生成分层树</h3><ul><li>根据布局树生成分层树</li><li>渲染引擎需要为某些节点生成单独的图层，并组合成图层树 <ul><li>z-index</li><li>绝对定位和固定定位</li><li>滤镜</li><li>透明</li><li>裁剪</li></ul></li><li>这些图层合成最终的页面</li></ul><details class="custom-container details"><summary>request</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> htmlparser2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;htmlparser2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> network <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./network.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./render.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>\n<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/** 浏览器主进程 **/</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//2.主进程把该URL转发给网络进程</span>\n    network<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//开始准备渲染页面</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;prepareRender&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//5.主进程发送提交导航消息到渲染进程</span>\n    render<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;commitNavigation&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;confirmNavigation&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;confirmNavigation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;Load&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Load&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/** 网络进程 **/</span>\nnetwork<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//3.在网络进程中发起URL请求</span>\n    <span class="token keyword">let</span> request <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">//4.网络进程接收到响应头数据并转发给主进程</span>\n        main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;prepareRender&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//结束请求体</span>\n    request<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/** 渲染进程 **/</span>\n<span class="token comment">//6.渲染进程开始从网络进程接收HTML数据</span>\nrender<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;commitNavigation&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> headers <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> contentType <span class="token operator">=</span> headers<span class="token punctuation">[</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;text/html&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//1. 渲染进程把HTML转变为DOM树型结构</span>\n        <span class="token keyword">const</span> document <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;document&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> cssRules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> tokenStack <span class="token operator">=</span> <span class="token punctuation">[</span>document<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">htmlparser2<span class="token punctuation">.</span>Parser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token function">onopentag</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> attributes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> parent <span class="token operator">=</span> tokenStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>\n                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;element&#39;</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">tagName</span><span class="token operator">:</span> name<span class="token punctuation">,</span>\n                    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                    attributes<span class="token punctuation">,</span>\n                    parent\n                <span class="token punctuation">}</span>\n                parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                tokenStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function">ontext</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\r\\n\\s]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">const</span> parent <span class="token operator">=</span> tokenStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">const</span> textNode <span class="token operator">=</span> <span class="token punctuation">{</span>\n                        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>\n                        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                        <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                        parent<span class="token punctuation">,</span>\n                        text\n                    <span class="token punctuation">}</span>\n                    parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token doc-comment comment">/**\n             * 在预解析阶段，HTML发现CSS和JS文件会并行下载，等全部下载后先把CSS生成CSSOM，然后再执行JS脚本\n             * 然后再构建DOM树，重新计算样式，构建布局树，绘制页面\n             * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">tagname</span>\n             */</span>\n            <span class="token function">onclosetag</span><span class="token punctuation">(</span><span class="token parameter">tagname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">switch</span> <span class="token punctuation">(</span>tagname<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">case</span> <span class="token string">&#39;style&#39;</span><span class="token operator">:</span>\n                        <span class="token keyword">const</span> styleToken <span class="token operator">=</span> tokenStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">const</span> cssAST <span class="token operator">=</span> css<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>styleToken<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        cssRules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>cssAST<span class="token punctuation">.</span>stylesheet<span class="token punctuation">.</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">break</span><span class="token punctuation">;</span>\n                    <span class="token keyword">default</span><span class="token operator">:</span>\n                        <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                tokenStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//开始接收响应体</span>\n        response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">//8.渲染进程开始HTML解析和加载子资源</span>\n            <span class="token comment">//网络进程加载了多少数据，HTML 解析器便解析多少数据。</span>\n            parser<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">//7.HTML接收接受完毕后通知主进程确认导航</span>\n            main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;confirmNavigation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//3. 通过stylesheet计算出DOM节点的样式</span>\n            <span class="token function">recalculateStyle</span><span class="token punctuation">(</span>cssRules<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//4. 根据DOM树创建布局树,就是复制DOM结构并过滤掉不显示的元素</span>\n            <span class="token keyword">const</span> html <span class="token operator">=</span> document<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> body <span class="token operator">=</span> html<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> layoutTree <span class="token operator">=</span> <span class="token function">createLayout</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//5.并计算各个元素的布局信息</span>\n            <span class="token function">updateLayoutTree</span><span class="token punctuation">(</span>layoutTree<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>           <span class="token comment">//6. 根据布局树生成分层树</span>\n<span class="token operator">+</span>           <span class="token keyword">const</span> layers <span class="token operator">=</span> <span class="token punctuation">[</span>layoutTree<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>           <span class="token function">createLayerTree</span><span class="token punctuation">(</span>layoutTree<span class="token punctuation">,</span> layers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>layers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//触发DOMContentLoaded事件</span>\n            main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//9.HTML解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成</span>\n            main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;Load&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">+</span><span class="token keyword">function</span> <span class="token function">createLayerTree</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> layers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>    element<span class="token punctuation">.</span>children <span class="token operator">=</span> element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">createNewLayer</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> layers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">createLayerTree</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> layers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>    <span class="token keyword">return</span> layers<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token punctuation">}</span>\n<span class="token operator">+</span><span class="token keyword">function</span> <span class="token function">createNewLayer</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> layers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>    <span class="token keyword">let</span> created <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>    <span class="token keyword">const</span> attributes <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>\n<span class="token operator">+</span>    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>            <span class="token keyword">const</span> attributes <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>            attributes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attribute</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>                <span class="token keyword">const</span> <span class="token punctuation">[</span>property<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> attribute<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">===</span> <span class="token string">&#39;position&#39;</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">===</span> <span class="token string">&#39;absolute&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>                    <span class="token function">updateLayoutTree</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对单独的层重新计算位置</span>\n<span class="token operator">+</span>                    layers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>                    created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>                <span class="token punctuation">}</span>\n<span class="token operator">+</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>        <span class="token punctuation">}</span>\n<span class="token operator">+</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>    <span class="token keyword">return</span> created<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">updateLayoutTree</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> parentTop <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> computedStyle <span class="token operator">=</span> element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>layout <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">top</span><span class="token operator">:</span> top <span class="token operator">+</span> parentTop<span class="token punctuation">,</span>\n        <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">width</span><span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n        <span class="token literal-property property">height</span><span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>height<span class="token punctuation">,</span>\n        <span class="token literal-property property">background</span><span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>background<span class="token punctuation">,</span>\n        <span class="token literal-property property">color</span><span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>color\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> childTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">updateLayoutTree</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> childTop<span class="token punctuation">,</span> element<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        childTop <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>computedStyle<span class="token punctuation">.</span>height <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createLayout</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    element<span class="token punctuation">.</span>children <span class="token operator">=</span> element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isShow<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">createLayout</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isShow</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">&#39;head&#39;</span> <span class="token operator">||</span> element<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> attributes <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>\n    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> attributes <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            attributes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attribute</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> <span class="token punctuation">[</span>property<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> attribute<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">===</span> <span class="token string">&#39;display&#39;</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">===</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> isShow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">recalculateStyle</span><span class="token punctuation">(</span><span class="token parameter">cssRules<span class="token punctuation">,</span> element<span class="token punctuation">,</span> parentComputedStyle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> attributes <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>computedStyle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span>parentComputedStyle<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 计算样式</span>\n    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">//stylesheets</span>\n        cssRules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">rule</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> selector <span class="token operator">=</span> rule<span class="token punctuation">.</span>selectors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>selector <span class="token operator">==</span> <span class="token string">&#39;#&#39;</span> <span class="token operator">+</span> value <span class="token operator">&amp;&amp;</span> key <span class="token operator">==</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>selector <span class="token operator">==</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> value <span class="token operator">&amp;&amp;</span> key <span class="token operator">==</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                rule<span class="token punctuation">.</span>declarations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> property<span class="token punctuation">,</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                    element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token comment">//行内样式</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> attributes <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            attributes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attribute</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> <span class="token punctuation">[</span>property<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> attribute<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">recalculateStyle</span><span class="token punctuation">(</span>cssRules<span class="token punctuation">,</span> child<span class="token punctuation">,</span>element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//1.主进程接收用户输入的URL</span>\nmain<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/index.html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="绘制" tabindex="-1"><a class="header-anchor" href="#绘制" aria-hidden="true">#</a> 绘制</h3><ul><li>根据分层树进行生成绘制步骤复合图层</li><li>每个图层会拆分成多个绘制指令，这些指令组合在一起成为绘制列表</li></ul><details class="custom-container details"><summary>request</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> htmlparser2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;htmlparser2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> network <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./network.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./render.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>\n<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/** 浏览器主进程 **/</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//2.主进程把该URL转发给网络进程</span>\n    network<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//开始准备渲染页面</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;prepareRender&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//5.主进程发送提交导航消息到渲染进程</span>\n    render<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;commitNavigation&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;confirmNavigation&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;confirmNavigation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nmain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;Load&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Load&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/** 网络进程 **/</span>\nnetwork<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//3.在网络进程中发起URL请求</span>\n    <span class="token keyword">let</span> request <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">//4.网络进程接收到响应头数据并转发给主进程</span>\n        main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;prepareRender&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//结束请求体</span>\n    request<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/** 渲染进程 **/</span>\n<span class="token comment">//6.渲染进程开始从网络进程接收HTML数据</span>\nrender<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;commitNavigation&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> headers <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> contentType <span class="token operator">=</span> headers<span class="token punctuation">[</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;text/html&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//1. 渲染进程把HTML转变为DOM树型结构</span>\n        <span class="token keyword">const</span> document <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;document&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> cssRules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> tokenStack <span class="token operator">=</span> <span class="token punctuation">[</span>document<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">htmlparser2<span class="token punctuation">.</span>Parser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token function">onopentag</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> attributes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> parent <span class="token operator">=</span> tokenStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>\n                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;element&#39;</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">tagName</span><span class="token operator">:</span> name<span class="token punctuation">,</span>\n                    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                    attributes<span class="token punctuation">,</span>\n                    parent\n                <span class="token punctuation">}</span>\n                parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                tokenStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function">ontext</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\r\\n\\s]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">const</span> parent <span class="token operator">=</span> tokenStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">const</span> textNode <span class="token operator">=</span> <span class="token punctuation">{</span>\n                        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>\n                        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                        <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                        parent<span class="token punctuation">,</span>\n                        text\n                    <span class="token punctuation">}</span>\n                    parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token doc-comment comment">/**\n             * 在预解析阶段，HTML发现CSS和JS文件会并行下载，等全部下载后先把CSS生成CSSOM，然后再执行JS脚本\n             * 然后再构建DOM树，重新计算样式，构建布局树，绘制页面\n             * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">tagname</span>\n             */</span>\n            <span class="token function">onclosetag</span><span class="token punctuation">(</span><span class="token parameter">tagname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">switch</span> <span class="token punctuation">(</span>tagname<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">case</span> <span class="token string">&#39;style&#39;</span><span class="token operator">:</span>\n                        <span class="token keyword">const</span> styleToken <span class="token operator">=</span> tokenStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">const</span> cssAST <span class="token operator">=</span> css<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>styleToken<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        cssRules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>cssAST<span class="token punctuation">.</span>stylesheet<span class="token punctuation">.</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">break</span><span class="token punctuation">;</span>\n                    <span class="token keyword">default</span><span class="token operator">:</span>\n                        <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                tokenStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//开始接收响应体</span>\n        response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">//8.渲染进程开始HTML解析和加载子资源</span>\n            <span class="token comment">//网络进程加载了多少数据，HTML 解析器便解析多少数据。</span>\n            parser<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">//7.HTML接收接受完毕后通知主进程确认导航</span>\n            main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;confirmNavigation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//3. 通过stylesheet计算出DOM节点的样式</span>\n            <span class="token function">recalculateStyle</span><span class="token punctuation">(</span>cssRules<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//4. 根据DOM树创建布局树,就是复制DOM结构并过滤掉不显示的元素</span>\n            <span class="token keyword">const</span> html <span class="token operator">=</span> document<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> body <span class="token operator">=</span> html<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> layoutTree <span class="token operator">=</span> <span class="token function">createLayout</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//5.并计算各个元素的布局信息</span>\n            <span class="token function">updateLayoutTree</span><span class="token punctuation">(</span>layoutTree<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//6. 根据布局树生成分层树</span>\n            <span class="token keyword">const</span> layers <span class="token operator">=</span> <span class="token punctuation">[</span>layoutTree<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token function">createLayerTree</span><span class="token punctuation">(</span>layoutTree<span class="token punctuation">,</span> layers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>           <span class="token comment">//7. 根据分层树进行生成绘制步骤并复合图层</span>\n<span class="token operator">+</span>           <span class="token keyword">const</span> paintSteps <span class="token operator">=</span> <span class="token function">compositeLayers</span><span class="token punctuation">(</span>layers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paintSteps<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\r\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//触发DOMContentLoaded事件</span>\n            main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//9.HTML解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成</span>\n            main<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;Load&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">+</span><span class="token keyword">function</span> <span class="token function">compositeLayers</span><span class="token punctuation">(</span><span class="token parameter">layers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>    <span class="token comment">//10.合成线程会把分好的图块发给栅格化线程池，栅格化线程会把图片(tile)转化为位图</span>\n<span class="token operator">+</span>    <span class="token keyword">return</span> layers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">layout</span> <span class="token operator">=&gt;</span> <span class="token function">paint</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token punctuation">}</span>\n<span class="token operator">+</span><span class="token keyword">function</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> paintSteps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> background <span class="token operator">=</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>layout<span class="token punctuation">;</span>\n<span class="token operator">+</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>        paintSteps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ctx.font = &#39;20px Impact;&#39;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>        paintSteps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ctx.strokeStyle = &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>        paintSteps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ctx.strokeText(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>element<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^\\s+|\\s+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>left<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>top <span class="token operator">+</span> <span class="token number">20</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>        paintSteps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ctx.fillStyle=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>background<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>        paintSteps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ctx.fillRect(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>left<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>top<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">parseInt</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">parseInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>    <span class="token punctuation">}</span>\n<span class="token operator">+</span>    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">paint</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> paintSteps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">+</span>    <span class="token keyword">return</span> paintSteps<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createLayerTree</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> layers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    element<span class="token punctuation">.</span>children <span class="token operator">=</span> element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">createNewLayer</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> layers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">createLayerTree</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> layers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> layers<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createNewLayer</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> layers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> created <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> attributes <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>\n    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> attributes <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            attributes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attribute</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> <span class="token punctuation">[</span>property<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> attribute<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">===</span> <span class="token string">&#39;position&#39;</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">===</span> <span class="token string">&#39;absolute&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token function">updateLayoutTree</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对单独的层重新计算位置</span>\n                    layers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> created<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">updateLayoutTree</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> parentTop <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> computedStyle <span class="token operator">=</span> element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>layout <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">top</span><span class="token operator">:</span> top <span class="token operator">+</span> parentTop<span class="token punctuation">,</span>\n        <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">width</span><span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n        <span class="token literal-property property">height</span><span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>height<span class="token punctuation">,</span>\n        <span class="token literal-property property">background</span><span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>background<span class="token punctuation">,</span>\n        <span class="token literal-property property">color</span><span class="token operator">:</span> computedStyle<span class="token punctuation">.</span>color\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> childTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">updateLayoutTree</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> childTop<span class="token punctuation">,</span> element<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        childTop <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>computedStyle<span class="token punctuation">.</span>height <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createLayout</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    element<span class="token punctuation">.</span>children <span class="token operator">=</span> element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isShow<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">createLayout</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isShow</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">&#39;head&#39;</span> <span class="token operator">||</span> element<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> attributes <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>\n    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> attributes <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            attributes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attribute</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> <span class="token punctuation">[</span>property<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> attribute<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">===</span> <span class="token string">&#39;display&#39;</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">===</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> isShow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">recalculateStyle</span><span class="token punctuation">(</span><span class="token parameter">cssRules<span class="token punctuation">,</span> element<span class="token punctuation">,</span> parentComputedStyle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> attributes <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>computedStyle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span>parentComputedStyle<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 计算样式</span>\n    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">//stylesheets</span>\n        cssRules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">rule</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> selector <span class="token operator">=</span> rule<span class="token punctuation">.</span>selectors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>selector <span class="token operator">==</span> <span class="token string">&#39;#&#39;</span> <span class="token operator">+</span> value <span class="token operator">&amp;&amp;</span> key <span class="token operator">==</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>selector <span class="token operator">==</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> value <span class="token operator">&amp;&amp;</span> key <span class="token operator">==</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                rule<span class="token punctuation">.</span>declarations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> property<span class="token punctuation">,</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                    element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token comment">//行内样式</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> attributes <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            attributes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attribute</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> <span class="token punctuation">[</span>property<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> attribute<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">recalculateStyle</span><span class="token punctuation">(</span>cssRules<span class="token punctuation">,</span> child<span class="token punctuation">,</span>element<span class="token punctuation">.</span>computedStyle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//1.主进程接收用户输入的URL</span>\nmain<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/index.html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="合成线程" tabindex="-1"><a class="header-anchor" href="#合成线程" aria-hidden="true">#</a> 合成线程</h3><ul><li>合成线程将图层分成图块(tile)</li><li>合成线程会把分好的图块发给栅格化线程池，栅格化线程会把图片(tile)转化为位图</li><li>而其实栅格化线程在工作的时候会把栅格化的工作交给 GPU 进程来完成，最终生成的位图就保存在了 GPU 内存中</li><li>当所有的图块都光栅化之后合成线程会发送绘制图块的命令给浏览器主进程</li><li>浏览器主进程然后会从 GPU 内存中取出位图显示到页面上</li></ul><p><img src="'+o+'" alt=""></p><h4 id="图块" tabindex="-1"><a class="header-anchor" href="#图块" aria-hidden="true">#</a> 图块</h4><ul><li>图块渲染也称基于瓦片渲染或基于小方块渲染</li><li>它是一种通过规则的网格细分计算机图形图像并分别渲染图块(tile)各部分的过程 <img src="'+c+'" alt=""></li></ul><h4 id="栅格化" tabindex="-1"><a class="header-anchor" href="#栅格化" aria-hidden="true">#</a> 栅格化</h4><ul><li>栅格化是将矢量图形格式表示的图像转换成位图以用于显示器输出的过程</li><li>栅格即像素</li><li>栅格化即将矢量图形转化为位图(栅格图像)</li></ul><p><img src="'+l+'" alt=""></p><h3 id="资源加载" tabindex="-1"><a class="header-anchor" href="#资源加载" aria-hidden="true">#</a> 资源加载</h3><ul><li>CSS 加载不会影响 DOM 解析</li><li>CSS 加载不会阻塞 JS 加载，但是会阻塞 JS 执行</li><li>JS 会依赖 CSS 加载，JS 会阻塞 DOM 解析</li></ul><p><img src="'+u+'" alt=""></p>',37)],k={},r=(0,a(1935).Z)(k,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,i)}]])},1935:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},2089:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-329d6243","path":"/browse/browsers-rendering.html","title":"浏览器渲染过程","lang":"zh-CN","frontmatter":{"title":"浏览器渲染过程","category":["Browse"],"date":"2021-05-12T00:00:00.000Z","summary":"进程架构 当启动一个程序时，操作系统会为该程序分配内存，用来存放代码、运行过程中的数据，这样的运行环境叫做进程; 一个进程可以启动和管理多个线程，线程之间可以共享进行数据，任何一个线程出错都可能会导致进程崩溃; Chrome 的进程架构 浏览器主进程 负责界面显示、用户交互和子进程管理; 渲染进程 排版引擎和 V8 引擎运行在该进程中，负责把 HTML、CS","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/browse/browsers-rendering.html"}],["meta",{"property":"og:title","content":"浏览器渲染过程"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://luxiag.github.io/"}],["meta",{"property":"og:updated_time","content":"2023-01-15T10:46:26.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"浏览器渲染过程"}],["meta",{"property":"article:published_time","content":"2021-05-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-15T10:46:26.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"进程架构","slug":"进程架构","link":"#进程架构","children":[{"level":3,"title":"Chrome 的进程架构","slug":"chrome-的进程架构","link":"#chrome-的进程架构","children":[]},{"level":3,"title":"HTML 加载","slug":"html-加载","link":"#html-加载","children":[]}]},{"level":2,"title":"渲染过程","slug":"渲染过程","link":"#渲染过程","children":[{"level":3,"title":"HTML 转 DOM 树","slug":"html-转-dom-树","link":"#html-转-dom-树","children":[]},{"level":3,"title":"CSS 转 stylesheet","slug":"css-转-stylesheet","link":"#css-转-stylesheet","children":[]},{"level":3,"title":"计算出 DOM 节点的样式","slug":"计算出-dom-节点的样式","link":"#计算出-dom-节点的样式","children":[]},{"level":3,"title":"构建布局树","slug":"构建布局树","link":"#构建布局树","children":[]},{"level":3,"title":"计算布局","slug":"计算布局","link":"#计算布局","children":[]},{"level":3,"title":"生成分层树","slug":"生成分层树","link":"#生成分层树","children":[]},{"level":3,"title":"绘制","slug":"绘制","link":"#绘制","children":[]},{"level":3,"title":"合成线程","slug":"合成线程","link":"#合成线程","children":[]},{"level":3,"title":"资源加载","slug":"资源加载","link":"#资源加载","children":[]}]}],"git":{"createdTime":1673428495000,"updatedTime":1673779586000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":2}]},"readingTime":{"minutes":12.92,"words":3875},"filePathRelative":"browse/browsers-rendering.md","localizedDate":"2021年5月12日"}')}}]);