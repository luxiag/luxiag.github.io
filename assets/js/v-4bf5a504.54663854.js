"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4802],{3138:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var t=a(1534);const e=(0,t.uE)('<p><strong>仅当列表是有序的时候，二分查找才管用</strong></p><p>找到列表的中间值，如果中间值大于查找值，则往数组的左边继续查找，如果小于查找值这往右边继续查找。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">binary_search</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> aim</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> hight <span class="token operator">=</span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> guess<span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> hight<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    mid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> hight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    guess <span class="token operator">=</span> list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>guess <span class="token operator">==</span> aim<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> mid<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>guess <span class="token operator">&gt;</span> aim<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 运行时间 log2(n)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在排序数组中查找元素的第一个和最后一个位置" tabindex="-1"><a class="header-anchor" href="#在排序数组中查找元素的第一个和最后一个位置" aria-hidden="true">#</a> 在排序数组中查找元素的第一个和最后一个位置</h2>',4),p={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/",target:"_blank",rel:"noopener noreferrer"},o=(0,t.uE)('<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现<strong>时间复杂度为 O(log n)</strong> 的算法解决此问题。</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>输入：nums = [5,7,7,8,8,10], target = 8\n输出：[3,4]\n\n输入：nums = [5,7,7,8,8,10], target = 6\n输出：[-1,-1]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">searchRange</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> leftIdx <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> rightIdx <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>\n\n  <span class="token keyword">if</span><span class="token punctuation">(</span>leftIdx <span class="token operator">&lt;=</span> rightIdx <span class="token operator">&amp;&amp;</span> rightIdx<span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>leftIdx <span class="token punctuation">]</span><span class="token operator">===</span> target  <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>rightIdx<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> <span class="token punctuation">[</span>leftIdx<span class="token punctuation">,</span>rightIdx<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token comment">// lower = true 获取左边界</span>\n<span class="token comment">// lower = false 获取右边界</span>\n<span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> lower<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//  &gt; right 最终会得到比target大的第一位数  右边界</span>\n    <span class="token comment">//  &gt;= right 最终会得到target所在位置，right -1后，即target已经离开匹配范围，左边界</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target <span class="token operator">||</span> <span class="token punctuation">(</span>lower <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="寻找两个正序数组的中位数" tabindex="-1"><a class="header-anchor" href="#寻找两个正序数组的中位数" aria-hidden="true">#</a> 寻找两个正序数组的中位数</h2>',5),l={href:"https://leetcode.cn/problems/median-of-two-sorted-arrays/",target:"_blank",rel:"noopener noreferrer"},c=(0,t.uE)('<p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 <strong>算法的时间复杂度应该为 O(log (m+n)) 。</strong></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>输入：nums1 = [1,3], nums2 = [2]\n输出：2.00000\n解释：合并数组 = [1,2,3] ，中位数 2\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),i={},r=(0,a(1935).Z)(i,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[e,(0,t._)("p",null,[(0,t._)("a",p,[(0,t.Uk)("https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/"),(0,t.Wm)(a)]),(0,t.Uk)(" 给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。")]),o,(0,t._)("p",null,[(0,t._)("a",l,[(0,t.Uk)("https://leetcode.cn/problems/median-of-two-sorted-arrays/"),(0,t.Wm)(a)])]),c])}]])},1935:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},1479:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-4bf5a504","path":"/algorithm/binary-search.html","title":"二分查找","lang":"zh-CN","frontmatter":{"title":"二分查找","reference":"算法图解","date":"2022-09-15T00:00:00.000Z","category":["算法"],"tag":["算法图解"],"summary":"仅当列表是有序的时候，二分查找才管用 找到列表的中间值，如果中间值大于查找值，则往数组的左边继续查找，如果小于查找值这往右边继续查找。 在排序数组中查找元素的第一个和最后一个位置 给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。 如果数组中不存在目标值 target，返回 [-1, ","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/algorithm/binary-search.html"}],["meta",{"property":"og:title","content":"二分查找"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-11-17T09:21:42.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"算法图解"}],["meta",{"property":"article:published_time","content":"2022-09-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-17T09:21:42.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"在排序数组中查找元素的第一个和最后一个位置","slug":"在排序数组中查找元素的第一个和最后一个位置","link":"#在排序数组中查找元素的第一个和最后一个位置","children":[]},{"level":2,"title":"寻找两个正序数组的中位数","slug":"寻找两个正序数组的中位数","link":"#寻找两个正序数组的中位数","children":[]}],"git":{"createdTime":1663833246000,"updatedTime":1668676902000,"contributors":[{"name":"卢祥","email":"example@gmail.com","commits":4},{"name":"luxiang","email":"luxiag@qq.com","commits":3},{"name":"卢祥","email":"example@email.com","commits":1}]},"readingTime":{"minutes":1.73,"words":519},"filePathRelative":"algorithm/binary-search.md","localizedDate":"2022年9月15日"}')}}]);