"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2918],{29271:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});var t=a(71534);const p=[(0,t.uE)('<canvas class="mouse_gl"></canvas><details class="custom-container details"><summary>代码</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\ncanvas<span class="token punctuation">.</span>width <span class="token operator">=</span> canvas<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>\ncanvas<span class="token punctuation">.</span>height <span class="token operator">=</span> canvas<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n\n<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getRandom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> splatColors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">r</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">0.15</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> idleSplats<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">idleSplatsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">multipleSplats</span><span class="token punctuation">(</span>\n    <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> config<span class="token punctuation">.</span><span class="token constant">RANDOM_AMOUNT</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n      config<span class="token punctuation">.</span><span class="token constant">RANDOM_AMOUNT</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span>\n      <span class="token number">1</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token constant">SIM_RESOLUTION</span><span class="token operator">:</span> <span class="token number">256</span><span class="token punctuation">,</span>\n  <span class="token constant">DYE_RESOLUTION</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>\n  <span class="token constant">DENSITY_DISSIPATION</span><span class="token operator">:</span> <span class="token number">0.97</span><span class="token punctuation">,</span>\n  <span class="token constant">VELOCITY_DISSIPATION</span><span class="token operator">:</span> <span class="token number">0.98</span><span class="token punctuation">,</span>\n  <span class="token constant">PRESSURE_DISSIPATION</span><span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span>\n  <span class="token constant">PRESSURE_ITERATIONS</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n  <span class="token constant">CURL</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n  <span class="token constant">SPLAT_RADIUS</span><span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span>\n  <span class="token constant">SHADING</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token constant">COLORFUL</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token constant">PAUSED</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token constant">BACK_COLOR</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">r</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token constant">TRANSPARENT</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token constant">BLOOM</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token constant">BLOOM_ITERATIONS</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n  <span class="token constant">BLOOM_RESOLUTION</span><span class="token operator">:</span> <span class="token number">256</span><span class="token punctuation">,</span>\n  <span class="token constant">BLOOM_INTENSITY</span><span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span>\n  <span class="token constant">BLOOM_THRESHOLD</span><span class="token operator">:</span> <span class="token number">0.6</span><span class="token punctuation">,</span>\n  <span class="token constant">BLOOM_SOFT_KNEE</span><span class="token operator">:</span> <span class="token number">0.7</span><span class="token punctuation">,</span>\n  <span class="token constant">POINTER_COLOR</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">r</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">0.15</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token constant">SOUND_SENSITIVITY</span><span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span>\n  <span class="token constant">AUDIO_RESPONSIVE</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token constant">FREQ_RANGE</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n  <span class="token constant">FREQ_RANGE_START</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token constant">IDLE_SPLATS</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token constant">RANDOM_AMOUNT</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token constant">RANDOM_INTERVAL</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token constant">SPLAT_ON_CLICK</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token constant">SHOW_MOUSE_MOVEMENT</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span>wallpaperPropertyListener <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">applyUserProperties</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">properties</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>bloom_intensity<span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span><span class="token constant">BLOOM_INTENSITY</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>bloom_intensity<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>bloom_threshold<span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span><span class="token constant">BLOOM_THRESHOLD</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>bloom_threshold<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>colorful<span class="token punctuation">)</span> config<span class="token punctuation">.</span><span class="token constant">COLORFUL</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>colorful<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>density_diffusion<span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span><span class="token constant">DENSITY_DISSIPATION</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>density_diffusion<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>enable_bloom<span class="token punctuation">)</span> config<span class="token punctuation">.</span><span class="token constant">BLOOM</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>enable_bloom<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>paused<span class="token punctuation">)</span> config<span class="token punctuation">.</span><span class="token constant">PAUSED</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>paused<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>pressure_diffusion<span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span><span class="token constant">PRESSURE_DISSIPATION</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>pressure_diffusion<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>shading<span class="token punctuation">)</span> config<span class="token punctuation">.</span><span class="token constant">SHADING</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>shading<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_radius<span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span><span class="token constant">SPLAT_RADIUS</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>splat_radius<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>velocity_diffusion<span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span><span class="token constant">VELOCITY_DISSIPATION</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>velocity_diffusion<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>vorticity<span class="token punctuation">)</span> config<span class="token punctuation">.</span><span class="token constant">CURL</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>vorticity<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>sound_sensitivity<span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span><span class="token constant">SOUND_SENSITIVITY</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>sound_sensitivity<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>audio_responsive<span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span><span class="token constant">AUDIO_RESPONSIVE</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>audio_responsive<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>simulation_resolution<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span><span class="token constant">SIM_RESOLUTION</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>simulation_resolution<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        <span class="token function">initFramebuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>dye_resolution<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span><span class="token constant">DYE_RESOLUTION</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>dye_resolution<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        <span class="token function">initFramebuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_color<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        splatColors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rgbToPointerColor</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_color<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token constant">COLORFUL</span><span class="token punctuation">)</span> config<span class="token punctuation">.</span><span class="token constant">POINTER_COLOR</span> <span class="token operator">=</span> <span class="token punctuation">[</span>splatColors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_color_2<span class="token punctuation">)</span>\n        splatColors<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rgbToPointerColor</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_color_2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_color_3<span class="token punctuation">)</span>\n        splatColors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rgbToPointerColor</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_color_3<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_color_4<span class="token punctuation">)</span>\n        splatColors<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rgbToPointerColor</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_color_4<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_color_5<span class="token punctuation">)</span>\n        splatColors<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rgbToPointerColor</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_color_5<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>background_color<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> c <span class="token operator">=</span> properties<span class="token punctuation">.</span>background_color<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          g <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          b <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>r<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>g<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        config<span class="token punctuation">.</span><span class="token constant">BACK_COLOR</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>\n        config<span class="token punctuation">.</span><span class="token constant">BACK_COLOR</span><span class="token punctuation">.</span>g <span class="token operator">=</span> g<span class="token punctuation">;</span>\n        config<span class="token punctuation">.</span><span class="token constant">BACK_COLOR</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>more_colors <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>properties<span class="token punctuation">.</span>more_colors<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span><span class="token constant">POINTER_COLOR</span> <span class="token operator">=</span> <span class="token punctuation">[</span>splatColors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>more_colors <span class="token operator">&amp;&amp;</span> properties<span class="token punctuation">.</span>more_colors<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span><span class="token constant">POINTER_COLOR</span> <span class="token operator">=</span> splatColors<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>use_background_image<span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span><span class="token constant">TRANSPARENT</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>use_background_image<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>background_image<span class="token punctuation">)</span>\n        canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">url(&quot;file:///</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>properties<span class="token punctuation">.</span>background_image<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>repeat_background<span class="token punctuation">)</span>\n        canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundRepeat <span class="token operator">=</span> properties<span class="token punctuation">.</span>repeat_background<span class="token punctuation">.</span>value\n          <span class="token operator">?</span> <span class="token string">&quot;repeat&quot;</span>\n          <span class="token operator">:</span> <span class="token string">&quot;no-repeat&quot;</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>background_image_size<span class="token punctuation">)</span>\n        canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundSize <span class="token operator">=</span> properties<span class="token punctuation">.</span>background_image_size<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>frequency_range<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>frequency_range<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE</span> <span class="token operator">+</span> config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE_START</span> <span class="token operator">&gt;</span> <span class="token number">61</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE_START</span> <span class="token operator">=</span> <span class="token number">62</span> <span class="token operator">-</span> config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>frequency_range_start<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE</span> <span class="token operator">+</span> properties<span class="token punctuation">.</span>frequency_range_start<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> <span class="token number">61</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE_START</span> <span class="token operator">=</span> <span class="token number">62</span> <span class="token operator">-</span> config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE_START</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>frequency_range_start<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>idle_random_splats<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span><span class="token constant">IDLE_SPLATS</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>idle_random_splats<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>idle_random_splats<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          idleSplats <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>\n            idleSplatsFunction<span class="token punctuation">,</span>\n            config<span class="token punctuation">.</span><span class="token constant">RANDOM_INTERVAL</span> <span class="token operator">*</span> <span class="token number">1000</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token function">clearInterval</span><span class="token punctuation">(</span>idleSplats<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>random_splat_interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span><span class="token constant">RANDOM_INTERVAL</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>random_splat_interval<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token constant">IDLE_SPLATS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">clearInterval</span><span class="token punctuation">(</span>idleSplats<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          idleSplats <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>\n            idleSplatsFunction<span class="token punctuation">,</span>\n            config<span class="token punctuation">.</span><span class="token constant">RANDOM_INTERVAL</span> <span class="token operator">*</span> <span class="token number">1000</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>random_splat_amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span><span class="token constant">RANDOM_AMOUNT</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>random_splat_amount<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token constant">IDLE_SPLATS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">clearInterval</span><span class="token punctuation">(</span>idleSplats<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          idleSplats <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>\n            idleSplatsFunction<span class="token punctuation">,</span>\n            config<span class="token punctuation">.</span><span class="token constant">RANDOM_INTERVAL</span> <span class="token operator">*</span> <span class="token number">1000</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>splat_on_click<span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span><span class="token constant">SPLAT_ON_CLICK</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>splat_on_click<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>show_mouse_movement<span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span><span class="token constant">SHOW_MOUSE_MOVEMENT</span> <span class="token operator">=</span> properties<span class="token punctuation">.</span>show_mouse_movement<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  window<span class="token punctuation">.</span><span class="token function">wallpaperRegisterAudioListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">audioArray</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token constant">AUDIO_RESPONSIVE</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>audioArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> bass <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> half <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>audioArray<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      bass <span class="token operator">+=</span> audioArray<span class="token punctuation">[</span>i <span class="token operator">+</span> config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE_START</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      bass <span class="token operator">+=</span> audioArray<span class="token punctuation">[</span>half <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE_START</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    bass <span class="token operator">/=</span> config<span class="token punctuation">.</span><span class="token constant">FREQ_RANGE</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token function">multipleSplats</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>bass <span class="token operator">*</span> config<span class="token punctuation">.</span><span class="token constant">SOUND_SENSITIVITY</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">indexOfMax</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> maxIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      maxIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>\n      max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> maxIndex<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">pointerPrototype</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>dx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>dy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>down <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>moved <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">COLORFUL</span>\n      <span class="token operator">?</span> <span class="token function">generateColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">POINTER_COLOR</span><span class="token punctuation">.</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> pointers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> splatStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> bloomFramebuffers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\npointers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">pointerPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> gl<span class="token punctuation">,</span> ext <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getWebGLContext</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> config<span class="token punctuation">.</span><span class="token constant">SHADING</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ext<span class="token punctuation">.</span>supportLinearFiltering<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  config<span class="token punctuation">.</span><span class="token constant">SHADING</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  config<span class="token punctuation">.</span><span class="token constant">BLOOM</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getWebGLContext</span><span class="token punctuation">(</span><span class="token parameter">canvas</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">alpha</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">depth</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">stencil</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">antialias</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">preserveDrawingBuffer</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> gl <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;webgl2&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> isWebGL2 <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>gl<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isWebGL2<span class="token punctuation">)</span>\n    gl <span class="token operator">=</span>\n      canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;webgl&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token operator">||</span>\n      canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;experimental-webgl&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> halfFloat<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> supportLinearFiltering<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isWebGL2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;EXT_color_buffer_float&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    supportLinearFiltering <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;OES_texture_float_linear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    halfFloat <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;OES_texture_half_float&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    supportLinearFiltering <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;OES_texture_half_float_linear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  gl<span class="token punctuation">.</span><span class="token function">clearColor</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> halfFloatTexType <span class="token operator">=</span> isWebGL2 <span class="token operator">?</span> gl<span class="token punctuation">.</span><span class="token constant">HALF_FLOAT</span> <span class="token operator">:</span> halfFloat<span class="token punctuation">.</span><span class="token constant">HALF_FLOAT_OES</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> formatRGBA<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> formatRG<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> formatR<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isWebGL2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    formatRGBA <span class="token operator">=</span> <span class="token function">getSupportedFormat</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGBA16F</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGBA</span><span class="token punctuation">,</span> halfFloatTexType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    formatRG <span class="token operator">=</span> <span class="token function">getSupportedFormat</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RG16F</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RG</span><span class="token punctuation">,</span> halfFloatTexType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    formatR <span class="token operator">=</span> <span class="token function">getSupportedFormat</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">R16F</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">,</span> halfFloatTexType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    formatRGBA <span class="token operator">=</span> <span class="token function">getSupportedFormat</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGBA</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGBA</span><span class="token punctuation">,</span> halfFloatTexType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    formatRG <span class="token operator">=</span> <span class="token function">getSupportedFormat</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGBA</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGBA</span><span class="token punctuation">,</span> halfFloatTexType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    formatR <span class="token operator">=</span> <span class="token function">getSupportedFormat</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGBA</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGBA</span><span class="token punctuation">,</span> halfFloatTexType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    gl<span class="token punctuation">,</span>\n    <span class="token literal-property property">ext</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      formatRGBA<span class="token punctuation">,</span>\n      formatRG<span class="token punctuation">,</span>\n      formatR<span class="token punctuation">,</span>\n      halfFloatTexType<span class="token punctuation">,</span>\n      supportLinearFiltering<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getSupportedFormat</span><span class="token punctuation">(</span><span class="token parameter">gl<span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> format<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">supportRenderTextureFormat</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> format<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>internalFormat<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> gl<span class="token punctuation">.</span><span class="token constant">R16F</span><span class="token operator">:</span>\n        <span class="token keyword">return</span> <span class="token function">getSupportedFormat</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RG16F</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RG</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> gl<span class="token punctuation">.</span><span class="token constant">RG16F</span><span class="token operator">:</span>\n        <span class="token keyword">return</span> <span class="token function">getSupportedFormat</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGBA16F</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGBA</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token operator">:</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    internalFormat<span class="token punctuation">,</span>\n    format<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">supportRenderTextureFormat</span><span class="token punctuation">(</span><span class="token parameter">gl<span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> format<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> texture <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">createTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">bindTexture</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> texture<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_MIN_FILTER</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">NEAREST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_MAG_FILTER</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">NEAREST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_WRAP_S</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">CLAMP_TO_EDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_WRAP_T</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">CLAMP_TO_EDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texImage2D</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> fbo <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">createFramebuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">bindFramebuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">FRAMEBUFFER</span><span class="token punctuation">,</span> fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">framebufferTexture2D</span><span class="token punctuation">(</span>\n    gl<span class="token punctuation">.</span><span class="token constant">FRAMEBUFFER</span><span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">COLOR_ATTACHMENT0</span><span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span>\n    texture<span class="token punctuation">,</span>\n    <span class="token number">0</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> status <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">checkFramebufferStatus</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">FRAMEBUFFER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> gl<span class="token punctuation">.</span><span class="token constant">FRAMEBUFFER_COMPLETE</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Mobi|Android</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">GLProgram</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">vertexShader<span class="token punctuation">,</span> fragmentShader</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>uniforms <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>program <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">createProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    gl<span class="token punctuation">.</span><span class="token function">attachShader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>program<span class="token punctuation">,</span> vertexShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">attachShader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>program<span class="token punctuation">,</span> fragmentShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">linkProgram</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>program<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>gl<span class="token punctuation">.</span><span class="token function">getProgramParameter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>program<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">LINK_STATUS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token keyword">throw</span> gl<span class="token punctuation">.</span><span class="token function">getProgramInfoLog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>program<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> uniformCount <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">getProgramParameter</span><span class="token punctuation">(</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>program<span class="token punctuation">,</span>\n      gl<span class="token punctuation">.</span><span class="token constant">ACTIVE_UNIFORMS</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> uniformCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> uniformName <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">getActiveUniform</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>program<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>uniforms<span class="token punctuation">[</span>uniformName<span class="token punctuation">]</span> <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">getUniformLocation</span><span class="token punctuation">(</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>program<span class="token punctuation">,</span>\n        uniformName\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl<span class="token punctuation">.</span><span class="token function">useProgram</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>program<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">compileShader</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> shader <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">createShader</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">shaderSource</span><span class="token punctuation">(</span>shader<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">compileShader</span><span class="token punctuation">(</span>shader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>gl<span class="token punctuation">.</span><span class="token function">getShaderParameter</span><span class="token punctuation">(</span>shader<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">COMPILE_STATUS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">throw</span> gl<span class="token punctuation">.</span><span class="token function">getShaderInfoLog</span><span class="token punctuation">(</span>shader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> shader<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> baseVertexShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">VERTEX_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision highp float;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        vL = vUv - vec2(texelSize.x, 0.0);\n        vR = vUv + vec2(texelSize.x, 0.0);\n        vT = vUv + vec2(0.0, texelSize.y);\n        vB = vUv - vec2(0.0, texelSize.y);\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> clearShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float value;\n\n    void main () {\n        gl_FragColor = value * texture2D(uTexture, vUv);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> colorShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision mediump float;\n\n    uniform vec4 color;\n\n    void main () {\n        gl_FragColor = color;\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> backgroundShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    void main () {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> displayShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec3 C = texture2D(uTexture, vUv).rgb;\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> displayBloomShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n\n    void main () {\n        vec3 C = texture2D(uTexture, vUv).rgb;\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n        bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\n        C += bloom;\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> displayShadingShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform vec2 texelSize;\n\n    void main () {\n        vec3 L = texture2D(uTexture, vL).rgb;\n        vec3 R = texture2D(uTexture, vR).rgb;\n        vec3 T = texture2D(uTexture, vT).rgb;\n        vec3 B = texture2D(uTexture, vB).rgb;\n        vec3 C = texture2D(uTexture, vUv).rgb;\n\n        float dx = length(R) - length(L);\n        float dy = length(T) - length(B);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        C.rgb *= diffuse;\n\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> displayBloomShadingShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n    uniform vec2 texelSize;\n\n    void main () {\n        vec3 L = texture2D(uTexture, vL).rgb;\n        vec3 R = texture2D(uTexture, vR).rgb;\n        vec3 T = texture2D(uTexture, vT).rgb;\n        vec3 B = texture2D(uTexture, vB).rgb;\n        vec3 C = texture2D(uTexture, vUv).rgb;\n\n        float dx = length(R) - length(L);\n        float dy = length(T) - length(B);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        C *= diffuse;\n\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n        bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\n        C += bloom;\n\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> bloomPrefilterShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform vec3 curve;\n    uniform float threshold;\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n        float br = max(c.r, max(c.g, c.b));\n        float rq = clamp(br - curve.x, 0.0, curve.y);\n        rq = curve.z * rq * rq;\n        c *= max(rq, br - threshold) / max(br, 0.0001);\n        gl_FragColor = vec4(c, 0.0);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> bloomBlurShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum;\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> bloomFinalShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform float intensity;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum * intensity;\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> splatShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTarget;\n    uniform float aspectRatio;\n    uniform vec3 color;\n    uniform vec2 point;\n    uniform float radius;\n\n    void main () {\n        vec2 p = vUv - point.xy;\n        p.x *= aspectRatio;\n        vec3 splat = exp(-dot(p, p) / radius) * color;\n        vec3 base = texture2D(uTarget, vUv).xyz;\n        gl_FragColor = vec4(base + splat, 1.0);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> advectionManualFilteringShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform vec2 dyeTexelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n        vec2 st = uv / tsize - 0.5;\n\n        vec2 iuv = floor(st);\n        vec2 fuv = fract(st);\n\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n    }\n\n    void main () {\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n        gl_FragColor = dissipation * bilerp(uSource, coord, dyeTexelSize);\n        gl_FragColor.a = 1.0;\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> advectionShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    void main () {\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n        gl_FragColor = dissipation * texture2D(uSource, coord);\n        gl_FragColor.a = 1.0;\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> divergenceShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).x;\n        float R = texture2D(uVelocity, vR).x;\n        float T = texture2D(uVelocity, vT).y;\n        float B = texture2D(uVelocity, vB).y;\n\n        vec2 C = texture2D(uVelocity, vUv).xy;\n        if (vL.x &lt; 0.0) { L = -C.x; }\n        if (vR.x &gt; 1.0) { R = -C.x; }\n        if (vT.y &gt; 1.0) { T = -C.y; }\n        if (vB.y &lt; 0.0) { B = -C.y; }\n\n        float div = 0.5 * (R - L + T - B);\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> curlShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).y;\n        float R = texture2D(uVelocity, vR).y;\n        float T = texture2D(uVelocity, vT).x;\n        float B = texture2D(uVelocity, vB).x;\n        float vorticity = R - L - T + B;\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> vorticityShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uCurl;\n    uniform float curl;\n    uniform float dt;\n\n    void main () {\n        float L = texture2D(uCurl, vL).x;\n        float R = texture2D(uCurl, vR).x;\n        float T = texture2D(uCurl, vT).x;\n        float B = texture2D(uCurl, vB).x;\n        float C = texture2D(uCurl, vUv).x;\n\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n        force /= length(force) + 0.0001;\n        force *= curl * C;\n        force.y *= -1.0;\n\n        vec2 vel = texture2D(uVelocity, vUv).xy;\n        gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> pressureShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uDivergence;\n\n    vec2 boundary (vec2 uv) {\n        return uv;\n        // uncomment if you use wrap or repeat texture mode\n        // uv = min(max(uv, 0.0), 1.0);\n        // return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        float C = texture2D(uPressure, vUv).x;\n        float divergence = texture2D(uDivergence, vUv).x;\n        float pressure = (L + R + B + T - divergence) * 0.25;\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> gradientSubtractShader <span class="token operator">=</span> <span class="token function">compileShader</span><span class="token punctuation">(</span>\n  gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">,</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uVelocity;\n\n    vec2 boundary (vec2 uv) {\n        return uv;\n        // uv = min(max(uv, 0.0), 1.0);\n        // return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity.xy -= vec2(R - L, T - B);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> blit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  gl<span class="token punctuation">.</span><span class="token function">bindBuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">ARRAY_BUFFER</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token function">createBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">bufferData</span><span class="token punctuation">(</span>\n    gl<span class="token punctuation">.</span><span class="token constant">ARRAY_BUFFER</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">STATIC_DRAW</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">bindBuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">ELEMENT_ARRAY_BUFFER</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token function">createBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">bufferData</span><span class="token punctuation">(</span>\n    gl<span class="token punctuation">.</span><span class="token constant">ELEMENT_ARRAY_BUFFER</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">Uint16Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">STATIC_DRAW</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">vertexAttribPointer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">FLOAT</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">enableVertexAttribArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">destination</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    gl<span class="token punctuation">.</span><span class="token function">bindFramebuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">FRAMEBUFFER</span><span class="token punctuation">,</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">drawElements</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TRIANGLES</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">UNSIGNED_SHORT</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> simWidth<span class="token punctuation">;</span>\n<span class="token keyword">let</span> simHeight<span class="token punctuation">;</span>\n<span class="token keyword">let</span> dyeWidth<span class="token punctuation">;</span>\n<span class="token keyword">let</span> dyeHeight<span class="token punctuation">;</span>\n<span class="token keyword">let</span> density<span class="token punctuation">;</span>\n<span class="token keyword">let</span> velocity<span class="token punctuation">;</span>\n<span class="token keyword">let</span> divergence<span class="token punctuation">;</span>\n<span class="token keyword">let</span> curl<span class="token punctuation">;</span>\n<span class="token keyword">let</span> pressure<span class="token punctuation">;</span>\n<span class="token keyword">let</span> bloom<span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> ditheringTexture <span class="token operator">=</span> <span class="token function">createTextureAsync</span><span class="token punctuation">(</span><span class="token string">&quot;LDR_RGB1_0.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> clearProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> clearShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> colorProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> colorShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> backgroundProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> backgroundShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> displayProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> displayShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> displayBloomProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> displayBloomShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> displayShadingProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>\n  baseVertexShader<span class="token punctuation">,</span>\n  displayShadingShader\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> displayBloomShadingProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>\n  baseVertexShader<span class="token punctuation">,</span>\n  displayBloomShadingShader\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bloomPrefilterProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>\n  baseVertexShader<span class="token punctuation">,</span>\n  bloomPrefilterShader\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bloomBlurProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> bloomBlurShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bloomFinalProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> bloomFinalShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> splatProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> splatShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> advectionProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>\n  baseVertexShader<span class="token punctuation">,</span>\n  ext<span class="token punctuation">.</span>supportLinearFiltering <span class="token operator">?</span> advectionShader <span class="token operator">:</span> advectionManualFilteringShader\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> divergenceProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> divergenceShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> curlProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> curlShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> vorticityProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> vorticityShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pressureProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>baseVertexShader<span class="token punctuation">,</span> pressureShader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> gradienSubtractProgram <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLProgram</span><span class="token punctuation">(</span>\n  baseVertexShader<span class="token punctuation">,</span>\n  gradientSubtractShader\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">initFramebuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> simRes <span class="token operator">=</span> <span class="token function">getResolution</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token constant">SIM_RESOLUTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> dyeRes <span class="token operator">=</span> <span class="token function">getResolution</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token constant">DYE_RESOLUTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  simWidth <span class="token operator">=</span> simRes<span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n  simHeight <span class="token operator">=</span> simRes<span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n  dyeWidth <span class="token operator">=</span> dyeRes<span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n  dyeHeight <span class="token operator">=</span> dyeRes<span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> texType <span class="token operator">=</span> ext<span class="token punctuation">.</span>halfFloatTexType<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> rgba <span class="token operator">=</span> ext<span class="token punctuation">.</span>formatRGBA<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> rg <span class="token operator">=</span> ext<span class="token punctuation">.</span>formatRG<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> r <span class="token operator">=</span> ext<span class="token punctuation">.</span>formatR<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> filtering <span class="token operator">=</span> ext<span class="token punctuation">.</span>supportLinearFiltering <span class="token operator">?</span> gl<span class="token punctuation">.</span><span class="token constant">LINEAR</span> <span class="token operator">:</span> gl<span class="token punctuation">.</span><span class="token constant">NEAREST</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>density <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    density <span class="token operator">=</span> <span class="token function">createDoubleFBO</span><span class="token punctuation">(</span>\n      dyeWidth<span class="token punctuation">,</span>\n      dyeHeight<span class="token punctuation">,</span>\n      rgba<span class="token punctuation">.</span>internalFormat<span class="token punctuation">,</span>\n      rgba<span class="token punctuation">.</span>format<span class="token punctuation">,</span>\n      texType<span class="token punctuation">,</span>\n      filtering\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    density <span class="token operator">=</span> <span class="token function">resizeDoubleFBO</span><span class="token punctuation">(</span>\n      density<span class="token punctuation">,</span>\n      dyeWidth<span class="token punctuation">,</span>\n      dyeHeight<span class="token punctuation">,</span>\n      rgba<span class="token punctuation">.</span>internalFormat<span class="token punctuation">,</span>\n      rgba<span class="token punctuation">.</span>format<span class="token punctuation">,</span>\n      texType<span class="token punctuation">,</span>\n      filtering\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>velocity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    velocity <span class="token operator">=</span> <span class="token function">createDoubleFBO</span><span class="token punctuation">(</span>\n      simWidth<span class="token punctuation">,</span>\n      simHeight<span class="token punctuation">,</span>\n      rg<span class="token punctuation">.</span>internalFormat<span class="token punctuation">,</span>\n      rg<span class="token punctuation">.</span>format<span class="token punctuation">,</span>\n      texType<span class="token punctuation">,</span>\n      filtering\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    velocity <span class="token operator">=</span> <span class="token function">resizeDoubleFBO</span><span class="token punctuation">(</span>\n      velocity<span class="token punctuation">,</span>\n      simWidth<span class="token punctuation">,</span>\n      simHeight<span class="token punctuation">,</span>\n      rg<span class="token punctuation">.</span>internalFormat<span class="token punctuation">,</span>\n      rg<span class="token punctuation">.</span>format<span class="token punctuation">,</span>\n      texType<span class="token punctuation">,</span>\n      filtering\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  divergence <span class="token operator">=</span> <span class="token function">createFBO</span><span class="token punctuation">(</span>\n    simWidth<span class="token punctuation">,</span>\n    simHeight<span class="token punctuation">,</span>\n    r<span class="token punctuation">.</span>internalFormat<span class="token punctuation">,</span>\n    r<span class="token punctuation">.</span>format<span class="token punctuation">,</span>\n    texType<span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">NEAREST</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  curl <span class="token operator">=</span> <span class="token function">createFBO</span><span class="token punctuation">(</span>\n    simWidth<span class="token punctuation">,</span>\n    simHeight<span class="token punctuation">,</span>\n    r<span class="token punctuation">.</span>internalFormat<span class="token punctuation">,</span>\n    r<span class="token punctuation">.</span>format<span class="token punctuation">,</span>\n    texType<span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">NEAREST</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  pressure <span class="token operator">=</span> <span class="token function">createDoubleFBO</span><span class="token punctuation">(</span>\n    simWidth<span class="token punctuation">,</span>\n    simHeight<span class="token punctuation">,</span>\n    r<span class="token punctuation">.</span>internalFormat<span class="token punctuation">,</span>\n    r<span class="token punctuation">.</span>format<span class="token punctuation">,</span>\n    texType<span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">NEAREST</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">initBloomFramebuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">initBloomFramebuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">getResolution</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token constant">BLOOM_RESOLUTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> texType <span class="token operator">=</span> ext<span class="token punctuation">.</span>halfFloatTexType<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> rgba <span class="token operator">=</span> ext<span class="token punctuation">.</span>formatRGBA<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> filtering <span class="token operator">=</span> ext<span class="token punctuation">.</span>supportLinearFiltering <span class="token operator">?</span> gl<span class="token punctuation">.</span><span class="token constant">LINEAR</span> <span class="token operator">:</span> gl<span class="token punctuation">.</span><span class="token constant">NEAREST</span><span class="token punctuation">;</span>\n\n  bloom <span class="token operator">=</span> <span class="token function">createFBO</span><span class="token punctuation">(</span>\n    res<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n    res<span class="token punctuation">.</span>height<span class="token punctuation">,</span>\n    rgba<span class="token punctuation">.</span>internalFormat<span class="token punctuation">,</span>\n    rgba<span class="token punctuation">.</span>format<span class="token punctuation">,</span>\n    texType<span class="token punctuation">,</span>\n    filtering\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  bloomFramebuffers<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> config<span class="token punctuation">.</span><span class="token constant">BLOOM_ITERATIONS</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> width <span class="token operator">=</span> res<span class="token punctuation">.</span>width <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> height <span class="token operator">=</span> res<span class="token punctuation">.</span>height <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> height <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> fbo <span class="token operator">=</span> <span class="token function">createFBO</span><span class="token punctuation">(</span>\n      width<span class="token punctuation">,</span>\n      height<span class="token punctuation">,</span>\n      rgba<span class="token punctuation">.</span>internalFormat<span class="token punctuation">,</span>\n      rgba<span class="token punctuation">.</span>format<span class="token punctuation">,</span>\n      texType<span class="token punctuation">,</span>\n      filtering\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    bloomFramebuffers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createFBO</span><span class="token punctuation">(</span><span class="token parameter">w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> format<span class="token punctuation">,</span> type<span class="token punctuation">,</span> param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  gl<span class="token punctuation">.</span><span class="token function">activeTexture</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> texture <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">createTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">bindTexture</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> texture<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_MIN_FILTER</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_MAG_FILTER</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_WRAP_S</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">CLAMP_TO_EDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_WRAP_T</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">CLAMP_TO_EDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texImage2D</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> fbo <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">createFramebuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">bindFramebuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">FRAMEBUFFER</span><span class="token punctuation">,</span> fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">framebufferTexture2D</span><span class="token punctuation">(</span>\n    gl<span class="token punctuation">.</span><span class="token constant">FRAMEBUFFER</span><span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">COLOR_ATTACHMENT0</span><span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span>\n    texture<span class="token punctuation">,</span>\n    <span class="token number">0</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">viewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">COLOR_BUFFER_BIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    texture<span class="token punctuation">,</span>\n    fbo<span class="token punctuation">,</span>\n    <span class="token literal-property property">width</span><span class="token operator">:</span> w<span class="token punctuation">,</span>\n    <span class="token literal-property property">height</span><span class="token operator">:</span> h<span class="token punctuation">,</span>\n    <span class="token function">attach</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      gl<span class="token punctuation">.</span><span class="token function">activeTexture</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE0</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      gl<span class="token punctuation">.</span><span class="token function">bindTexture</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> texture<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createDoubleFBO</span><span class="token punctuation">(</span><span class="token parameter">w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> format<span class="token punctuation">,</span> type<span class="token punctuation">,</span> param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> fbo1 <span class="token operator">=</span> <span class="token function">createFBO</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> format<span class="token punctuation">,</span> type<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> fbo2 <span class="token operator">=</span> <span class="token function">createFBO</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> format<span class="token punctuation">,</span> type<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token keyword">get</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> fbo1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">set</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fbo1 <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">get</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> fbo2<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">set</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fbo2 <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> temp <span class="token operator">=</span> fbo1<span class="token punctuation">;</span>\n      fbo1 <span class="token operator">=</span> fbo2<span class="token punctuation">;</span>\n      fbo2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">resizeFBO</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> format<span class="token punctuation">,</span> type<span class="token punctuation">,</span> param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> newFBO <span class="token operator">=</span> <span class="token function">createFBO</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> format<span class="token punctuation">,</span> type<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">clearProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>clearProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uTexture<span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>clearProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>newFBO<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> newFBO<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">resizeDoubleFBO</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> format<span class="token punctuation">,</span> type<span class="token punctuation">,</span> param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span>read <span class="token operator">=</span> <span class="token function">resizeFBO</span><span class="token punctuation">(</span>\n    target<span class="token punctuation">.</span>read<span class="token punctuation">,</span>\n    w<span class="token punctuation">,</span>\n    h<span class="token punctuation">,</span>\n    internalFormat<span class="token punctuation">,</span>\n    format<span class="token punctuation">,</span>\n    type<span class="token punctuation">,</span>\n    param\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  target<span class="token punctuation">.</span>write <span class="token operator">=</span> <span class="token function">createFBO</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> internalFormat<span class="token punctuation">,</span> format<span class="token punctuation">,</span> type<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> target<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createTextureAsync</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> texture <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">createTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">bindTexture</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> texture<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_MIN_FILTER</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">LINEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_MAG_FILTER</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">LINEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_WRAP_S</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">REPEAT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texParameteri</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_WRAP_T</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">REPEAT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">texImage2D</span><span class="token punctuation">(</span>\n    gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span>\n    <span class="token number">0</span><span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">RGB</span><span class="token punctuation">,</span>\n    <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token number">0</span><span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">RGB</span><span class="token punctuation">,</span>\n    gl<span class="token punctuation">.</span><span class="token constant">UNSIGNED_BYTE</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    texture<span class="token punctuation">,</span>\n    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token function">attach</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      gl<span class="token punctuation">.</span><span class="token function">activeTexture</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE0</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      gl<span class="token punctuation">.</span><span class="token function">bindTexture</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> texture<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    obj<span class="token punctuation">.</span>width <span class="token operator">=</span> image<span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n    obj<span class="token punctuation">.</span>height <span class="token operator">=</span> image<span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">bindTexture</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> texture<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">texImage2D</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TEXTURE_2D</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGB</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">RGB</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">UNSIGNED_BYTE</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  image<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">initFramebuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">multipleSplats</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> lastColorChangeTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">resizeCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token constant">PAUSED</span><span class="token punctuation">)</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token number">0.016</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>splatStack<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">multipleSplats</span><span class="token punctuation">(</span>splatStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pointers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> p <span class="token operator">=</span> pointers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>moved<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">splat</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">,</span> p<span class="token punctuation">.</span>dx<span class="token punctuation">,</span> p<span class="token punctuation">.</span>dy<span class="token punctuation">,</span> p<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      p<span class="token punctuation">.</span>moved <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastColorChangeTime <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">&lt;</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    lastColorChangeTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pointers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> p <span class="token operator">=</span> pointers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      p<span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">COLORFUL</span>\n        <span class="token operator">?</span> <span class="token function">generateColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">POINTER_COLOR</span><span class="token punctuation">.</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">dt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  gl<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">BLEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">viewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> simWidth<span class="token punctuation">,</span> simHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">curlProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>curlProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>texelSize<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> simWidth<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> simHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>curlProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uVelocity<span class="token punctuation">,</span> velocity<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>curl<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">vorticityProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>\n    vorticityProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>texelSize<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> simWidth<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> simHeight\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>vorticityProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uVelocity<span class="token punctuation">,</span> velocity<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>vorticityProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uCurl<span class="token punctuation">,</span> curl<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>vorticityProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>curl<span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token constant">CURL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>vorticityProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>dt<span class="token punctuation">,</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>velocity<span class="token punctuation">.</span>write<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  velocity<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">divergenceProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>\n    divergenceProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>texelSize<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> simWidth<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> simHeight\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>divergenceProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uVelocity<span class="token punctuation">,</span> velocity<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>divergence<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">clearProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>clearProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uTexture<span class="token punctuation">,</span> pressure<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>clearProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>value<span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token constant">PRESSURE_DISSIPATION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>pressure<span class="token punctuation">.</span>write<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  pressure<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">pressureProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>\n    pressureProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>texelSize<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> simWidth<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> simHeight\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>pressureProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uDivergence<span class="token punctuation">,</span> divergence<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> config<span class="token punctuation">.</span><span class="token constant">PRESSURE_ITERATIONS</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>pressureProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uPressure<span class="token punctuation">,</span> pressure<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">blit</span><span class="token punctuation">(</span>pressure<span class="token punctuation">.</span>write<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pressure<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">gradienSubtractProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>\n    gradienSubtractProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>texelSize<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> simWidth<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> simHeight\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>\n    gradienSubtractProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uPressure<span class="token punctuation">,</span>\n    pressure<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>\n    gradienSubtractProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uVelocity<span class="token punctuation">,</span>\n    velocity<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>velocity<span class="token punctuation">.</span>write<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  velocity<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">advectionProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>\n    advectionProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>texelSize<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> simWidth<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> simHeight\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ext<span class="token punctuation">.</span>supportLinearFiltering<span class="token punctuation">)</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>\n      advectionProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>dyeTexelSize<span class="token punctuation">,</span>\n      <span class="token number">1.0</span> <span class="token operator">/</span> simWidth<span class="token punctuation">,</span>\n      <span class="token number">1.0</span> <span class="token operator">/</span> simHeight\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> velocityId <span class="token operator">=</span> velocity<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>advectionProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uVelocity<span class="token punctuation">,</span> velocityId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>advectionProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uSource<span class="token punctuation">,</span> velocityId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>advectionProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>dt<span class="token punctuation">,</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>\n    advectionProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>dissipation<span class="token punctuation">,</span>\n    config<span class="token punctuation">.</span><span class="token constant">VELOCITY_DISSIPATION</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>velocity<span class="token punctuation">.</span>write<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  velocity<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  gl<span class="token punctuation">.</span><span class="token function">viewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dyeWidth<span class="token punctuation">,</span> dyeHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ext<span class="token punctuation">.</span>supportLinearFiltering<span class="token punctuation">)</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>\n      advectionProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>dyeTexelSize<span class="token punctuation">,</span>\n      <span class="token number">1.0</span> <span class="token operator">/</span> dyeWidth<span class="token punctuation">,</span>\n      <span class="token number">1.0</span> <span class="token operator">/</span> dyeHeight\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>advectionProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uVelocity<span class="token punctuation">,</span> velocity<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>advectionProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uSource<span class="token punctuation">,</span> density<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>\n    advectionProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>dissipation<span class="token punctuation">,</span>\n    config<span class="token punctuation">.</span><span class="token constant">DENSITY_DISSIPATION</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>density<span class="token punctuation">.</span>write<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  density<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token constant">BLOOM</span><span class="token punctuation">)</span> <span class="token function">applyBloom</span><span class="token punctuation">(</span>density<span class="token punctuation">.</span>read<span class="token punctuation">,</span> bloom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token constant">TRANSPARENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl<span class="token punctuation">.</span><span class="token function">blendFunc</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">ONE_MINUS_SRC_ALPHA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">BLEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    gl<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">BLEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> width <span class="token operator">=</span> target <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> gl<span class="token punctuation">.</span>drawingBufferWidth <span class="token operator">:</span> dyeWidth<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> height <span class="token operator">=</span> target <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> gl<span class="token punctuation">.</span>drawingBufferHeight <span class="token operator">:</span> dyeHeight<span class="token punctuation">;</span>\n\n  gl<span class="token punctuation">.</span><span class="token function">viewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token constant">TRANSPARENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">colorProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> bc <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">BACK_COLOR</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform4f</span><span class="token punctuation">(</span>\n      colorProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>color<span class="token punctuation">,</span>\n      bc<span class="token punctuation">.</span>r <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">,</span>\n      bc<span class="token punctuation">.</span>g <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">,</span>\n      bc<span class="token punctuation">.</span>b <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">,</span>\n      <span class="token number">1</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">blit</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token constant">TRANSPARENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">backgroundProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>\n      backgroundProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>aspectRatio<span class="token punctuation">,</span>\n      canvas<span class="token punctuation">.</span>width <span class="token operator">/</span> canvas<span class="token punctuation">.</span>height\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">blit</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token constant">SHADING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> program <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">BLOOM</span>\n      <span class="token operator">?</span> displayBloomShadingProgram\n      <span class="token operator">:</span> displayShadingProgram<span class="token punctuation">;</span>\n    <span class="token function">program</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>texelSize<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> width<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uTexture<span class="token punctuation">,</span> density<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token constant">BLOOM</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uBloom<span class="token punctuation">,</span> bloom<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uDithering<span class="token punctuation">,</span> ditheringTexture<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> scale <span class="token operator">=</span> <span class="token function">getTextureScale</span><span class="token punctuation">(</span>ditheringTexture<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>ditherScale<span class="token punctuation">,</span> scale<span class="token punctuation">.</span>x<span class="token punctuation">,</span> scale<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> program <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">BLOOM</span> <span class="token operator">?</span> displayBloomProgram <span class="token operator">:</span> displayProgram<span class="token punctuation">;</span>\n    <span class="token function">program</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uTexture<span class="token punctuation">,</span> density<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token constant">BLOOM</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uBloom<span class="token punctuation">,</span> bloom<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uDithering<span class="token punctuation">,</span> ditheringTexture<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> scale <span class="token operator">=</span> <span class="token function">getTextureScale</span><span class="token punctuation">(</span>ditheringTexture<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>ditherScale<span class="token punctuation">,</span> scale<span class="token punctuation">.</span>x<span class="token punctuation">,</span> scale<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">blit</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">applyBloom</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> destination</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>bloomFramebuffers<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> last <span class="token operator">=</span> destination<span class="token punctuation">;</span>\n\n  gl<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">BLEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">bloomPrefilterProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> knee <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">BLOOM_THRESHOLD</span> <span class="token operator">*</span> config<span class="token punctuation">.</span><span class="token constant">BLOOM_SOFT_KNEE</span> <span class="token operator">+</span> <span class="token number">0.0001</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> curve0 <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">BLOOM_THRESHOLD</span> <span class="token operator">-</span> knee<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> curve1 <span class="token operator">=</span> knee <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> curve2 <span class="token operator">=</span> <span class="token number">0.25</span> <span class="token operator">/</span> knee<span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform3f</span><span class="token punctuation">(</span>bloomPrefilterProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>curve<span class="token punctuation">,</span> curve0<span class="token punctuation">,</span> curve1<span class="token punctuation">,</span> curve2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>\n    bloomPrefilterProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>threshold<span class="token punctuation">,</span>\n    config<span class="token punctuation">.</span><span class="token constant">BLOOM_THRESHOLD</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>bloomPrefilterProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uTexture<span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">viewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> last<span class="token punctuation">.</span>width<span class="token punctuation">,</span> last<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>last<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">bloomBlurProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bloomFramebuffers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> dest <span class="token operator">=</span> bloomFramebuffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>\n      bloomBlurProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>texelSize<span class="token punctuation">,</span>\n      <span class="token number">1.0</span> <span class="token operator">/</span> last<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n      <span class="token number">1.0</span> <span class="token operator">/</span> last<span class="token punctuation">.</span>height\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>bloomBlurProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uTexture<span class="token punctuation">,</span> last<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">viewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dest<span class="token punctuation">.</span>width<span class="token punctuation">,</span> dest<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">blit</span><span class="token punctuation">(</span>dest<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    last <span class="token operator">=</span> dest<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  gl<span class="token punctuation">.</span><span class="token function">blendFunc</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">BLEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> bloomFramebuffers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> baseTex <span class="token operator">=</span> bloomFramebuffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>\n      bloomBlurProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>texelSize<span class="token punctuation">,</span>\n      <span class="token number">1.0</span> <span class="token operator">/</span> last<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n      <span class="token number">1.0</span> <span class="token operator">/</span> last<span class="token punctuation">.</span>height\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>bloomBlurProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uTexture<span class="token punctuation">,</span> last<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl<span class="token punctuation">.</span><span class="token function">viewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> baseTex<span class="token punctuation">.</span>width<span class="token punctuation">,</span> baseTex<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">blit</span><span class="token punctuation">(</span>baseTex<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    last <span class="token operator">=</span> baseTex<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  gl<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">BLEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">bloomFinalProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>\n    bloomFinalProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>texelSize<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> last<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">/</span> last<span class="token punctuation">.</span>height\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>bloomFinalProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uTexture<span class="token punctuation">,</span> last<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>bloomFinalProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>intensity<span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token constant">BLOOM_INTENSITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">viewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> destination<span class="token punctuation">.</span>width<span class="token punctuation">,</span> destination<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>destination<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">splat</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  gl<span class="token punctuation">.</span><span class="token function">viewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> simWidth<span class="token punctuation">,</span> simHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">splatProgram</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>splatProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uTarget<span class="token punctuation">,</span> velocity<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>splatProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>aspectRatio<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width <span class="token operator">/</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform2f</span><span class="token punctuation">(</span>\n    splatProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>point<span class="token punctuation">,</span>\n    x <span class="token operator">/</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n    <span class="token number">1.0</span> <span class="token operator">-</span> y <span class="token operator">/</span> canvas<span class="token punctuation">.</span>height\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform3f</span><span class="token punctuation">(</span>splatProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>color<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> <span class="token operator">-</span>dy<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1f</span><span class="token punctuation">(</span>splatProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token constant">SPLAT_RADIUS</span> <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>velocity<span class="token punctuation">.</span>write<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  velocity<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  gl<span class="token punctuation">.</span><span class="token function">viewport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dyeWidth<span class="token punctuation">,</span> dyeHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>splatProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>uTarget<span class="token punctuation">,</span> density<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  gl<span class="token punctuation">.</span><span class="token function">uniform3f</span><span class="token punctuation">(</span>splatProgram<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>color<span class="token punctuation">,</span> color<span class="token punctuation">.</span>r<span class="token punctuation">,</span> color<span class="token punctuation">.</span>g<span class="token punctuation">,</span> color<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">blit</span><span class="token punctuation">(</span>density<span class="token punctuation">.</span>write<span class="token punctuation">.</span>fbo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  density<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">multipleSplats</span><span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> color <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">COLORFUL</span>\n      <span class="token operator">?</span> <span class="token function">generateColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token constant">POINTER_COLOR</span><span class="token punctuation">.</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    color<span class="token punctuation">.</span>r <span class="token operator">*=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>\n    color<span class="token punctuation">.</span>g <span class="token operator">*=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>\n    color<span class="token punctuation">.</span>b <span class="token operator">*=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> x <span class="token operator">=</span> canvas<span class="token punctuation">.</span>width <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> y <span class="token operator">=</span> canvas<span class="token punctuation">.</span>height <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> dx <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> dy <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">splat</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">resizeCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    canvas<span class="token punctuation">.</span>width <span class="token operator">!=</span> canvas<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span>\n    canvas<span class="token punctuation">.</span>height <span class="token operator">!=</span> canvas<span class="token punctuation">.</span>clientHeight\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> canvas<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>\n    canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> canvas<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n    <span class="token function">initFramebuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\ncanvas<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mousemove&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token constant">SHOW_MOUSE_MOVEMENT</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  pointers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>moved <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  pointers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dx <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX <span class="token operator">-</span> pointers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5.0</span><span class="token punctuation">;</span>\n  pointers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dy <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetY <span class="token operator">-</span> pointers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5.0</span><span class="token punctuation">;</span>\n  pointers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX<span class="token punctuation">;</span>\n  pointers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetY<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncanvas<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;touchmove&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> touches <span class="token operator">=</span> e<span class="token punctuation">.</span>targetTouches<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> touches<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> pointer <span class="token operator">=</span> pointers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      pointer<span class="token punctuation">.</span>moved <span class="token operator">=</span> pointer<span class="token punctuation">.</span>down<span class="token punctuation">;</span>\n      pointer<span class="token punctuation">.</span>dx <span class="token operator">=</span> <span class="token punctuation">(</span>touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pageX <span class="token operator">-</span> pointer<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8.0</span><span class="token punctuation">;</span>\n      pointer<span class="token punctuation">.</span>dy <span class="token operator">=</span> <span class="token punctuation">(</span>touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pageY <span class="token operator">-</span> pointer<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8.0</span><span class="token punctuation">;</span>\n      pointer<span class="token punctuation">.</span>x <span class="token operator">=</span> touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>\n      pointer<span class="token punctuation">.</span>y <span class="token operator">=</span> touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token boolean">false</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncanvas<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseenter&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  pointers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>down <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  pointers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">POINTER_COLOR</span><span class="token punctuation">.</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncanvas<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;touchstart&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token constant">SPLAT_ON_CLICK</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> touches <span class="token operator">=</span> e<span class="token punctuation">.</span>targetTouches<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> touches<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> pointers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> pointers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">pointerPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    pointers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>identifier<span class="token punctuation">;</span>\n    pointers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>down <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    pointers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>\n    pointers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>\n    pointers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">POINTER_COLOR</span><span class="token punctuation">.</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncanvas<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mousedown&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token constant">SPLAT_ON_CLICK</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token function">multipleSplats</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseleave&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  pointers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>down <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;touchend&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> touches <span class="token operator">=</span> e<span class="token punctuation">.</span>changedTouches<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> touches<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> pointers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>identifier <span class="token operator">==</span> pointers<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> pointers<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>down <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;keydown&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&quot;KeyP&quot;</span><span class="token punctuation">)</span> config<span class="token punctuation">.</span><span class="token constant">PAUSED</span> <span class="token operator">=</span> <span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token constant">PAUSED</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> splatStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">generateColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">HSVtoRGB</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  c<span class="token punctuation">.</span>r <span class="token operator">*=</span> <span class="token number">0.15</span><span class="token punctuation">;</span>\n  c<span class="token punctuation">.</span>g <span class="token operator">*=</span> <span class="token number">0.15</span><span class="token punctuation">;</span>\n  c<span class="token punctuation">.</span>b <span class="token operator">*=</span> <span class="token number">0.15</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">HSVtoRGB</span><span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span> s<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">,</span> i<span class="token punctuation">,</span> f<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> t<span class="token punctuation">;</span>\n  i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>h <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  f <span class="token operator">=</span> h <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>\n  p <span class="token operator">=</span> v <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  q <span class="token operator">=</span> v <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> f <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  t <span class="token operator">=</span> v <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> f<span class="token punctuation">)</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>\n      <span class="token punctuation">(</span>r <span class="token operator">=</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>g <span class="token operator">=</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n      <span class="token punctuation">(</span>r <span class="token operator">=</span> q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>g <span class="token operator">=</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n      <span class="token punctuation">(</span>r <span class="token operator">=</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>g <span class="token operator">=</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>\n      <span class="token punctuation">(</span>r <span class="token operator">=</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>g <span class="token operator">=</span> q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>\n      <span class="token punctuation">(</span>r <span class="token operator">=</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>g <span class="token operator">=</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>\n      <span class="token punctuation">(</span>r <span class="token operator">=</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>g <span class="token operator">=</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    r<span class="token punctuation">,</span>\n    g<span class="token punctuation">,</span>\n    b<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">RGBToHue</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Find greatest and smallest channel values</span>\n  <span class="token keyword">let</span> cmin <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    cmax <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    delta <span class="token operator">=</span> cmax <span class="token operator">-</span> cmin<span class="token punctuation">,</span>\n    h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Calculate hue</span>\n  <span class="token comment">// No difference</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token comment">// Red is max</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmax <span class="token operator">==</span> r<span class="token punctuation">)</span> h <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>g <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> delta<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span><span class="token punctuation">;</span>\n  <span class="token comment">// Green is max</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmax <span class="token operator">==</span> g<span class="token punctuation">)</span> h <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> delta <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token comment">// Blue is max</span>\n  <span class="token keyword">else</span> h <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> g<span class="token punctuation">)</span> <span class="token operator">/</span> delta <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>\n\n  h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>h <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Make negative hues positive behind 360°</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> h <span class="token operator">+=</span> <span class="token number">360</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> h<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getResolution</span><span class="token punctuation">(</span><span class="token parameter">resolution</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> aspectRatio <span class="token operator">=</span> gl<span class="token punctuation">.</span>drawingBufferWidth <span class="token operator">/</span> gl<span class="token punctuation">.</span>drawingBufferHeight<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectRatio <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> aspectRatio <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> aspectRatio<span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>resolution <span class="token operator">*</span> aspectRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>resolution<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>gl<span class="token punctuation">.</span>drawingBufferWidth <span class="token operator">&gt;</span> gl<span class="token punctuation">.</span>drawingBufferHeight<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> max<span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> min <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> min<span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> max <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getTextureScale</span><span class="token punctuation">(</span><span class="token parameter">texture<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">x</span><span class="token operator">:</span> width <span class="token operator">/</span> texture<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n    <span class="token literal-property property">y</span><span class="token operator">:</span> height <span class="token operator">/</span> texture<span class="token punctuation">.</span>height<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">rgbToPointerColor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> c <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// let hue = RGBToHue(c[0], c[1], c[2]);</span>\n  <span class="token comment">// let c2 = HSVtoRGB(hue/360, 1.0, 1.0);</span>\n  <span class="token comment">// c2.r *= 0.15;</span>\n  <span class="token comment">// c2.g *= 0.15;</span>\n  <span class="token comment">// c2.b *= 0.15;</span>\n  <span class="token comment">// return c2;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">r</span><span class="token operator">:</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.15</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">g</span><span class="token operator">:</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.15</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">b</span><span class="token operator">:</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.15</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>',2)],e={__name:"mouse.html",setup:n=>((0,t.bv)((()=>{const n=document.getElementsByClassName("mouse_gl")[0];console.log(n,"canvas"),n.width=n.clientWidth,n.height=n.clientHeight,Array.prototype.getRandom=function(){return this[Math.floor(Math.random()*this.length)]};let s,a=[{r:0,g:.15,b:0}];function t(){mn(parseInt(Math.random()*p.RANDOM_AMOUNT)+p.RANDOM_AMOUNT/2+1)}let p={SIM_RESOLUTION:256,DYE_RESOLUTION:1024,DENSITY_DISSIPATION:.97,VELOCITY_DISSIPATION:.98,PRESSURE_DISSIPATION:.8,PRESSURE_ITERATIONS:20,CURL:30,SPLAT_RADIUS:.3,SHADING:!0,COLORFUL:!0,PAUSED:!1,BACK_COLOR:{r:0,g:0,b:0},TRANSPARENT:!1,BLOOM:!0,BLOOM_ITERATIONS:8,BLOOM_RESOLUTION:256,BLOOM_INTENSITY:.8,BLOOM_THRESHOLD:.6,BLOOM_SOFT_KNEE:.7,POINTER_COLOR:[{r:0,g:.15,b:0}],SOUND_SENSITIVITY:.25,AUDIO_RESPONSIVE:!0,FREQ_RANGE:8,FREQ_RANGE_START:0,IDLE_SPLATS:!1,RANDOM_AMOUNT:10,RANDOM_INTERVAL:1,SPLAT_ON_CLICK:!0,SHOW_MOUSE_MOVEMENT:!0};document.addEventListener("DOMContentLoaded",(()=>{window.wallpaperPropertyListener={applyUserProperties:e=>{if(e.bloom_intensity&&(p.BLOOM_INTENSITY=e.bloom_intensity.value),e.bloom_threshold&&(p.BLOOM_THRESHOLD=e.bloom_threshold.value),e.colorful&&(p.COLORFUL=e.colorful.value),e.density_diffusion&&(p.DENSITY_DISSIPATION=e.density_diffusion.value),e.enable_bloom&&(p.BLOOM=e.enable_bloom.value),e.paused&&(p.PAUSED=e.paused.value),e.pressure_diffusion&&(p.PRESSURE_DISSIPATION=e.pressure_diffusion.value),e.shading&&(p.SHADING=e.shading.value),e.splat_radius&&(p.SPLAT_RADIUS=e.splat_radius.value),e.velocity_diffusion&&(p.VELOCITY_DISSIPATION=e.velocity_diffusion.value),e.vorticity&&(p.CURL=e.vorticity.value),e.sound_sensitivity&&(p.SOUND_SENSITIVITY=e.sound_sensitivity.value),e.audio_responsive&&(p.AUDIO_RESPONSIVE=e.audio_responsive.value),e.simulation_resolution&&(p.SIM_RESOLUTION=e.simulation_resolution.value,un()),e.dye_resolution&&(p.DYE_RESOLUTION=e.dye_resolution.value,un()),e.splat_color&&(a[0]=yn(e.splat_color.value),p.COLORFUL||(p.POINTER_COLOR=[a[0]])),e.splat_color_2&&(a[1]=yn(e.splat_color_2.value)),e.splat_color_3&&(a[2]=yn(e.splat_color_3.value)),e.splat_color_4&&(a[3]=yn(e.splat_color_4.value)),e.splat_color_5&&(a[4]=yn(e.splat_color_5.value)),e.background_color){let n=e.background_color.value.split(" "),s=Math.floor(255*n[0]),a=Math.floor(255*n[1]),t=Math.floor(255*n[2]);document.body.style.backgroundColor=`rgb(${s}, ${a}, ${t})`,p.BACK_COLOR.r=s,p.BACK_COLOR.g=a,p.BACK_COLOR.b=t}e.more_colors&&!e.more_colors.value?p.POINTER_COLOR=[a[0]]:e.more_colors&&e.more_colors.value&&(p.POINTER_COLOR=a),e.use_background_image&&(p.TRANSPARENT=e.use_background_image.value),e.background_image&&(n.style.backgroundImage=`url("file:///${e.background_image.value}")`),e.repeat_background&&(n.style.backgroundRepeat=e.repeat_background.value?"repeat":"no-repeat"),e.background_image_size&&(n.style.backgroundSize=e.background_image_size.value),e.frequency_range&&(p.FREQ_RANGE=e.frequency_range.value,p.FREQ_RANGE+p.FREQ_RANGE_START>61&&(p.FREQ_RANGE_START=62-p.FREQ_RANGE)),e.frequency_range_start&&(p.FREQ_RANGE+e.frequency_range_start.value>61?p.FREQ_RANGE_START=62-p.FREQ_RANGE:p.FREQ_RANGE_START=e.frequency_range_start.value),e.idle_random_splats&&(p.IDLE_SPLATS=e.idle_random_splats.value,e.idle_random_splats.value?s=setInterval(t,1e3*p.RANDOM_INTERVAL):clearInterval(s)),e.random_splat_interval&&(p.RANDOM_INTERVAL=e.random_splat_interval.value,p.IDLE_SPLATS&&(clearInterval(s),s=setInterval(t,1e3*p.RANDOM_INTERVAL))),e.random_splat_amount&&(p.RANDOM_AMOUNT=e.random_splat_amount.value,p.IDLE_SPLATS&&(clearInterval(s),s=setInterval(t,1e3*p.RANDOM_INTERVAL))),e.splat_on_click&&(p.SPLAT_ON_CLICK=e.splat_on_click.value),e.show_mouse_movement&&(p.SHOW_MOUSE_MOVEMENT=e.show_mouse_movement.value)}},window.wallpaperRegisterAudioListener((n=>{if(!p.AUDIO_RESPONSIVE)return;if(n[0]>5)return;let s=0,a=Math.floor(n.length/2);for(let t=0;t<=p.FREQ_RANGE;t++)s+=n[t+p.FREQ_RANGE_START],s+=n[a+(t+p.FREQ_RANGE_START)];s/=2*p.FREQ_RANGE,mn(Math.floor(s*p.SOUND_SENSITIVITY*10))}))}));class e{constructor(){this.id=-1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.down=!1,this.moved=!1,this.color=p.COLORFUL?bn():p.POINTER_COLOR.getRandom()}}let o=[],c=[],i=[];o.push(new e);const{gl:u,ext:l}=function(n){const s={alpha:!0,depth:!1,stencil:!1,antialias:!1,preserveDrawingBuffer:!1};let a=n.getContext("webgl2",s);const t=!!a;let p,e;t||(a=n.getContext("webgl",s)||n.getContext("experimental-webgl",s)),t?(a.getExtension("EXT_color_buffer_float"),e=a.getExtension("OES_texture_float_linear")):(p=a.getExtension("OES_texture_half_float"),e=a.getExtension("OES_texture_half_float_linear")),a.clearColor(0,0,0,1);const o=t?a.HALF_FLOAT:p.HALF_FLOAT_OES;let c,i,u;return t?(c=r(a,a.RGBA16F,a.RGBA,o),i=r(a,a.RG16F,a.RG,o),u=r(a,a.R16F,a.RED,o)):(c=r(a,a.RGBA,a.RGBA,o),i=r(a,a.RGBA,a.RGBA,o),u=r(a,a.RGBA,a.RGBA,o)),{gl:a,ext:{formatRGBA:c,formatRG:i,formatR:u,halfFloatTexType:o,supportLinearFiltering:e}}}(n);function r(n,s,a,t){if(!function(n,s,a,t){let p=n.createTexture();n.bindTexture(n.TEXTURE_2D,p),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texImage2D(n.TEXTURE_2D,0,s,4,4,0,a,t,null);let e=n.createFramebuffer();return n.bindFramebuffer(n.FRAMEBUFFER,e),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,p,0),n.checkFramebufferStatus(n.FRAMEBUFFER)==n.FRAMEBUFFER_COMPLETE}(n,s,a,t))switch(s){case n.R16F:return r(n,n.RG16F,n.RG,t);case n.RG16F:return r(n,n.RGBA16F,n.RGBA,t);default:return null}return{internalFormat:s,format:a}}/Mobi|Android/i.test(navigator.userAgent)&&(p.SHADING=!1),l.supportLinearFiltering||(p.SHADING=!1,p.BLOOM=!1);class k{constructor(n,s){if(this.uniforms={},this.program=u.createProgram(),u.attachShader(this.program,n),u.attachShader(this.program,s),u.linkProgram(this.program),!u.getProgramParameter(this.program,u.LINK_STATUS))throw u.getProgramInfoLog(this.program);const a=u.getProgramParameter(this.program,u.ACTIVE_UNIFORMS);for(let n=0;n<a;n++){const s=u.getActiveUniform(this.program,n).name;this.uniforms[s]=u.getUniformLocation(this.program,s)}}bind(){u.useProgram(this.program)}}function d(n,s){const a=u.createShader(n);if(u.shaderSource(a,s),u.compileShader(a),!u.getShaderParameter(a,u.COMPILE_STATUS))throw u.getShaderInfoLog(a);return a}const v=d(u.VERTEX_SHADER,"\n    precision highp float;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        vL = vUv - vec2(texelSize.x, 0.0);\n        vR = vUv + vec2(texelSize.x, 0.0);\n        vT = vUv + vec2(0.0, texelSize.y);\n        vB = vUv - vec2(0.0, texelSize.y);\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n"),m=d(u.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float value;\n\n    void main () {\n        gl_FragColor = value * texture2D(uTexture, vUv);\n    }\n"),b=d(u.FRAGMENT_SHADER,"\n    precision mediump float;\n\n    uniform vec4 color;\n\n    void main () {\n        gl_FragColor = color;\n    }\n"),f=d(u.FRAGMENT_SHADER,"\n    void main () {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n"),g=d(u.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec3 C = texture2D(uTexture, vUv).rgb;\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n"),y=d(u.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n\n    void main () {\n        vec3 C = texture2D(uTexture, vUv).rgb;\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n        bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\n        C += bloom;\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n"),h=d(u.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform vec2 texelSize;\n\n    void main () {\n        vec3 L = texture2D(uTexture, vL).rgb;\n        vec3 R = texture2D(uTexture, vR).rgb;\n        vec3 T = texture2D(uTexture, vT).rgb;\n        vec3 B = texture2D(uTexture, vB).rgb;\n        vec3 C = texture2D(uTexture, vUv).rgb;\n\n        float dx = length(R) - length(L);\n        float dy = length(T) - length(B);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        C.rgb *= diffuse;\n\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n"),T=d(u.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n    uniform vec2 texelSize;\n\n    void main () {\n        vec3 L = texture2D(uTexture, vL).rgb;\n        vec3 R = texture2D(uTexture, vR).rgb;\n        vec3 T = texture2D(uTexture, vT).rgb;\n        vec3 B = texture2D(uTexture, vB).rgb;\n        vec3 C = texture2D(uTexture, vUv).rgb;\n\n        float dx = length(R) - length(L);\n        float dy = length(T) - length(B);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        C *= diffuse;\n\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n        bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\n        C += bloom;\n\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n"),R=d(u.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform vec3 curve;\n    uniform float threshold;\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n        float br = max(c.r, max(c.g, c.b));\n        float rq = clamp(br - curve.x, 0.0, curve.y);\n        rq = curve.z * rq * rq;\n        c *= max(rq, br - threshold) / max(br, 0.0001);\n        gl_FragColor = vec4(c, 0.0);\n    }\n"),E=d(u.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum;\n    }\n"),w=d(u.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform float intensity;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum * intensity;\n    }\n"),_=d(u.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTarget;\n    uniform float aspectRatio;\n    uniform vec3 color;\n    uniform vec2 point;\n    uniform float radius;\n\n    void main () {\n        vec2 p = vUv - point.xy;\n        p.x *= aspectRatio;\n        vec3 splat = exp(-dot(p, p) / radius) * color;\n        vec3 base = texture2D(uTarget, vUv).xyz;\n        gl_FragColor = vec4(base + splat, 1.0);\n    }\n"),x=d(u.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform vec2 dyeTexelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n        vec2 st = uv / tsize - 0.5;\n\n        vec2 iuv = floor(st);\n        vec2 fuv = fract(st);\n\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n    }\n\n    void main () {\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n        gl_FragColor = dissipation * bilerp(uSource, coord, dyeTexelSize);\n        gl_FragColor.a = 1.0;\n    }\n"),S=d(u.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    void main () {\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n        gl_FragColor = dissipation * texture2D(uSource, coord);\n        gl_FragColor.a = 1.0;\n    }\n"),D=d(u.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).x;\n        float R = texture2D(uVelocity, vR).x;\n        float T = texture2D(uVelocity, vT).y;\n        float B = texture2D(uVelocity, vB).y;\n\n        vec2 C = texture2D(uVelocity, vUv).xy;\n        if (vL.x < 0.0) { L = -C.x; }\n        if (vR.x > 1.0) { R = -C.x; }\n        if (vT.y > 1.0) { T = -C.y; }\n        if (vB.y < 0.0) { B = -C.y; }\n\n        float div = 0.5 * (R - L + T - B);\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n    }\n"),A=d(u.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).y;\n        float R = texture2D(uVelocity, vR).y;\n        float T = texture2D(uVelocity, vT).x;\n        float B = texture2D(uVelocity, vB).x;\n        float vorticity = R - L - T + B;\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n    }\n"),O=d(u.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uCurl;\n    uniform float curl;\n    uniform float dt;\n\n    void main () {\n        float L = texture2D(uCurl, vL).x;\n        float R = texture2D(uCurl, vR).x;\n        float T = texture2D(uCurl, vT).x;\n        float B = texture2D(uCurl, vB).x;\n        float C = texture2D(uCurl, vUv).x;\n\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n        force /= length(force) + 0.0001;\n        force *= curl * C;\n        force.y *= -1.0;\n\n        vec2 vel = texture2D(uVelocity, vUv).xy;\n        gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n    }\n"),L=d(u.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uDivergence;\n\n    vec2 boundary (vec2 uv) {\n        return uv;\n        // uncomment if you use wrap or repeat texture mode\n        // uv = min(max(uv, 0.0), 1.0);\n        // return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        float C = texture2D(uPressure, vUv).x;\n        float divergence = texture2D(uDivergence, vUv).x;\n        float pressure = (L + R + B + T - divergence) * 0.25;\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n    }\n"),F=d(u.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uVelocity;\n\n    vec2 boundary (vec2 uv) {\n        return uv;\n        // uv = min(max(uv, 0.0), 1.0);\n        // return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity.xy -= vec2(R - L, T - B);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n"),N=(u.bindBuffer(u.ARRAY_BUFFER,u.createBuffer()),u.bufferData(u.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),u.STATIC_DRAW),u.bindBuffer(u.ELEMENT_ARRAY_BUFFER,u.createBuffer()),u.bufferData(u.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3]),u.STATIC_DRAW),u.vertexAttribPointer(0,2,u.FLOAT,!1,0,0),u.enableVertexAttribArray(0),n=>{u.bindFramebuffer(u.FRAMEBUFFER,n),u.drawElements(u.TRIANGLES,6,u.UNSIGNED_SHORT,0)});let P,I,U,B,C,M,G,H,V,z,X=function(n){let s=u.createTexture();u.bindTexture(u.TEXTURE_2D,s),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_MIN_FILTER,u.LINEAR),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_MAG_FILTER,u.LINEAR),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_S,u.REPEAT),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_T,u.REPEAT),u.texImage2D(u.TEXTURE_2D,0,u.RGB,1,1,0,u.RGB,u.UNSIGNED_BYTE,new Uint8Array([255,255,255]));let a={texture:s,width:1,height:1,attach:n=>(u.activeTexture(u.TEXTURE0+n),u.bindTexture(u.TEXTURE_2D,s),n)},t=new Image;return t.onload=()=>{a.width=t.width,a.height=t.height,u.bindTexture(u.TEXTURE_2D,s),u.texImage2D(u.TEXTURE_2D,0,u.RGB,u.RGB,u.UNSIGNED_BYTE,t)},t.src="LDR_RGB1_0.png",a}();const q=new k(v,m),W=new k(v,b),Y=new k(v,f),Q=new k(v,g),K=new k(v,y),j=new k(v,h),$=new k(v,T),Z=new k(v,R),J=new k(v,E),nn=new k(v,w),sn=new k(v,_),an=new k(v,l.supportLinearFiltering?S:x),tn=new k(v,D),pn=new k(v,A),en=new k(v,O),on=new k(v,L),cn=new k(v,F);function un(){let n=fn(p.SIM_RESOLUTION),s=fn(p.DYE_RESOLUTION);P=n.width,I=n.height,U=s.width,B=s.height;const a=l.halfFloatTexType,t=l.formatRGBA,e=l.formatRG,o=l.formatR,c=l.supportLinearFiltering?u.LINEAR:u.NEAREST;C=null==C?rn(U,B,t.internalFormat,t.format,a,c):kn(C,U,B,t.internalFormat,t.format,a,c),M=null==M?rn(P,I,e.internalFormat,e.format,a,c):kn(M,P,I,e.internalFormat,e.format,a,c),G=ln(P,I,o.internalFormat,o.format,a,u.NEAREST),H=ln(P,I,o.internalFormat,o.format,a,u.NEAREST),V=rn(P,I,o.internalFormat,o.format,a,u.NEAREST),function(){let n=fn(p.BLOOM_RESOLUTION);const s=l.halfFloatTexType,a=l.formatRGBA,t=l.supportLinearFiltering?u.LINEAR:u.NEAREST;z=ln(n.width,n.height,a.internalFormat,a.format,s,t),i.length=0;for(let e=0;e<p.BLOOM_ITERATIONS;e++){let p=n.width>>e+1,o=n.height>>e+1;if(p<2||o<2)break;let c=ln(p,o,a.internalFormat,a.format,s,t);i.push(c)}}()}function ln(n,s,a,t,p,e){u.activeTexture(u.TEXTURE0);let o=u.createTexture();u.bindTexture(u.TEXTURE_2D,o),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_MIN_FILTER,e),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_MAG_FILTER,e),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_S,u.CLAMP_TO_EDGE),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_T,u.CLAMP_TO_EDGE),u.texImage2D(u.TEXTURE_2D,0,a,n,s,0,t,p,null);let c=u.createFramebuffer();return u.bindFramebuffer(u.FRAMEBUFFER,c),u.framebufferTexture2D(u.FRAMEBUFFER,u.COLOR_ATTACHMENT0,u.TEXTURE_2D,o,0),u.viewport(0,0,n,s),u.clear(u.COLOR_BUFFER_BIT),{texture:o,fbo:c,width:n,height:s,attach:n=>(u.activeTexture(u.TEXTURE0+n),u.bindTexture(u.TEXTURE_2D,o),n)}}function rn(n,s,a,t,p,e){let o=ln(n,s,a,t,p,e),c=ln(n,s,a,t,p,e);return{get read(){return o},set read(n){o=n},get write(){return c},set write(n){c=n},swap(){let n=o;o=c,c=n}}}function kn(n,s,a,t,p,e,o){return n.read=function(n,s,a,t,p,e,o){let c=ln(s,a,t,p,e,o);return q.bind(),u.uniform1i(q.uniforms.uTexture,n.attach(0)),u.uniform1f(q.uniforms.value,1),N(c.fbo),c}(n.read,s,a,t,p,e,o),n.write=ln(s,a,t,p,e,o),n}un(),mn(parseInt(20*Math.random())+3);let dn=Date.now();function vn(s,a,t,e,o){u.viewport(0,0,P,I),sn.bind(),u.uniform1i(sn.uniforms.uTarget,M.read.attach(0)),u.uniform1f(sn.uniforms.aspectRatio,n.width/n.height),u.uniform2f(sn.uniforms.point,s/n.width,1-a/n.height),u.uniform3f(sn.uniforms.color,t,-e,1),u.uniform1f(sn.uniforms.radius,p.SPLAT_RADIUS/100),N(M.write.fbo),M.swap(),u.viewport(0,0,U,B),u.uniform1i(sn.uniforms.uTarget,C.read.attach(0)),u.uniform3f(sn.uniforms.color,o.r,o.g,o.b),N(C.write.fbo),C.swap()}function mn(s){for(let a=0;a<s;a++){const s=p.COLORFUL?bn():Object.assign({},p.POINTER_COLOR.getRandom());s.r*=10,s.g*=10,s.b*=10,vn(n.width*Math.random(),n.height*Math.random(),1e3*(Math.random()-.5),1e3*(Math.random()-.5),s)}}function bn(){let n=function(n,s,a){let t,p,e,o,c,i,u,l;switch(o=Math.floor(6*n),c=6*n-o,i=0,u=1*(1-1*c),l=1*(1-1*(1-c)),o%6){case 0:t=1,p=l,e=0;break;case 1:t=u,p=1,e=0;break;case 2:t=0,p=1,e=l;break;case 3:t=0,p=u,e=1;break;case 4:t=l,p=0,e=1;break;case 5:t=1,p=0,e=u}return{r:t,g:p,b:e}}(Math.random());return n.r*=.15,n.g*=.15,n.b*=.15,n}function fn(n){let s=u.drawingBufferWidth/u.drawingBufferHeight;s<1&&(s=1/s);let a=Math.round(n*s),t=Math.round(n);return u.drawingBufferWidth>u.drawingBufferHeight?{width:a,height:t}:{width:t,height:a}}function gn(n,s,a){return{x:s/n.width,y:a/n.height}}function yn(n){let s=n.split(" ");return{r:.15*s[0],g:.15*s[1],b:.15*s[2]}}!function s(){n.width==n.clientWidth&&n.height==n.clientHeight||(n.width=n.clientWidth,n.height=n.clientHeight,un()),function(){c.length>0&&mn(c.pop());for(let n=0;n<o.length;n++){const s=o[n];s.moved&&(vn(s.x,s.y,s.dx,s.dy,s.color),s.moved=!1)}if(dn+100<Date.now()){dn=Date.now();for(let n=0;n<o.length;n++)o[n].color=p.COLORFUL?bn():p.POINTER_COLOR.getRandom()}}(),p.PAUSED||function(n){u.disable(u.BLEND),u.viewport(0,0,P,I),pn.bind(),u.uniform2f(pn.uniforms.texelSize,1/P,1/I),u.uniform1i(pn.uniforms.uVelocity,M.read.attach(0)),N(H.fbo),en.bind(),u.uniform2f(en.uniforms.texelSize,1/P,1/I),u.uniform1i(en.uniforms.uVelocity,M.read.attach(0)),u.uniform1i(en.uniforms.uCurl,H.attach(1)),u.uniform1f(en.uniforms.curl,p.CURL),u.uniform1f(en.uniforms.dt,.016),N(M.write.fbo),M.swap(),tn.bind(),u.uniform2f(tn.uniforms.texelSize,1/P,1/I),u.uniform1i(tn.uniforms.uVelocity,M.read.attach(0)),N(G.fbo),q.bind(),u.uniform1i(q.uniforms.uTexture,V.read.attach(0)),u.uniform1f(q.uniforms.value,p.PRESSURE_DISSIPATION),N(V.write.fbo),V.swap(),on.bind(),u.uniform2f(on.uniforms.texelSize,1/P,1/I),u.uniform1i(on.uniforms.uDivergence,G.attach(0));for(let n=0;n<p.PRESSURE_ITERATIONS;n++)u.uniform1i(on.uniforms.uPressure,V.read.attach(1)),N(V.write.fbo),V.swap();cn.bind(),u.uniform2f(cn.uniforms.texelSize,1/P,1/I),u.uniform1i(cn.uniforms.uPressure,V.read.attach(0)),u.uniform1i(cn.uniforms.uVelocity,M.read.attach(1)),N(M.write.fbo),M.swap(),an.bind(),u.uniform2f(an.uniforms.texelSize,1/P,1/I),l.supportLinearFiltering||u.uniform2f(an.uniforms.dyeTexelSize,1/P,1/I);let s=M.read.attach(0);u.uniform1i(an.uniforms.uVelocity,s),u.uniform1i(an.uniforms.uSource,s),u.uniform1f(an.uniforms.dt,.016),u.uniform1f(an.uniforms.dissipation,p.VELOCITY_DISSIPATION),N(M.write.fbo),M.swap(),u.viewport(0,0,U,B),l.supportLinearFiltering||u.uniform2f(an.uniforms.dyeTexelSize,1/U,1/B),u.uniform1i(an.uniforms.uVelocity,M.read.attach(0)),u.uniform1i(an.uniforms.uSource,C.read.attach(1)),u.uniform1f(an.uniforms.dissipation,p.DENSITY_DISSIPATION),N(C.write.fbo),C.swap()}(),function(s){p.BLOOM&&function(n,s){if(i.length<2)return;let a=s;u.disable(u.BLEND),Z.bind();let t=p.BLOOM_THRESHOLD*p.BLOOM_SOFT_KNEE+1e-4,e=p.BLOOM_THRESHOLD-t,o=2*t,c=.25/t;u.uniform3f(Z.uniforms.curve,e,o,c),u.uniform1f(Z.uniforms.threshold,p.BLOOM_THRESHOLD),u.uniform1i(Z.uniforms.uTexture,n.attach(0)),u.viewport(0,0,a.width,a.height),N(a.fbo),J.bind();for(let n=0;n<i.length;n++){let s=i[n];u.uniform2f(J.uniforms.texelSize,1/a.width,1/a.height),u.uniform1i(J.uniforms.uTexture,a.attach(0)),u.viewport(0,0,s.width,s.height),N(s.fbo),a=s}u.blendFunc(u.ONE,u.ONE),u.enable(u.BLEND);for(let n=i.length-2;n>=0;n--){let s=i[n];u.uniform2f(J.uniforms.texelSize,1/a.width,1/a.height),u.uniform1i(J.uniforms.uTexture,a.attach(0)),u.viewport(0,0,s.width,s.height),N(s.fbo),a=s}u.disable(u.BLEND),nn.bind(),u.uniform2f(nn.uniforms.texelSize,1/a.width,1/a.height),u.uniform1i(nn.uniforms.uTexture,a.attach(0)),u.uniform1f(nn.uniforms.intensity,p.BLOOM_INTENSITY),u.viewport(0,0,s.width,s.height),N(s.fbo)}(C.read,z),u.blendFunc(u.ONE,u.ONE_MINUS_SRC_ALPHA),u.enable(u.BLEND);let a=u.drawingBufferWidth,t=u.drawingBufferHeight;if(u.viewport(0,0,a,t),!p.TRANSPARENT){W.bind();let n=p.BACK_COLOR;u.uniform4f(W.uniforms.color,n.r/255,n.g/255,n.b/255,1),N(s)}if(p.TRANSPARENT&&(Y.bind(),u.uniform1f(Y.uniforms.aspectRatio,n.width/n.height),N(null)),p.SHADING){let n=p.BLOOM?$:j;if(n.bind(),u.uniform2f(n.uniforms.texelSize,1/a,1/t),u.uniform1i(n.uniforms.uTexture,C.read.attach(0)),p.BLOOM){u.uniform1i(n.uniforms.uBloom,z.attach(1)),u.uniform1i(n.uniforms.uDithering,X.attach(2));let s=gn(X,a,t);u.uniform2f(n.uniforms.ditherScale,s.x,s.y)}}else{let n=p.BLOOM?K:Q;if(n.bind(),u.uniform1i(n.uniforms.uTexture,C.read.attach(0)),p.BLOOM){u.uniform1i(n.uniforms.uBloom,z.attach(1)),u.uniform1i(n.uniforms.uDithering,X.attach(2));let s=gn(X,a,t);u.uniform2f(n.uniforms.ditherScale,s.x,s.y)}}N(s)}(null),requestAnimationFrame(s)}(),n.addEventListener("mousemove",(n=>{p.SHOW_MOUSE_MOVEMENT&&(o[0].moved=!0,o[0].dx=5*(n.offsetX-o[0].x),o[0].dy=5*(n.offsetY-o[0].y),o[0].x=n.offsetX,o[0].y=n.offsetY)})),n.addEventListener("touchmove",(n=>{n.preventDefault();const s=n.targetTouches;for(let n=0;n<s.length;n++){let a=o[n];a.moved=a.down,a.dx=8*(s[n].pageX-a.x),a.dy=8*(s[n].pageY-a.y),a.x=s[n].pageX,a.y=s[n].pageY}}),!1),n.addEventListener("mouseenter",(()=>{o[0].down=!0,o[0].color=p.POINTER_COLOR.getRandom()})),n.addEventListener("touchstart",(n=>{if(!p.SPLAT_ON_CLICK)return;n.preventDefault();const s=n.targetTouches;for(let n=0;n<s.length;n++)n>=o.length&&o.push(new e),o[n].id=s[n].identifier,o[n].down=!0,o[n].x=s[n].pageX,o[n].y=s[n].pageY,o[n].color=p.POINTER_COLOR.getRandom()})),n.addEventListener("mousedown",(()=>{p.SPLAT_ON_CLICK&&mn(parseInt(20*Math.random())+5)})),window.addEventListener("mouseleave",(()=>{o[0].down=!1})),window.addEventListener("touchend",(n=>{const s=n.changedTouches;for(let n=0;n<s.length;n++)for(let a=0;a<o.length;a++)s[n].identifier==o[a].id&&(o[a].down=!1)})),window.addEventListener("keydown",(n=>{"KeyP"===n.code&&(p.PAUSED=!p.PAUSED)," "===n.key&&c.push(parseInt(20*Math.random())+5)}))})),(n,s)=>((0,t.wg)(),(0,t.iD)("div",null,p)))}},80226:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-8ef3163a","path":"/webgl/mouse.html","title":"鼠标移动特效","lang":"zh-CN","frontmatter":{"title":"鼠标移动特效","date":"2022-11-15T00:00:00.000Z","category":["WebGL"],"summary":"import {onMounted} from \'vue\' onMounted(() => { const canvas = document.getElementsByClassName(\\"mouse_gl\\")[0]; console.log(canvas,\'canvas\') canvas.width = canvas.clientWidth; canva","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/webgl/mouse.html"}],["meta",{"property":"og:title","content":"鼠标移动特效"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-23T09:36:25.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-11-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-23T09:36:25.000Z"}]]},"excerpt":"","headers":[],"git":{"createdTime":1668676902000,"updatedTime":1671788185000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1},{"name":"卢祥","email":"example@email.com","commits":1},{"name":"卢祥","email":"example@qq.com","commits":1}]},"readingTime":{"minutes":25.89,"words":7768},"filePathRelative":"webgl/mouse.md","localizedDate":"2022年11月15日"}')}}]);