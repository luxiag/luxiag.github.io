"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5413],{67340:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});var e=a(71534);const l=(0,e.uE)('<h2 id="基本数据类型变量" tabindex="-1"><a class="header-anchor" href="#基本数据类型变量" aria-hidden="true">#</a> 基本数据类型变量</h2><ol><li><p><code>float</code></p><ul><li><p>数据类型：单精度浮点数，占用 32 位（4 字节）内存。</p></li><li><p>取值范围：约为 -3.4 × 10^38 到 3.4 × 10^38，可以表示的有效数字位数为 6~7 位左右。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">float</span> radius <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个单精度浮点型变量 radius</span>\n<span class="token keyword">float</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个单精度浮点型变量 pi</span>\n<span class="token keyword">float</span> volume <span class="token operator">=</span> <span class="token number">4.0</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> pi <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算球体的体积</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>int</code></p><ul><li><p>数据类型：整型变量，占用 32 位（4 字节）内存。</p></li><li><p>取值范围：约为 -2.1 × 10^9 到 2.1 × 10^9。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个整型变量 width，表示画布的宽度</span>\n<span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个整型变量 height，表示画布的高度</span>\n<span class="token keyword">int</span> area <span class="token operator">=</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span> <span class="token comment">// 计算画布的面积</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>bool</code></p><ul><li><p>数据类型：布尔型变量，只有 true 和 false 两个值，占用 8 位（1 字节）内存。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">bool</span> isBlack <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个布尔型变量 isBlack，表示颜色是否为黑色</span>\n<span class="token keyword">bool</span> isWhite <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个布尔型变量 isWhite，表示颜色是否为白色</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>double</code></p><ul><li><p>数据类型：双精度浮点数，占用 64 位（8 字节）内存。</p></li><li><p>取值范围：约为 -1.7 × 10^308 到 1.7 × 10^308，可以表示的有效数字位数为 15~16 位左右。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">double</span> radius <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个双精度浮点型变量 radius</span>\n<span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14159265358979</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个双精度浮点型变量 pi</span>\n<span class="token keyword">double</span> volume <span class="token operator">=</span> <span class="token number">4.0</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> pi <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算球体的体积</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>uint</code></p><ul><li><p>数据类型：无符号整型变量，占用 32 位（4 字节）内存。</p></li><li><p>取值范围：约为 0 到 4.2 × 10^9。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">uint</span> num1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个无符号整型变量 num1</span>\n<span class="token keyword">uint</span> num2 <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个无符号整型变量 num2</span>\n<span class="token keyword">uint</span> sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token comment">// 计算 num1 和 num2 的和</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol>',2),p=(0,e.uE)('<h2 id="向量类型变量" tabindex="-1"><a class="header-anchor" href="#向量类型变量" aria-hidden="true">#</a> 向量类型变量</h2><ol><li><p><code>vec2</code></p><ul><li><p>定义格式：<code>vec2(x, y)</code> 或 <code>vec2(v)</code></p></li><li><p>功能：表示二维向量，其中的 <code>x</code> 和 <code>y</code> 分别表示向量在 x 轴和 y 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>：表示向量在 x 轴和 y 轴方向的分量，可以是标量、浮点数或整数；</li><li><code>v</code>：表示长度为 2 的浮点型向量。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 定义一个二维坐标点。 */</span>\n<span class="token keyword">vec2</span> point <span class="token operator">=</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>vec3</code></p><ul><li><p>定义格式：<code>vec3(x, y, z)</code> 或 <code>vec3(v, z)</code></p></li><li><p>功能：表示三维向量，其中的 <code>x</code>、<code>y</code> 和 <code>z</code> 分别表示向量在 x 轴、y 轴和 z 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>：表示向量在 x 轴、y 轴和 z 轴方向的分量，可以是标量、浮点数或整数；</li><li><code>v</code>：表示长度为 2 或 3 的浮点型向量；</li><li><code>z</code>：表示向量在 z 轴方向的分量，可以是标量、浮点数或整数。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 定义一个颜色。 */</span>\n<span class="token keyword">vec3</span> color <span class="token operator">=</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>vec4</code></p><ul><li><p>定义格式：<code>vec4(x, y, z, w)</code> 或 <code>vec4(v, z, w)</code> 或 <code>vec4(v, w)</code></p></li><li><p>功能：表示四维向量，其中的 <code>x</code>、<code>y</code>、<code>z</code> 和 <code>w</code> 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>, <code>w</code>：表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量，可以是标量、浮点数或整数；</li><li><code>v</code>：表示长度为 2、3 或 4 的浮点型向量；</li><li><code>z</code>, <code>w</code>：表示向量在 z 轴和 w 轴方向的分量，可以是标量、浮点数或整数。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 定义一个四维坐标点。 */</span>\n<span class="token keyword">vec4</span> point <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>bvec2、bvec3、bvec4</code></p><ul><li><p>定义格式：<code>bvec2(x, y)</code>、<code>bvec3(x, y, z)</code> 或 <code>bvec4(x, y, z, w)</code></p></li><li><p>功能：表示布尔类型的向量，其中的 <code>x</code>、<code>y</code>、<code>z</code> 和 <code>w</code> 分别表示向量在不同维度上的布尔值。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>, <code>w</code>：表示向量在不同维度上的布尔值。</li></ul></li><li><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/* 定义一个布尔向量。 */\nbvec3 testVec = bvec3(true, false, true);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>ivec2、ivec3、ivec4</code></p><ul><li><p>定义格式：<code>ivec2(x, y)</code>、<code>ivec3(x, y, z)</code> 或 <code>ivec4(x, y, z, w)</code></p></li><li><p>功能：表示整型向量，其中的 <code>x</code>、<code>y</code>、<code>z</code> 和 <code>w</code> 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>, <code>w</code>：表示向量在不同维度上的整数分量。</li></ul></li><li><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/* 定义一个整型向量。 */\nivec3 pos = ivec3(1, 2, 3);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>uvec2、uvec3、uvec4</code></p><ul><li><p>定义格式：<code>uvec2(x, y)</code>、<code>uvec3(x, y, z)</code> 或 <code>uvec4(x, y, z, w)</code></p></li><li><p>功能：表示无符号整型向量，其中的 <code>x</code>、<code>y</code>、<code>z</code> 和 <code>w</code> 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>, <code>w</code>：表示向量在不同维度上的无符号整数分量。</li></ul></li><li><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/* 定义一个无符号整型向量。 */\nuvec4 indices = uvec4(0, 1, 2, 3);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>dvec2、dvec3、dvec4</code></p><ul><li><p>定义格式：<code>dvec2(x, y)</code>、<code>dvec3(x, y, z)</code> 或 <code>dvec4(x, y, z, w)</code></p></li><li><p>功能：表示双精度浮点型向量，其中的 <code>x</code>、<code>y</code>、<code>z</code> 和 <code>w</code> 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>, <code>w</code>：表示向量在不同维度上的双精度浮点数分量。</li></ul></li><li><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/* 定义一个双精度浮点型向量。 */\ndvec2 pos = dvec2(1.0, 2.0);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="数组类型变量" tabindex="-1"><a class="header-anchor" href="#数组类型变量" aria-hidden="true">#</a> 数组类型变量</h2><ol><li>GLSL 中的数组变量可以用来存储一组相同类型的变量。数组的长度需要在定义时指定，且长度必须是一个常量表达式，也就是在编译时就可以确定的值。 例如，定义一个长度为 5 的 float 数组：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>float array[5];\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>可以使用下标运算符（<code>[]</code>）来访问数组中的元素，从 0 开始索引。例如，访问数组 <code>array</code> 中的第三个元素：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>float value = array[2];\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>GLSL 中的数组也支持循环遍历，可以使用 for 循环来遍历数组中的每一个元素。例如，遍历数组 <code>array</code> 中的所有元素并将它们相加：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>float sum = 0.0;\nfor (int i = 0; i &lt; 5; i++) {\n    sum += array[i];\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>在 GLSL 中，还可以使用数组作为函数的参数，从而方便地将一组数据传递给函数进行处理。例如，定义一个函数 <code>average</code>，求平均值并返回：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>float average(float values[], int length) {\n    float sum = 0.0;\n    for (int i = 0; i &lt; length; i++) {\n        sum += values[i];\n    }\n    return sum / float(length);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>如果数组变量在着色器中不需要修改，可以将其声明为 <code>const</code> 类型。这样做可以提高代码的可读性和可维护性，因为这样声明后，代码中只有对数组的读取访问，而不会有对数组的写入行为。例如，定义一个常量数组 <code>colors</code>：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const vec4 colors[3] = vec4[](vec4(1.0, 0.0, 0.0, 1.0),\n                               vec4(0.0, 1.0, 0.0, 1.0),\n                               vec4(0.0, 0.0, 1.0, 1.0));\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="矩阵类型变量" tabindex="-1"><a class="header-anchor" href="#矩阵类型变量" aria-hidden="true">#</a> 矩阵类型变量</h2><ol><li><p><code>mat2</code></p><ul><li><p>定义格式：<code>mat2(m00, m01, m10, m11)</code></p></li><li><p>功能：定义一个 2x2 的矩阵，用给定的数值填充矩阵。</p></li><li><p>参数说明：</p><ul><li><code>m00</code>：矩阵中第一行第一列的值。</li><li><code>m01</code>：矩阵中第一行第二列的值。</li><li><code>m10</code>：矩阵中第二行第一列的值。</li><li><code>m11</code>：矩阵中第二行第二列的值。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用 mat2 定义一个 2x2 的旋转矩阵。 */</span>\n<span class="token keyword">float</span> angle <span class="token operator">=</span> <span class="token number">90.0</span><span class="token punctuation">;</span>\n<span class="token keyword">mat2</span> rotationMatrix <span class="token operator">=</span> <span class="token keyword">mat2</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                           <span class="token function">sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>mat3</code></p><ul><li><p>定义格式：<code>mat3(m00, m01, m02, m10, m11, m12, m20, m21, m22)</code></p></li><li><p>功能：定义一个 3x3 的矩阵，用给定的数值填充矩阵。</p></li><li><p>参数说明：</p><ul><li><code>m00</code>：矩阵中第一行第一列的值。</li><li><code>m01</code>：矩阵中第一行第二列的值。</li><li><code>m02</code>：矩阵中第一行第三列的值。</li><li><code>m10</code>：矩阵中第二行第一列的值。</li><li><code>m11</code>：矩阵中第二行第二列的值。</li><li><code>m12</code>：矩阵中第二行第三列的值。</li><li><code>m20</code>：矩阵中第三行第一列的值。</li><li><code>m21</code>：矩阵中第三行第二列的值。</li><li><code>m22</code>：矩阵中第三行第三列的值。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用 mat3 定义一个 3x3 的缩放矩阵。 */</span>\n<span class="token keyword">float</span> scaleX <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>\n<span class="token keyword">float</span> scaleY <span class="token operator">=</span> <span class="token number">3.0</span><span class="token punctuation">;</span>\n<span class="token keyword">mat3</span> scaleMatrix <span class="token operator">=</span> <span class="token keyword">mat3</span><span class="token punctuation">(</span>scaleX<span class="token punctuation">,</span>  <span class="token number">0.0</span><span class="token punctuation">,</span>     <span class="token number">0.0</span><span class="token punctuation">,</span> \n                        <span class="token number">0.0</span><span class="token punctuation">,</span>     scaleY<span class="token punctuation">,</span>  <span class="token number">0.0</span><span class="token punctuation">,</span> \n                        <span class="token number">0.0</span><span class="token punctuation">,</span>     <span class="token number">0.0</span><span class="token punctuation">,</span>     <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>mat4</code></p><ul><li><p>定义格式：<code>mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33)</code></p></li><li><p>功能：定义一个 4x4 的矩阵，用给定的数值填充矩阵。</p></li><li><p>参数说明：</p><ul><li><code>m00</code>：矩阵中第一行第一列的值。</li><li><code>m01</code>：矩阵中第一行第二列的值。</li><li><code>m02</code>：矩阵中第一行第三列的值。</li><li><code>m03</code>：矩阵中第一行第四列的值。</li><li><code>m10</code>：矩阵中第二行第一列的值。</li><li><code>m11</code>：矩阵中第二行第二列的值。</li><li><code>m12</code>：矩阵中第二行第三列的值。</li><li><code>m13</code>：矩阵中第二行第四列的值。</li><li><code>m20</code>：矩阵中第三行第一列的值。</li><li><code>m21</code>：矩阵中第三行第二列的值。</li><li><code>m22</code>：矩阵中第三行第三列的值。</li><li><code>m23</code>：矩阵中第三行第四列的值。</li><li><code>m30</code>：矩阵中第四行第一列的值。</li><li><code>m31</code>：矩阵中第四行第二列的值。</li><li><code>m32</code>：矩阵中第四行第三列的值。</li><li><code>m33</code>：矩阵中第四行第四列的值。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用 mat4 定义一个 4x4 的透视投影矩阵。 */</span>\n<span class="token keyword">float</span> fovy <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span><span class="token number">45.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">float</span> aspect <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>\n<span class="token keyword">float</span> near <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>\n<span class="token keyword">float</span> far <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>\n<span class="token keyword">mat4</span> perspectiveMatrix <span class="token operator">=</span> <span class="token keyword">mat4</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>aspect <span class="token operator">*</span> <span class="token function">tan</span><span class="token punctuation">(</span>fovy<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                           <span class="token number">0.0</span><span class="token punctuation">,</span>\n                              <span class="token number">0.0</span><span class="token punctuation">,</span>                        <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token function">tan</span><span class="token punctuation">(</span>fovy<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>          <span class="token number">0.0</span><span class="token punctuation">,</span>\n                              <span class="token number">0.0</span><span class="token punctuation">,</span>                        <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span>near <span class="token operator">-</span> far<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>near <span class="token operator">-</span> far<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>\n                              <span class="token number">0.0</span><span class="token punctuation">,</span>                        <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> near <span class="token operator">*</span> far<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>near <span class="token operator">-</span> far<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>mat2x3</code>、<code>mat2x4</code>、<code>mat3x2</code>、<code>mat3x4</code>、<code>mat4x2</code>、<code>mat4x3</code></p><ul><li><p>定义格式：类似 <code>mat2</code>、<code>mat3</code>、<code>mat4</code>，只是中间的 <code>x</code> 后面跟着的数字代表矩阵的列数。</p></li><li><p>功能：定义不同维度的矩阵类型。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用 mat3x2 定义一个 3x2 的矩阵。 */</span>\n<span class="token keyword">mat3x2</span> matrix <span class="token operator">=</span> <span class="token keyword">mat3x2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n                       <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span>\n                       <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="结构体类型变量" tabindex="-1"><a class="header-anchor" href="#结构体类型变量" aria-hidden="true">#</a> 结构体类型变量</h2><ol><li><code>struct</code></li></ol><ul><li><p>使用格式：<code>struct &lt;结构体名&gt; { &lt;成员列表&gt; };</code></p></li><li><p>功能：定义一个结构体类型。</p></li><li><p>参数说明：</p><ul><li><code>&lt;结构体名&gt;</code>：结构体类型的名称。</li><li><code>&lt;成员列表&gt;</code>：结构体类型中成员的定义。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 定义一个点的结构体类型。 */</span>\n<span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  <span class="token keyword">vec3</span> position<span class="token punctuation">;</span>\n  <span class="token keyword">vec3</span> color<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>当我们需要管理一组相关的变量时，就可以使用结构体类型。在 GLSL 中，结构体定义方式与 C 语言类似，如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>struct MyStruct {\n   float x;\n   float y;\n   float z;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结构体定义了三个浮点数成员变量：x、y、z。我们可以用点运算符来访问结构体的成员变量：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MyStruct myStruct;\nmyStruct.x = 1.0;\nmyStruct.y = 2.0;\nmyStruct.z = 3.0;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 GLSL 中，我们也可以在一个结构体中嵌套另一个结构体，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>struct Material {\n   vec3 ambient;\n   vec3 diffuse;\n   vec3 specular;\n   float shininess;\n};\n\nstruct MyObject {\n   vec3 position;\n   vec3 rotation;\n   vec3 scale;\n   Material material;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，MyObject 包含了一个 vec3 类型的 position、rotation 和 scale，以及一个 Material 类型的 material。有了这个结构体，我们就可以更方便地管理物体的位置、旋转、缩放和材质属性。</p><h2 id="纹理类型变量" tabindex="-1"><a class="header-anchor" href="#纹理类型变量" aria-hidden="true">#</a> 纹理类型变量</h2><ol><li><p><code>sampler1D</code></p><ul><li><p>表示一维纹理采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">uniform</span> <span class="token keyword">sampler1D</span> myTexture<span class="token punctuation">;</span> <span class="token comment">// 声明一个一维纹理采样器</span>\n<span class="token keyword">float</span> texCoord <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>\n<span class="token keyword">vec4</span> texColor <span class="token operator">=</span> <span class="token function">texture</span><span class="token punctuation">(</span>myTexture<span class="token punctuation">,</span> texCoord<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在指定纹理采样器和纹理坐标下采样纹理</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>sampler2D</code></p><ul><li><p>表示二维纹理采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">uniform</span> <span class="token keyword">sampler2D</span> myTexture<span class="token punctuation">;</span> <span class="token comment">// 声明一个二维纹理采样器</span>\n<span class="token keyword">vec2</span> texCoord <span class="token operator">=</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">vec4</span> texColor <span class="token operator">=</span> <span class="token function">texture</span><span class="token punctuation">(</span>myTexture<span class="token punctuation">,</span> texCoord<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在指定纹理采样器和纹理坐标下采样纹理</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>sampler3D</code></p><ul><li><p>表示三维纹理采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">uniform</span> <span class="token keyword">sampler3D</span> myTexture<span class="token punctuation">;</span> <span class="token comment">// 声明一个三维纹理采样器</span>\n<span class="token keyword">vec3</span> texCoord <span class="token operator">=</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">vec4</span> texColor <span class="token operator">=</span> <span class="token function">texture</span><span class="token punctuation">(</span>myTexture<span class="token punctuation">,</span> texCoord<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在指定纹理采样器和纹理坐标下采样纹理</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>samplerCube</code></p><ul><li><p>表示立方体纹理采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">uniform</span> <span class="token keyword">samplerCube</span> myTexture<span class="token punctuation">;</span> <span class="token comment">// 声明一个立方体纹理采样器</span>\n<span class="token keyword">vec3</span> texCoord <span class="token operator">=</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">vec4</span> texColor <span class="token operator">=</span> <span class="token function">texture</span><span class="token punctuation">(</span>myTexture<span class="token punctuation">,</span> texCoord<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在指定纹理采样器和纹理坐标下采样纹理</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>sampler1DShadow</code></p><ul><li><p>表示一维纹理阴影采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">uniform</span> <span class="token keyword">sampler1DShadow</span> myShadow<span class="token punctuation">;</span> <span class="token comment">// 声明一个一维纹理阴影采样器</span>\n<span class="token keyword">float</span> texCoord <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>\n<span class="token keyword">float</span> bias <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>\n<span class="token keyword">float</span> shadowValue <span class="token operator">=</span> <span class="token function">texture</span><span class="token punctuation">(</span>myShadow<span class="token punctuation">,</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span>texCoord<span class="token punctuation">,</span> bias<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在指定纹理采样器和纹理坐标下采样纹理</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>sampler2DShadow</code></p><ul><li><p>表示二维纹理阴影采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">uniform</span> <span class="token keyword">sampler2DShadow</span> myShadow<span class="token punctuation">;</span> <span class="token comment">// 声明一个二维纹理阴影采样器</span>\n<span class="token keyword">vec2</span> texCoord <span class="token operator">=</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">float</span> bias <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>\n<span class="token keyword">float</span> shadowValue <span class="token operator">=</span> <span class="token function">texture</span><span class="token punctuation">(</span>myShadow<span class="token punctuation">,</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span>texCoord<span class="token punctuation">,</span> bias<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在指定纹理采样器和纹理坐标下采样纹理</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="修饰符类型变量" tabindex="-1"><a class="header-anchor" href="#修饰符类型变量" aria-hidden="true">#</a> 修饰符类型变量</h2><ol><li><p><code>in</code></p><ul><li><p>使用格式：<code>in &lt;type&gt; &lt;name&gt;</code></p></li><li><p>功能：将外部数据输入到着色器中，用于顶点着色器和片元着色器中声明输入变量。输入变量的值由于渲染管线输出阶段提供。</p></li><li><p>参数说明：</p><ul><li><code>&lt;type&gt;</code>：输入变量的类型。</li><li><code>&lt;name&gt;</code>：输入变量的名称。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 顶点着色器中声明一个输入变量，表示顶点位置。 */</span>\n<span class="token keyword">in</span> <span class="token keyword">vec3</span> vertexPosition<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>out</code></p><ul><li><p>使用格式：<code>out &lt;type&gt; &lt;name&gt;</code></p></li><li><p>功能：将着色器输出发送到渲染管线的下一阶段，用于顶点着色器和片元着色器中声明输出变量。输出变量的值由着色器计算。</p></li><li><p>参数说明：</p></li><li><p><code>&lt;type&gt;</code>：输出变量的类型。</p></li><li><p><code>&lt;name&gt;</code>：输出变量的名称。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 顶点着色器中声明一个输出变量，表示变换后的顶点位置。 */</span>\n<span class="token keyword">out</span> <span class="token keyword">vec4</span> transformedPosition<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>uniform</code></p><ul><li><p>使用格式：<code>uniform &lt;type&gt; &lt;name&gt;</code></p></li><li><p>功能：在顶点着色器和片元着色器中声明全局变量，并将其作为传递参数的一部分传递到着色器中。这些变量值在渲染管线的各个阶段之间保持不变。</p></li><li><p>参数说明：</p></li><li><p><code>&lt;type&gt;</code>：变量的类型。</p></li><li><p><code>&lt;name&gt;</code>：变量的名称。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 片元着色器中使用 uniform 声明一个颜色变量，表示物体的颜色。 */</span>\n<span class="token keyword">uniform</span> <span class="token keyword">vec4</span> objectColor<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>const</code></p><ul><li><p>使用格式：<code>const &lt;type&gt; &lt;name&gt; = &lt;value&gt;</code></p></li><li><p>功能：声明在编译时就已经确定的常量。常量的值不能在程序运行期间更改。</p></li><li><p>参数说明：</p><ul><li><code>&lt;type&gt;</code>：常量的类型。</li><li><code>&lt;name&gt;</code>：常量的名称。</li><li><code>&lt;value&gt;</code>：常量的值。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 声明一个常量表示 pi 的值。 */</span>\n<span class="token keyword">const</span> <span class="token keyword">float</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>attribute</code></p><ul><li><p>使用格式：<code>attribute &lt;type&gt; &lt;name&gt;</code></p></li><li><p>功能：在顶点着色器中声明输入变量，表示每个顶点的属性。渲染管线输出阶段提供这些变量的值，并将它们传递到片元着色器中的 <code>varying</code> 变量中。</p></li><li><p>参数说明：</p><ul><li><code>&lt;type&gt;</code>：顶点属性的类型。</li><li><code>&lt;name&gt;</code>：顶点属性的名称。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 顶点着色器中声明一个 attribute 变量，表示顶点法向量。 */</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec3</span> vertexNormal<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>varying</code></p><ul><li><p>使用格式：<code>varying &lt;type&gt; &lt;name&gt;</code></p></li><li><p>功能：在顶点着色器和片元着色器之间声明变量，表示顶点属性在顶点到像素的过程中插值的结果。顶点着色器计算 <code>varying</code> 变量的值，然后通过渲染管线输出阶段传递给片元着色器。</p></li><li><p>参数说明：</p><ul><li><code>&lt;type&gt;</code>：变量的类型。</li><li><code>&lt;name&gt;</code>：变量的名称。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 顶点着色器中声明一个 varying 变量，表示变换后的顶点法向量。 */</span>\n<span class="token keyword">varying</span> <span class="token keyword">vec3</span> transformedNormal<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="uniforms" tabindex="-1"><a class="header-anchor" href="#uniforms" aria-hidden="true">#</a> uniforms</h3><p>尽管每个线程和其他线程之间不能有数据交换，但我们能从 CPU 给每个线程输入数据。因为显卡的架构，所有线程的输入值必须统一（uniform），而且必须设为只读。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> uniforms <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">u_time</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1.0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">u_resolution</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;v2&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Vector2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> material <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>ShaderMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">uniforms</span><span class="token operator">:</span> uniforms<span class="token punctuation">,</span>\n  <span class="token literal-property property">vertexShader</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;vertexShader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>\n  <span class="token literal-property property">fragmentShader</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;fragmentShader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">onWindowResize</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  renderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  uniforms<span class="token punctuation">.</span>u_resolution<span class="token punctuation">.</span>value<span class="token punctuation">.</span>x <span class="token operator">=</span> renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n  uniforms<span class="token punctuation">.</span>u_resolution<span class="token punctuation">.</span>value<span class="token punctuation">.</span>y <span class="token operator">=</span> renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> clock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  uniforms<span class="token punctuation">.</span>u_time<span class="token punctuation">.</span>value <span class="token operator">+=</span> clock<span class="token punctuation">.</span><span class="token function">getDelta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特殊类型变量" tabindex="-1"><a class="header-anchor" href="#特殊类型变量" aria-hidden="true">#</a> 特殊类型变量</h2><ol><li><p><code>void</code></p><ul><li><p>使用格式：<code>void</code></p></li><li><p>功能：表示无类型、无返回值的函数。通常用于定义一个不返回值的函数。</p></li><li><p>参数说明：无参数。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 定义一个不返回值的函数。 */</span>\n<span class="token keyword">void</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>function</code></p><ul><li><p>使用格式：<code>return_type function_name(arguments) { function_body }</code></p></li><li><p>功能：定义一个可以重复使用的函数，根据传入参数不同进行不同的操作。</p></li><li><p>参数说明：</p><ul><li><code>return_type</code>：函数返回值的类型。</li><li><code>function_name</code>：函数名。</li><li><code>arguments</code>：函数参数，用逗号分隔多个参数，每个参数包括类型和名称。</li><li><code>function_body</code>：函数体，包括函数执行的代码。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 定义一个加法函数。 */</span>\n<span class="token keyword">float</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>layout</code></p><ul><li><p>使用格式：<code>layout (qualifier) type name</code></p></li><li><p>功能：控制变量如何被存储和传递。</p></li><li><p>参数说明：</p><ul><li><code>qualifier</code>：布局限定符，例如 <code>location</code>、<code>binding</code> 等。</li><li><code>type</code>：变量类型，例如 <code>float</code>、<code>vec2</code>、<code>vec3</code> 等。</li><li><code>name</code>：变量名，用户自定义的标识符。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用 layout 限定符标记顶点位置和颜色的位置。 */</span>\n<span class="token keyword">layout</span> <span class="token punctuation">(</span>location <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">vec3</span> position<span class="token punctuation">;</span>\n<span class="token keyword">layout</span> <span class="token punctuation">(</span>location <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">vec4</span> color<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_Position <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_</code></p><ul><li><p>使用格式：内置变量有多种，例如 <code>gl_Position</code>、<code>gl_FragColor</code>、<code>gl_PointSize</code> 等。</p></li><li><p>功能：内置变量由 GLSL 定义和提供，可以用于访问 OpenGL ES 渲染管线中的状态和数据。</p></li><li><p>参数说明：内置变量具体用法和含义根据不同的内置变量而异。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用 gl_Position 变量设置顶点位置。 */</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_Position <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 使用 gl_FragColor 变量设置片元颜色。 */</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_FragColor <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="顶点着色器变量" tabindex="-1"><a class="header-anchor" href="#顶点着色器变量" aria-hidden="true">#</a> 顶点着色器变量</h2><ol><li><p><code>gl_FogCoord</code></p><ul><li><p>类型：<code>float</code></p></li><li><p>功能：雾的深度值，在雾效果中使用。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 在片元着色器中使用 gl_FogCoord 计算雾效果。\n   注意：需启用雾效果，具体方式为调用 glEnable(GL_FOG)。 */</span>\n<span class="token keyword">varying</span> <span class="token keyword">vec4</span> v_Position<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">vec4</span> u_FogColor<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">float</span> u_FogNear<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">float</span> u_FogFar<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 计算顶点到相机的距离。</span>\n    <span class="token keyword">float</span> depth <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>v_Position<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 计算雾的深度值。</span>\n    gl_FogCoord <span class="token operator">=</span> <span class="token punctuation">(</span>depth <span class="token operator">-</span> u_FogNear<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>u_FogFar <span class="token operator">-</span> u_FogNear<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 输出颜色值。</span>\n    gl_FragColor <span class="token operator">=</span> u_FogColor<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ModelViewMatrix</code></p><ul><li><p>类型：<code>mat4</code></p></li><li><p>功能：物体从模型坐标系转换到相机坐标系的矩阵。包括了模型变换和相机变换。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 将物体从模型坐标系转换到相机坐标系。 */</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec3</span> a_Position<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> u_ModelViewMatrix<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> u_ProjectionMatrix<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_Position <span class="token operator">=</span> u_ProjectionMatrix <span class="token operator">*</span> u_ModelViewMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>a_Position<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ProjectionMatrix</code></p><ul><li><p>类型：<code>mat4</code></p></li><li><p>功能：将相机坐标系中的点投影到裁剪空间的矩阵。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 将相机坐标系中的点投影到裁剪空间中。 */</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec3</span> a_Position<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> u_ModelViewMatrix<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> u_ProjectionMatrix<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_Position <span class="token operator">=</span> u_ProjectionMatrix <span class="token operator">*</span> u_ModelViewMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>a_Position<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ModelViewProjectionMatrix</code></p><ul><li><p>类型：<code>mat4</code></p></li><li><p>功能：将物体从模型坐标系转换到裁剪空间的矩阵。包括了模型变换、相机变换和投影变换。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 将物体从模型坐标系转换到裁剪空间中。 */</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec3</span> a_Position<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> u_ModelViewProjectionMatrix<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_Position <span class="token operator">=</span> u_ModelViewProjectionMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>a_Position<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_TextureMatrix</code></p><ul><li><p>类型：<code>mat4</code></p></li><li><p>功能：纹理坐标变换矩阵。与纹理坐标配合使用，用于实现纹理的旋转、平移和缩放等变换效果。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 在顶点着色器中使用纹理坐标变换矩阵实现纹理旋转效果。 */</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec2</span> a_TexCoord<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> u_TextureMatrix<span class="token punctuation">;</span>\n<span class="token keyword">varying</span> <span class="token keyword">vec2</span> v_TexCoord<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    v_TexCoord <span class="token operator">=</span> <span class="token punctuation">(</span>u_TextureMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>a_TexCoord<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xy<span class="token punctuation">;</span>\n    gl_Position <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>a_Position<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_NormalMatrix</code></p><ul><li><p>类型：<code>mat4</code></p></li><li><p>功能：法向量变换矩阵，在光照计算中使用。用于将物体表面的法向量从模型坐标系变换到相机坐标系，并保持其在坐标系中的垂直性。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 在顶点着色器中使用法向量变换矩阵将法向量从模型坐标系变换到相机坐标系中。 */</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec3</span> a_Normal<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> u_NormalMatrix<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_Normal <span class="token operator">=</span> <span class="token keyword">mat3</span><span class="token punctuation">(</span>u_NormalMatrix<span class="token punctuation">)</span> <span class="token operator">*</span> a_Normal<span class="token punctuation">;</span>\n    gl_Position <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>a_Position<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ModelViewMatrixInverse</code></p><ul><li><p>类型：<code>mat4</code>。</p></li><li><p>描述：模型视图矩阵的逆矩阵。用于将顶点从视图空间转换回模型空间。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用 gl_ModelViewMatrixInverse 将顶点从视图空间转换回模型空间。 */</span>\n<span class="token keyword">vec4</span> vertexInViewSpace <span class="token operator">=</span> gl_ModelViewMatrix <span class="token operator">*</span> gl_Vertex<span class="token punctuation">;</span>\n<span class="token keyword">vec4</span> vertexInModelSpace <span class="token operator">=</span> gl_ModelViewMatrixInverse <span class="token operator">*</span> vertexInViewSpace<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ProjectionMatrixInverse</code></p><ul><li><p>类型：<code>mat4</code>。</p></li><li><p>描述：投影矩阵的逆矩阵。用于将顶点从裁剪空间转换回标准化设备空间。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用 gl_ProjectionMatrixInverse 将顶点从裁剪空间转换回标准化设备空间。 */</span>\n<span class="token keyword">vec4</span> vertexInClipSpace <span class="token operator">=</span> gl_ModelViewProjectionMatrix <span class="token operator">*</span> gl_Vertex<span class="token punctuation">;</span>\n<span class="token keyword">vec4</span> vertexInNormalizedDeviceSpace <span class="token operator">=</span> gl_ProjectionMatrixInverse <span class="token operator">*</span> vertexInClipSpace<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ModelViewProjectionMatrixInverse</code></p><ul><li><p>类型：<code>mat4</code>。</p></li><li><p>描述：模型视图投影矩阵的逆矩阵。用于将顶点从裁剪空间转换回模型空间。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用 gl_ModelViewProjectionMatrixInverse 将顶点从裁剪空间转换回模型空间。 */</span>\n<span class="token keyword">vec4</span> vertexInClipSpace <span class="token operator">=</span> gl_ModelViewProjectionMatrix <span class="token operator">*</span> gl_Vertex<span class="token punctuation">;</span>\n<span class="token keyword">vec4</span> vertexInModelSpace <span class="token operator">=</span> gl_ModelViewProjectionMatrixInverse <span class="token operator">*</span> vertexInClipSpace<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_TextureMatrixInverse</code></p></li></ol><ul><li><p>类型：<code>mat4</code>。</p></li><li><p>描述：纹理矩阵的逆矩阵。常用于对纹理坐标进行变换。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用 gl_TextureMatrixInverse 对纹理坐标进行变换。 */</span>\n<span class="token keyword">vec4</span> texCoord <span class="token operator">=</span> gl_TextureMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>gl_MultiTexCoord0<span class="token punctuation">.</span>xy<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">vec4</span> transformedTexCoord <span class="token operator">=</span> gl_TextureMatrixInverse <span class="token operator">*</span> texCoord<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="11"><li><code>gl_ModelViewMatrixTranspose</code></li></ol><ul><li><p>功能：表示模型视图变换矩阵的转置矩阵。该矩阵可以将当前顶点从模型坐标系变换到视图坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 假设需要对顶点进行模型视图变换，将模型坐标系下的顶点坐标变换到视图坐标系下，并将变换后的顶点坐标传递给片元着色器。*/</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec3</span> aPosition<span class="token punctuation">;</span> \n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> uModelViewMatrix<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> uProjectionMatrix<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_Position <span class="token operator">=</span> uProjectionMatrix <span class="token operator">*</span> uModelViewMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>aPosition<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="12"><li><code>gl_ProjectionMatrixTranspose</code></li></ol><ul><li><p>功能：表示投影变换矩阵的转置矩阵。该矩阵可以将当前顶点从视图坐标系变换到裁剪坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 假设需要将顶点从视图坐标系变换到裁剪坐标系，并将变换后的坐标传递给片元着色器。*/</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec4</span> aPosition<span class="token punctuation">;</span> \n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> uProjectionMatrix<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_Position <span class="token operator">=</span> uProjectionMatrix <span class="token operator">*</span> aPosition<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="13"><li><code>gl_ModelViewProjectionMatrixTranspose</code></li></ol><ul><li><p>功能：表示模型视图投影变换矩阵的转置矩阵。该矩阵可以将当前顶点从模型坐标系变换到裁剪坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 假设需要对顶点进行模型视图投影变换，将模型坐标系下的顶点坐标变换到裁剪坐标系下，并将变换后的顶点坐标传递给片元着色器。*/</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec3</span> aPosition<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> uModelViewProjectionMatrix<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_Position <span class="token operator">=</span> uModelViewProjectionMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>aPosition<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="14"><li><code>gl_TextureMatrixTranspose</code></li></ol><ul><li><p>功能：表示纹理变换矩阵的转置矩阵。该矩阵可以将当前顶点从纹理坐标系变换到纹理单元坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 假设需要对纹理坐标进行变换，将纹理坐标系下的顶点坐标变换到纹理单元坐标系下，并将变换后的顶点坐标传递给片元着色器。*/</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec2</span> aTexCoord<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> uTextureMatrix<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_TexCoord<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> uTextureMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>aTexCoord<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="15"><li><code>gl_ModelViewMatrixInverseTranspose</code></li></ol><ul><li><p>功能：表示模型视图变换的逆转置矩阵，用于对法线进行变换。该矩阵可以将当前法线从模型坐标系变换到视图坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 假设需要对法线进行变换，将模型坐标系下的法线变换到视图坐标系下，并将变换后的法线传递给片元着色器。*/</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec3</span> aNormal<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> uModelViewMatrix<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> uNormalMatrix<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">vec3</span> transformedNormal <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token keyword">mat3</span><span class="token punctuation">(</span>uModelViewMatrix<span class="token punctuation">)</span> <span class="token operator">*</span> uNormalMatrix <span class="token operator">*</span> aNormal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 使用变换后的法线进行接下来的计算</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="16"><li><code>gl_ProjectionMatrixInverseTranspose</code></li></ol><ul><li><p>功能：表示投影变换的逆转置矩阵，用于对法线进行变换。该矩阵可以将当前法线从视图坐标系变换到裁剪坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 假设需要对法线进行变换，将视图坐标系下的法线变换到裁剪坐标系下，并将变换后的法线传递给片元着色器。*/</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec3</span> aNormal<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> uProjectionMatrix<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> uNormalMatrix<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">vec3</span> transformedNormal <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token keyword">mat3</span><span class="token punctuation">(</span>uProjectionMatrix<span class="token punctuation">)</span> <span class="token operator">*</span> uNormalMatrix <span class="token operator">*</span> aNormal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 使用变换后的法线进行接下来的计算</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="17"><li><code>gl_ModelViewProjectionMatrixInverseTranspose</code></li></ol><ul><li><p>类型：4x4 矩阵</p></li><li><p>功能：计算模型视图投影矩阵的逆转置矩阵，并将其传递给片元着色器，用于法线向量变换。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 将法线向量变换为视图坐标系下的向量。 */</span>\n<span class="token keyword">varying</span> <span class="token keyword">vec3</span> vertexNormal<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> modelViewProjectionMatrix<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> gl_ModelViewProjectionMatrixInverseTranspose<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">vec3</span> norm <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>gl_ModelViewProjectionMatrixInverseTranspose <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>vertexNormal<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xyz<span class="token punctuation">;</span>\n    <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="18"><li><code>gl_TextureMatrixInverseTranspose</code></li></ol><ul><li><p>类型：4x4 矩阵</p></li><li><p>功能：计算纹理矩阵的逆转置矩阵，并将其传递给片元着色器，用于法线向量变换。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 将法线向量变换为纹理坐标系下的向量。 */</span>\n<span class="token keyword">varying</span> <span class="token keyword">vec3</span> vertexNormal<span class="token punctuation">;</span>\n<span class="token keyword">varying</span> <span class="token keyword">vec2</span> vertexTexCoord<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> textureMatrix<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> gl_TextureMatrixInverseTranspose<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">vec3</span> norm <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>gl_TextureMatrixInverseTranspose <span class="token operator">*</span> textureMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>vertexNormal<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xyz<span class="token punctuation">;</span>\n    <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="19"><li><code>gl_DepthRangeNear</code></li></ol><ul><li><p>类型：浮点数</p></li><li><p>功能：场景深度的近平面。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 计算深度值。 */</span>\n<span class="token keyword">varying</span> <span class="token keyword">vec4</span> vertexPosition<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">float</span> gl_DepthRangeNear<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">float</span> gl_DepthRangeFar<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_Position <span class="token operator">=</span> gl_ModelViewProjectionMatrix <span class="token operator">*</span> vertexPosition<span class="token punctuation">;</span>\n    gl_Position<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token punctuation">(</span>gl_Position<span class="token punctuation">.</span>z <span class="token operator">/</span> gl_Position<span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">;</span>\n    gl_Position<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token function">mix</span><span class="token punctuation">(</span>gl_DepthRangeNear<span class="token punctuation">,</span> gl_DepthRangeFar<span class="token punctuation">,</span> gl_Position<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="20"><li><code>gl_DepthRangeFar</code></li></ol><ul><li>类型：浮点数</li><li>功能：场景深度的远平面。</li><li>示例：与 <code>gl_DepthRangeNear</code> 用法相同。</li></ul><ol start="21"><li><code>gl_TexCoord[]</code></li></ol><ul><li><p>类型：四维向量数组</p></li><li><p>功能：传递纹理坐标给片元着色器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 在片元着色器中使用纹理坐标进行纹理采样。 */</span>\n<span class="token keyword">varying</span> <span class="token keyword">vec4</span> gl_TexCoord<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">sampler2D</span> texture<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">vec4</span> color <span class="token operator">=</span> <span class="token function">texture2D</span><span class="token punctuation">(</span>texture<span class="token punctuation">,</span> gl_TexCoord<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="22"><li><code>gl_FogFragCoord</code></li></ol><ul><li><p>类型：浮点数</p></li><li><p>功能：计算像素与雾起点之间的距离，并将这个距离传递给片元着色器，用于计算雾的程度。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 计算与雾起点之间的距离并进行颜色混合。 */</span>\n<span class="token keyword">varying</span> <span class="token keyword">float</span> gl_FogFragCoord<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">vec4</span> fogColor<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n    <span class="token keyword">float</span> fogFactor <span class="token operator">=</span> <span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gl_FogFragCoord <span class="token operator">-</span> fogStart<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>fogEnd <span class="token operator">-</span> fogStart<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gl_FragColor <span class="token operator">=</span> <span class="token function">mix</span><span class="token punctuation">(</span>fogColor<span class="token punctuation">,</span> gl_FragColor<span class="token punctuation">,</span> fogFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="23"><li><code>gl_Position</code></li></ol><ul><li><p>类型：四维向量</p></li><li><p>功能：计算顶点位置的裁剪坐标，并将其传递给下一阶段的渲染管线。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 计算顶点位置的裁剪坐标。 */</span>\n<span class="token keyword">attribute</span> <span class="token keyword">vec4</span> position<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> modelViewProjectionMatrix<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_Position <span class="token operator">=</span> modelViewProjectionMatrix <span class="token operator">*</span> position<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="24"><li><code>gl_PointSize</code></li></ol><ul><li><p>类型：浮点数</p></li><li><p>功能：设置渲染点的大小。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 设置点的大小并进行颜色混合。 */</span>\n<span class="token keyword">varying</span> <span class="token keyword">float</span> dotSize<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n    gl_PointSize <span class="token operator">=</span> dotSize<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="片段着色器" tabindex="-1"><a class="header-anchor" href="#片段着色器" aria-hidden="true">#</a> 片段着色器</h2><ol><li><p><code>gl_FragCoord</code></p><ul><li><p>类型：<code>vec4</code></p></li><li><p>功能：表示当前像素的屏幕坐标，其中 <code>x</code> 和 <code>y</code> 表示像素在屏幕上的坐标值，<code>z</code> 表示深度值，<code>w</code> 固定为 1.0。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 将当前像素的屏幕坐标传入 uniform 变量中。 */</span>\n<span class="token keyword">uniform</span> <span class="token keyword">vec4</span> u_screenCoord<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  u_screenCoord <span class="token operator">=</span> gl_FragCoord<span class="token punctuation">;</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_FrontFacing</code></p><ul><li><p>类型：<code>bool</code></p></li><li><p>功能：表示当前三角形的正面朝向。如果为 <code>true</code>，表示正面朝向屏幕；如果为 <code>false</code>，表示背面朝向屏幕。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 根据 gl_FrontFacing 来决定片元颜色。 */</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>gl_FrontFacing<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_FragColor <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正面为红色</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    gl_FragColor <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 背面为绿色</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_PointCoord</code></p><ul><li><p>类型：<code>vec2</code></p></li><li><p>功能：表示当前片元在点精灵中的坐标，取值范围为 <code>[0, 1]</code>。仅当当前渲染为点精灵时有效。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用 gl_PointCoord 来计算片元颜色。 */</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">float</span> dist <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>gl_PointCoord <span class="token operator">-</span> <span class="token keyword">vec2</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dist <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gl_FragColor <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 点中心为红色</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    gl_FragColor <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 点边缘为绿色</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_FragColor</code></p><ul><li><p>类型：<code>vec4</code></p></li><li><p>功能：表示当前片元的颜色。最终渲染结果将取决于此变量的值。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 将颜色写入 gl_FragColor 中。 */</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  gl_FragColor <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 红色</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_FragDepth</code></p><ul><li><p>类型：<code>float</code></p></li><li><p>功能：表示当前片元在深度缓冲中的深度值。如果修改此变量的值，则可以手动控制深度测试的通过情况。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 设置深度值，确保物体不会被遮挡。 */</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  gl_FragDepth <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span> <span class="token comment">// 将深度值设置为 0.5</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_FragData</code></p><ul><li><p>类型：<code>vec4[]</code></p></li><li><p>功能：表示当前片元写入的颜色值。如果使用了多个颜色缓冲，则可以使用此变量来指定写入不同的缓冲区。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 使用多个颜色缓冲，分别写入不同的颜色值。 */</span>\n<span class="token keyword">layout</span><span class="token punctuation">(</span>location <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">out</span> <span class="token keyword">vec4</span> outColor1<span class="token punctuation">;</span>\n<span class="token keyword">layout</span><span class="token punctuation">(</span>location <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">out</span> <span class="token keyword">vec4</span> outColor2<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  outColor1 <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将红色写入第一个颜色缓冲</span>\n  outColor2 <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将绿色写入第二个颜色缓冲</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_SampleMask</code></p><ul><li><p>功能：获取多重采样缓冲区中每个样本的掩码值。掩码值确定哪些样本需要参与着色器的执行。默认情况下，所有样本的掩码值均为 <code>0xFF</code>，表示所有样本都参与着色器的执行。</p></li><li><p>类型：<code>uint</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 获取当前片元着色器中第 0 个样本的掩码值。*/</span>\n<span class="token keyword">uint</span> mask <span class="token operator">=</span> gl_SampleMask<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_SampleID</code></p><ul><li><p>功能：获取当前片元所在的样本序号。序号从 0 开始，最多可以有 GL_MAX_SAMPLES 个样本。</p></li><li><p>类型：<code>int</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 获取当前片元所在的样本序号。*/</span>\n<span class="token keyword">int</span> sampleID <span class="token operator">=</span> gl_SampleID<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_SamplePosition</code></p><ul><li><p>功能：获取当前片元所在样本的位置坐标。位置坐标是归一化设备坐标系下的坐标。</p></li><li><p>类型：<code>vec2</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 获取当前片元所在样本的位置坐标。*/</span>\n<span class="token keyword">vec2</span> position <span class="token operator">=</span> gl_SamplePosition<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_PrimitiveID</code></p></li></ol><ul><li><p>功能：获取当前片元所在的图元 ID。</p></li><li><p>类型：<code>int</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 获取当前片元所在的图元 ID。*/</span>\n<span class="token keyword">int</span> primitiveID <span class="token operator">=</span> gl_PrimitiveID<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="11"><li><code>gl_ViewportIndex</code></li></ol><ul><li><p>功能：获取当前片元所在的视口的索引值。</p></li><li><p>类型：<code>int</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 获取当前片元所在的视口的索引值。*/</span>\n<span class="token keyword">int</span> viewportIndex <span class="token operator">=</span> gl_ViewportIndex<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="12"><li><code>gl_Layer</code></li></ol><ul><li><p>功能：获取当前片元所在的图元的渲染层次。</p></li><li><p>类型：<code>int</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 获取当前片元所在的图元的渲染层次。*/</span>\n<span class="token keyword">int</span> layer <span class="token operator">=</span> gl_Layer<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="13"><li><code>gl_ClipDistance[]</code></li></ol><ul><li><p>功能：获取当前片元到每个裁剪平面的距离值。裁剪平面是由 <code>gl_ClipDistance</code> 顶点输出变量设置的。</p></li><li><p>类型：<code>float</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 获取当前片元到第 0 个裁剪平面的距离值。*/</span>\n<span class="token keyword">float</span> distance <span class="token operator">=</span> gl_ClipDistance<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="14"><li><code>gl_FragStencilRef</code></li></ol><ul><li><p>功能：获取当前片元的模板测试参考值。参考值是由 <code>glStencilFuncSeparate</code> 函数设置的。</p></li><li><p>类型：<code>int</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token comment">/* 获取当前片元的模板测试参考值。*/</span>\n<span class="token keyword">int</span> stencilRef <span class="token operator">=</span> gl_FragStencilRef<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="精度限定符" tabindex="-1"><a class="header-anchor" href="#精度限定符" aria-hidden="true">#</a> 精度限定符</h2><table><thead><tr><th>限定符</th><th>描述</th></tr></thead><tbody><tr><td>highp</td><td>满足顶点着色语言的最低要求。对片段着色语言是可选项</td></tr><tr><td>mediump</td><td>满足片段着色语言的最低要求，其对于范围和精度的要求必须不低于 lowp 并且不高于 highp</td></tr><tr><td>lowp</td><td>范围和精度可低于 mediump，但仍可以表示所有颜色通道的所有颜色值</td></tr></tbody></table><ol><li><p>精度限定符的使用格式：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">precision</span> qualifier type precisionLevel<span class="token punctuation">;</span>\n<span class="token comment">//例如 </span>\n<span class="token keyword">precision</span> <span class="token keyword">highp</span> <span class="token keyword">float</span><span class="token punctuation">;</span>\n<span class="token keyword">precision</span> <span class="token keyword">mediump</span> <span class="token keyword">float</span><span class="token punctuation">;</span>\n<span class="token keyword">precision</span> <span class="token keyword">lowp</span> <span class="token keyword">float</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>precision</code>：表示精度限定符的关键字。</li><li><code>qualifier</code>：限定符的具体类型，包括 <code>lowp</code>、<code>mediump</code> 和 <code>highp</code>。</li><li><code>type</code>：需要指定精度的数据类型，例如 <code>float</code>、<code>vec2</code>、<code>mat3</code> 等。</li><li><code>precisionLevel</code>：指定数据类型的精度级别，必须是 <code>int</code> 值或常量表达式。</li></ul></li><li><p>精度限定符的作用：</p><ul><li>主要作用是控制变量存储的精度，可以用于性能优化，提高代码效率。</li><li>不同的 GPU 和移动设备支持的精度级别不同，使用精度限定符可以确保在不同设备上获得一致的运行结果。</li></ul></li><li><p>精度限定符的三种类型：</p><ul><li><code>lowp</code>：代表低精度，通常用于节省 GPU 资源。</li><li><code>mediump</code>：代表中等精度，通常用于平衡 GPU 资源和图像质量。</li><li><code>highp</code>：代表高精度，通常用于提高图像质量，但会消耗大量 GPU 资源。</li></ul></li></ol><p>举例说明：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">precision</span> <span class="token keyword">highp</span> <span class="token keyword">float</span><span class="token punctuation">;</span>\n<span class="token keyword">vec2</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，<code>a</code> 数组的元素将使用 <code>highp</code> 精度级别存储，这可能会占用较多的 GPU 资源，但可以获得更高的图像精度。</p>',82),o={},t=(0,a(61935).Z)(o,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,[l,(0,e.kq)(" | 类型  | 含义                              |\n| ----- | --------------------------------- |\n| vecn  | 包含 n 个 float 分量的默认向量    |\n| bvecn | 包含 n 个 bool 分量的向量         |\n| ivecn | 包含 n 个 int 分量的向量          |\n| uvecn | 包含 n 个 unsigned int 分量的向量 |\n| dvecn | 包含 n 个 double 分量的向量       | "),(0,e.kq)(" | 变量类别   | 变量类型                  | 描述                               |\n| ---------- | ------------------------- | ---------------------------------- |\n| 空         | void                      | 用于无返回值的函数或空的参数列表   |\n| 标量       | float, int, bool          | 浮点型，整型，布尔型的标量数据类型 |\n| 浮点型向量 | float, vec2, vec3, vec4   | 包含 1，2，3，4 个元素的浮点型向量 |\n| 整数型向量 | int, ivec2, ivec3, ivec4  | 包含 1，2，3，4 个元素的整型向量   |\n| 布尔型向量 | bool, bvec2, bvec3, bvec4 | 包含 1，2，3，4 个元素的布尔型向量 |\n| 矩阵       | mat2, mat3, mat4          | 尺寸为 2x2，3x3，4x4 的浮点型矩阵  |\n| 纹理句柄   | sampler2D, samplerCube    | 表示 2D，立方体纹理的句柄          | "),p])}]])},61935:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},16203:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-6ced71b6","path":"/glsl/glsl-vars.html","title":"GLSL的变量","lang":"zh-CN","frontmatter":{"title":"GLSL的变量","category":["GLSL"],"date":"2022-10-02T00:00:00.000Z","summary":"基本数据类型变量 1. float 数据类型：单精度浮点数，占用 32 位（4 字节）内存。; 取值范围：约为 -3.4 × 10^38 到 3.4 × 10^38，可以表示的有效数字位数为 6~7 位左右。; 示例：; 2. int 数据类型：整型变量，占用 32 位（4 字节）内存。; 取值范围：约为 -2.1 × 10^9 到 2.1 × 10^9。;","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/glsl/glsl-vars.html"}],["meta",{"property":"og:title","content":"GLSL的变量"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-18T09:30:35.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-10-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-18T09:30:35.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"基本数据类型变量","slug":"基本数据类型变量","link":"#基本数据类型变量","children":[]},{"level":2,"title":"向量类型变量","slug":"向量类型变量","link":"#向量类型变量","children":[]},{"level":2,"title":"数组类型变量","slug":"数组类型变量","link":"#数组类型变量","children":[]},{"level":2,"title":"矩阵类型变量","slug":"矩阵类型变量","link":"#矩阵类型变量","children":[]},{"level":2,"title":"结构体类型变量","slug":"结构体类型变量","link":"#结构体类型变量","children":[]},{"level":2,"title":"纹理类型变量","slug":"纹理类型变量","link":"#纹理类型变量","children":[]},{"level":2,"title":"修饰符类型变量","slug":"修饰符类型变量","link":"#修饰符类型变量","children":[{"level":3,"title":"uniforms","slug":"uniforms","link":"#uniforms","children":[]}]},{"level":2,"title":"特殊类型变量","slug":"特殊类型变量","link":"#特殊类型变量","children":[]},{"level":2,"title":"顶点着色器变量","slug":"顶点着色器变量","link":"#顶点着色器变量","children":[]},{"level":2,"title":"片段着色器","slug":"片段着色器","link":"#片段着色器","children":[]},{"level":2,"title":"精度限定符","slug":"精度限定符","link":"#精度限定符","children":[]}],"git":{"createdTime":1671175256000,"updatedTime":1681810235000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":3},{"name":"卢祥","email":"example@qq.com","commits":3}]},"readingTime":{"minutes":25.82,"words":7746},"filePathRelative":"glsl/glsl-vars.md","localizedDate":"2022年10月2日"}')}}]);