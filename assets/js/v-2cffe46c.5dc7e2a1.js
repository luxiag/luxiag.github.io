"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4136],{6173:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});var e=a(1534);const l=(0,e.uE)('<p>Babel是一个工具链，主要用于旧浏览器或者缓解中将ECMAScript 2015+代码转换为向后兼容版本的 JavaScript；</p><p><strong>babel会根据browserslist工具进行适配</strong></p><h2 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> plugins</h2><p>本质就是一个JS程序, 指示着Babel如何对代码进行转换.</p><ul><li>插件在 Presets 前运行。</li><li>插件顺序从前往后排列。</li><li>Preset 顺序是颠倒的（从后往前）。</li></ul><h3 id="babel-plugin-transform-runtime" tabindex="-1"><a class="header-anchor" href="#babel-plugin-transform-runtime" aria-hidden="true">#</a> @babel/plugin-transform-runtime</h3><p>转换箭头函数</p><h3 id="babel-plugin-transform-block-scoping" tabindex="-1"><a class="header-anchor" href="#babel-plugin-transform-block-scoping" aria-hidden="true">#</a> <strong>@babel/plugin-transform-block-scoping</strong></h3><p>将const、let转换为var</p><h2 id="preset" tabindex="-1"><a class="header-anchor" href="#preset" aria-hidden="true">#</a> preset</h2><p>预设就是一堆插件(Plugin)的组合</p><p>预设有三个：</p><ul><li>env</li><li>react</li><li>TypeScript</li></ul><h3 id="babel-preset-env" tabindex="-1"><a class="header-anchor" href="#babel-preset-env" aria-hidden="true">#</a> @babel/preset-env</h3><p>允许您使用最新的JavaScript，而不需要微管理您的目标环境需要哪些语法转换(以及可选的浏览器填充)</p><p>会根据browerslist工具或者target属性自动配置</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token literal-property property">presets</span><span class="token operator">:</span><span class="token punctuation">[</span>\n\t<span class="token punctuation">[</span><span class="token string">&quot;@babel/reset-env&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n<span class="token comment">// 配置的targets属性会覆盖browserslist；</span>\n\t\t<span class="token literal-property property">targets</span><span class="token operator">:</span><span class="token string">&quot;last 2 version&quot;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="babel-preset-react" tabindex="-1"><a class="header-anchor" href="#babel-preset-react" aria-hidden="true">#</a> @babel/preset-react</h3><p>设置 React</p><h2 id="polyfill" tabindex="-1"><a class="header-anchor" href="#polyfill" aria-hidden="true">#</a> <strong>polyfill</strong></h2><p>当使用了一些语法特性（例如：Promise, Generator, Symbol等以及实例方法例如Array.prototype.includes等）浏览器不认识这些特性就可以使用polyfill来填充或者说打一个补丁，那么就会包含该特性了；</p><p><strong>使用</strong></p><p>babel7.4.0之前，直接使用@babel/polyfill</p><p>babel7.4.0之后，单独引入core-js和regenerator-runtime来完成polyfill的使用</p><p><code>webpack.config.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n     module<span class="token operator">:</span><span class="token punctuation">{</span>\n         rules<span class="token operator">:</span><span class="token punctuation">[</span>\n             <span class="token punctuation">{</span>\n                 test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n                 <span class="token comment">//该文件下的包可能开发已经使用过了</span>\n                 exclude<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n                 use<span class="token operator">:</span><span class="token punctuation">{</span>\n                     loader<span class="token operator">:</span><span class="token string">&quot;babel-loader&quot;</span>\n                 <span class="token punctuation">}</span>\n             <span class="token punctuation">}</span>\n         <span class="token punctuation">]</span>\n     <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>babel.config.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n     presets<span class="token operator">:</span><span class="token punctuation">[</span>\n         <span class="token punctuation">[</span>\n             <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n                 <span class="token comment">//在该preset里使用profill</span>\n                 <span class="token comment">//useBuiltIns: 设置以什么样的方式来使用polyfill；</span>\n                 useBuiltIns<span class="token operator">:</span><span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span>\n                 <span class="token comment">//false 不使用polyfill 不需要设置corejs</span>\n                 <span class="token comment">//usage 根据源代码中出现的语言特性，自动检测所需要的polyfill；</span>\n                 <span class="token comment">//      可以设置corejs属性来确定使用的corejs的版本；</span>\n                 <span class="token comment">//entry 根据 browserslist 目标导入所有的polyfill，</span>\n                 <span class="token comment">//      并且需要在入口文件中添加 `import &#39;core-js/stable&#39;;</span>\n                 <span class="token comment">//      import &#39;regenerator-runtime/runtime&#39;;</span>\n                 corejs<span class="token operator">:</span> <span class="token number">3.8</span>  <span class="token comment">//设置corejs的版本</span>\n \n             <span class="token punctuation">}</span>\n         <span class="token punctuation">]</span>\n     <span class="token punctuation">]</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="plugin-transform-runtime" tabindex="-1"><a class="header-anchor" href="#plugin-transform-runtime" aria-hidden="true">#</a> <strong>Plugin-transform-runtime</strong></h3><p>使用的polyfill，默认情况是添加的所有特性都是全局的</p><p>编写一个工具库，工具库需要使用polyfill；避免污染全局代码使用@babel/plugin-transform-runtime来完成polyfill的功能；</p><p><strong>使用</strong></p><p><code>babel.config.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n   plugins<span class="token operator">:</span><span class="token punctuation">[</span>\n       <span class="token punctuation">[</span><span class="token string">&quot;@babel/plugin-transform-tuntime&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n           <span class="token string">&quot;corejs&quot;</span><span class="token operator">:</span><span class="token number">3</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span>\n   <span class="token punctuation">]</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',34),t=(0,e.uE)('<h2 id="babel命令行使用" tabindex="-1"><a class="header-anchor" href="#babel命令行使用" aria-hidden="true">#</a> <strong>Babel命令行使用</strong></h2><p>babel本身可以作为一个独立的工具（和postcss一样），不和webpack等构建工具配置来单独使用。</p><ul><li>@babel/core：babel的核心代码，必须安装；</li><li>@babel/cli：可以让我们在命令行使用babel；</li></ul><h3 id="插件的使用" tabindex="-1"><a class="header-anchor" href="#插件的使用" aria-hidden="true">#</a> <strong>插件的使用</strong></h3><p>转换箭头函数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">npm</span> <span class="token function">install</span> @babel/plugin-transform-arrow-functions <span class="token parameter variable">-D</span>\n\n npx babel src --out-dir dist <span class="token parameter variable">--plugins</span><span class="token operator">=</span>@babel/plugin-transform-arrow-functions\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量转换</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">npm</span> <span class="token function">install</span> @babel/plugin-transform-block-scoping <span class="token parameter variable">-D</span>\n\n npx babel src --out-dir dist <span class="token parameter variable">--plugins</span><span class="token operator">=</span>@babel/plugin-transform-block-scoping\n ,@babel/plugin-transform-arrow-functions\n \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在webpack中使用" tabindex="-1"><a class="header-anchor" href="#在webpack中使用" aria-hidden="true">#</a> <strong>在webpack中使用</strong></h2><p><code>webpack.config.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n     module<span class="token operator">:</span><span class="token punctuation">{</span>\n         rules<span class="token operator">:</span><span class="token punctuation">[</span>\n             <span class="token punctuation">{</span>\n                 test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n                 use<span class="token operator">:</span><span class="token punctuation">{</span>\n                     loader<span class="token operator">:</span><span class="token string">&quot;babel-loader&quot;</span>\n                 <span class="token punctuation">}</span>\n             <span class="token punctuation">}</span>\n         <span class="token punctuation">]</span>\n     <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用plugins" tabindex="-1"><a class="header-anchor" href="#使用plugins" aria-hidden="true">#</a> <strong>使用plugins</strong></h3><p><code>webpack.config.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n     module<span class="token operator">:</span><span class="token punctuation">{</span>\n         rules<span class="token operator">:</span><span class="token punctuation">[</span>\n             <span class="token punctuation">{</span>\n                 test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n                 use<span class="token operator">:</span><span class="token punctuation">{</span>\n                     loader<span class="token operator">:</span><span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>\n                     options<span class="token operator">:</span><span class="token punctuation">{</span>\n                         plugins<span class="token operator">:</span><span class="token punctuation">[</span>\n                             <span class="token string">&quot;@babel/plugin-transform-arrow-functions&quot;</span><span class="token punctuation">,</span>\n                             <span class="token string">&quot;@babel/plugin-transform-block-scoping&quot;</span>\n                         <span class="token punctuation">]</span>\n                     <span class="token punctuation">}</span>\n                 <span class="token punctuation">}</span>\n             <span class="token punctuation">}</span>\n         <span class="token punctuation">]</span>\n     <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用preset" tabindex="-1"><a class="header-anchor" href="#使用preset" aria-hidden="true">#</a> <strong>使用preset</strong></h3><p><code>webpack.config.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n     module<span class="token operator">:</span><span class="token punctuation">{</span>\n         rules<span class="token operator">:</span><span class="token punctuation">[</span>\n             <span class="token punctuation">{</span>\n                 test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n                 use<span class="token operator">:</span><span class="token punctuation">{</span>\n                     loader<span class="token operator">:</span><span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>\n                     options<span class="token operator">:</span><span class="token punctuation">{</span>\n                         presets<span class="token operator">:</span><span class="token punctuation">[</span>\n                             <span class="token comment">//第一种写法：不使用属性</span>\n                             <span class="token comment">//“@babel/preset-env”</span>\n\n                             <span class="token comment">//第二种写法：使用预设属性</span>\n                             <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n                                 <span class="token comment">//使用属性</span>\n                                 <span class="token comment">//https://www.babeljs.cn/docs/babel-preset-env</span>\n                             <span class="token punctuation">}</span><span class="token punctuation">]</span>\n                         <span class="token punctuation">]</span>\n                     <span class="token punctuation">}</span>\n                 <span class="token punctuation">}</span>\n             <span class="token punctuation">}</span>\n         <span class="token punctuation">]</span>\n     <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="独立babel配置" tabindex="-1"><a class="header-anchor" href="#独立babel配置" aria-hidden="true">#</a> <strong>独立babel配置</strong></h2><p>将webpack中的重复使用的plugins和preset单独抽离出来</p><p><strong>babel提供了两种配置文件的编写：</strong></p><ul><li>babel.config.json（或者.js，.cjs，.mjs）文件；</li><li>.babelrc.json（或者.babelrc，.js，.cjs，.mjs）文件；</li><li>.babelrc.json：早期使用较多的配置方式，但是对于配置Monorepos项目是比较麻烦的；</li><li>babel.config.json（babel7）：可以直接作用于Monorepos项目的子包，更加推荐；</li></ul><p><code>babel.config.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n     preset<span class="token operator">:</span><span class="token punctuation">[</span>\n         <span class="token punctuation">[</span>\n             <span class="token string">&quot;@babel/preset-env&quot;</span>\n         <span class="token punctuation">]</span>\n     <span class="token punctuation">]</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="babel底层原理" tabindex="-1"><a class="header-anchor" href="#babel底层原理" aria-hidden="true">#</a> <strong>Babel底层原理</strong></h2><p>可以将babel看成就是一个编译器</p><p>Babel也拥有编译器的工作流程：</p><ul><li>解析阶段（Parsing）</li><li>转换阶段（Transformation）</li><li>生成阶段（Code Generation）</li></ul>',27),i={},p=(0,a(1935).Z)(i,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,[l,(0,e.kq)(" ![image-20210824150749960.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/44cf47ba-2317-4939-ac66-76f027030662/image-20210824150749960.png) "),t])}]])},1935:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},1129:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-2cffe46c","path":"/webpack/babel.html","title":"babel是什么","lang":"zh-CN","frontmatter":{"title":"babel是什么","date":"2021-02-11T00:00:00.000Z","category":["Webpack","Babel"],"summary":"Babel是一个工具链，主要用于旧浏览器或者缓解中将ECMAScript 2015+代码转换为向后兼容版本的 JavaScript； babel会根据browserslist工具进行适配 plugins 本质就是一个JS程序, 指示着Babel如何对代码进行转换. 插件在 Presets 前运行。; 插件顺序从前往后排列。; Preset 顺序是颠倒的（从后","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/webpack/babel.html"}],["meta",{"property":"og:title","content":"babel是什么"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-30T06:58:22.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2021-02-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-30T06:58:22.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"plugins","slug":"plugins","link":"#plugins","children":[{"level":3,"title":"@babel/plugin-transform-runtime","slug":"babel-plugin-transform-runtime","link":"#babel-plugin-transform-runtime","children":[]},{"level":3,"title":"@babel/plugin-transform-block-scoping","slug":"babel-plugin-transform-block-scoping","link":"#babel-plugin-transform-block-scoping","children":[]}]},{"level":2,"title":"preset","slug":"preset","link":"#preset","children":[{"level":3,"title":"@babel/preset-env","slug":"babel-preset-env","link":"#babel-preset-env","children":[]},{"level":3,"title":"@babel/preset-react","slug":"babel-preset-react","link":"#babel-preset-react","children":[]}]},{"level":2,"title":"polyfill","slug":"polyfill","link":"#polyfill","children":[{"level":3,"title":"Plugin-transform-runtime","slug":"plugin-transform-runtime","link":"#plugin-transform-runtime","children":[]}]},{"level":2,"title":"Babel命令行使用","slug":"babel命令行使用","link":"#babel命令行使用","children":[{"level":3,"title":"插件的使用","slug":"插件的使用","link":"#插件的使用","children":[]}]},{"level":2,"title":"在webpack中使用","slug":"在webpack中使用","link":"#在webpack中使用","children":[{"level":3,"title":"使用plugins","slug":"使用plugins","link":"#使用plugins","children":[]},{"level":3,"title":"使用preset","slug":"使用preset","link":"#使用preset","children":[]}]},{"level":2,"title":"独立babel配置","slug":"独立babel配置","link":"#独立babel配置","children":[]},{"level":2,"title":"Babel底层原理","slug":"babel底层原理","link":"#babel底层原理","children":[]}],"git":{"createdTime":1667133388000,"updatedTime":1672383502000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1},{"name":"luxiang","email":"luxiag@qq.com","commits":1},{"name":"卢祥","email":"example@qq.com","commits":1}]},"readingTime":{"minutes":3.19,"words":958},"filePathRelative":"webpack/babel.md","localizedDate":"2021年2月11日"}')}}]);