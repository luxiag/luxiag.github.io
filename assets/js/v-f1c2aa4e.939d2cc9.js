"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1604],{9700:(a,s,n)=>{n.r(s),n.d(s,{default:()=>o});var e=n(1534);const t=[(0,e.uE)('<h2 id="loader-本质" tabindex="-1"><a class="header-anchor" href="#loader-本质" aria-hidden="true">#</a> loader 本质</h2><p>| webpack 只能处理 JavaScript 和 JSON 文件，其他类型的文件 webpack 需要借助 loader 来处理,loader 本质就是一个 JavaScript 函数</p><h2 id="loader-的使用" tabindex="-1"><a class="header-anchor" href="#loader-的使用" aria-hidden="true">#</a> loader 的使用</h2><ul><li>配置方式（官方推荐）</li><li>内联方式</li></ul><details class="custom-container details"><summary>配置方式</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token comment">// [style-loader](/loaders/style-loader)</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;style-loader&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token comment">// [css-loader](/loaders/css-loader)</span>\n          <span class="token punctuation">{</span>\n            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token comment">// [sass-loader](/loaders/sass-loader)</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;sass-loader&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>内联方式</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 ! 将资源中的 loader 分开。每个部分都会相对于当前目录解析。</span>\n<span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">&quot;style-loader!css-loader?modules!./styles.css&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="loader-的分类" tabindex="-1"><a class="header-anchor" href="#loader-的分类" aria-hidden="true">#</a> loader 的分类</h3><p>配置方式更具<code>Rule.enforce</code>的取值 loader 分为前置<code>pre</code>和后置<code>post</code>,默认为<code>normal</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(t|j)s$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token comment">// post</span>\n    <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">cacheDirectory</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内联方式的 loader 取值为行内<code>inline</code></p><h3 id="inline-方式的-loader" tabindex="-1"><a class="header-anchor" href="#inline-方式的-loader" aria-hidden="true">#</a> inline 方式的 loader</h3><p>使用 ! 将资源中的 loader 分开。每个部分都会相对于当前目录解析。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">&quot;style-loader!css-loader?modules!./styles.css&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 ! 前缀，将禁用所有已配置的 normal loader(普通 loader)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">&quot;!style-loader!css-loader?modules!./styles.css&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 !! 前缀，将禁用所有已配置的 loader（preLoader, loader, postLoader）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">&quot;!!style-loader!css-loader?modules!./styles.css&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 -! 前缀，将禁用所有已配置的 preLoader 和 loader，但是不禁用 postLoaders</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">&quot;-!style-loader!css-loader?modules!./styles.css&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="loader-的优先级" tabindex="-1"><a class="header-anchor" href="#loader-的优先级" aria-hidden="true">#</a> loader 的优先级</h2><p>四种 loader 调用先后顺序为：pre &gt; normal &gt; inline &gt; post</p><p>每个 loader 都有 normal 函数和 pitch 函数</p><ul><li>normal 函数 相同种类 loader 的情况下，调用的优先级为，自下而上，自右向左。</li><li>pitch 函数 则反过来</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// xx-loader</span>\n<span class="token comment">// normal函数</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// pitch函数</span>\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">pitch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">remainingRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pitch-函数" tabindex="-1"><a class="header-anchor" href="#pitch-函数" aria-hidden="true">#</a> pitch 函数</h3><p>loader 有两个函数，默认<code>module.exports</code>导出函数为<code>normal</code>函数,<code>module.exports.pitch</code>导出函数为<code>pitch</code>方法</p><p>在 loader 从右向左调用之前，会进行一次从左到右的 pitch 方法调用，而在 pitch 调用过程中，如果任何一个有返回值，那么将阻断后续的 loader 调用链，进而将自身的返回结果传递给上一个 loader 作为 content</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>顺序 a-loader.pitch =&gt; b-loader.pitch =&gt; c-loader.pitch =&gt; c-loader =&gt; b-loader =&gt; a-loader</p><p>如果 pitch loader有返回值 将会跳过后面的loader 将结果传递给前一个loader 例如： b-loader.pitch 有返回值 a-loader.pitch =&gt; b-loader.pitch =&gt; a-loader</p>',30)],p={},o=(0,n(1935).Z)(p,[["render",function(a,s){return(0,e.wg)(),(0,e.iD)("div",null,t)}]])},1935:(a,s)=>{s.Z=(a,s)=>{const n=a.__vccOpts||a;for(const[a,e]of s)n[a]=e;return n}},5874:(a,s,n)=>{n.r(s),n.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-f1c2aa4e","path":"/webpack/loader-basic-knowledge.html","title":"什么是loader","lang":"zh-CN","frontmatter":{"title":"什么是loader","date":"2020-08-11T00:00:00.000Z","summary":"loader 本质 | webpack 只能处理 JavaScript 和 JSON 文件，其他类型的文件 webpack 需要借助 loader 来处理,loader 本质就是一个 JavaScript 函数 loader 的使用 配置方式（官方推荐）; 内联方式; 配置方式 内联方式 loader 的分类 配置方式更具Rule.enforce的取值 lo","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/webpack/loader-basic-knowledge.html"}],["meta",{"property":"og:title","content":"什么是loader"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-10-30T12:36:28.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2020-08-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-10-30T12:36:28.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"loader 本质","slug":"loader-本质","link":"#loader-本质","children":[]},{"level":2,"title":"loader 的使用","slug":"loader-的使用","link":"#loader-的使用","children":[{"level":3,"title":"loader 的分类","slug":"loader-的分类","link":"#loader-的分类","children":[]},{"level":3,"title":"inline 方式的 loader","slug":"inline-方式的-loader","link":"#inline-方式的-loader","children":[]}]},{"level":2,"title":"loader 的优先级","slug":"loader-的优先级","link":"#loader-的优先级","children":[{"level":3,"title":"pitch 函数","slug":"pitch-函数","link":"#pitch-函数","children":[]}]}],"git":{"createdTime":1666690545000,"updatedTime":1667133388000,"contributors":[{"name":"luxiang","email":"luxiag@qq.com","commits":1},{"name":"卢祥","email":"example@gmail.com","commits":1}]},"readingTime":{"minutes":2,"words":600},"filePathRelative":"webpack/loader-basic-knowledge.md","localizedDate":"2020年8月11日"}')}}]);